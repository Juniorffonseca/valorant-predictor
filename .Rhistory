acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.83) {
acharnn()
}
#save(n, file ='rede_neural.rda')
save(n, file='rede_neural_teste.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
nn2 <- as.factor(nn2)
x <- confusionMatrix(nn2, test_data$ganhador)
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
nn2
View(predictVstest)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
while ( i < 0.84) {
acharnn()
}
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 0.7,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.84) {
acharnn()
}
while ( i < 0.835) {
acharnn()
}
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while (i < 0.835) {
acharnn()
}
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
View(predictVstest)
mean(Predict$net.result),1,0)
mean(Predict$net.result)
View(predictVstest)
while (i < 0.835) {
acharnn()
}
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while (i < 0.835) {
acharnn()
}
i <- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while (i < 0.835) {
acharnn()
}
acharnn <- function(){
n <<- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict <-- compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <<- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while (i < 0.835) {
acharnn()
}
acharnn <- function(){
n <<- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict <<- compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <<- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while (i < 0.835) {
acharnn()
}
predictVstest <<- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
acharnn <- function(){
n <<- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict <<- compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <<- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while (i < 0.84) {
acharnn()
}
acharnn <- function(){
n <<- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict <<- compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <<- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while (i < 0.84) {
acharnn()
}
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
Predict <<- compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <<- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(caret)
library(ggplot2)
View(test_data)
acharnn <- function(){
n <<- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict <<- compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <<- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while (i < 0.84) {
acharnn()
}
z <- 1
z <- 0.1
acharnn <- function(){
n <<- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict <<- compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <<- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
z <<- ifelse(i>z, z <<- i, z <<- z)
print(z)
}
while (i < 0.84) {
acharnn()
}
predictVstest <<- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
nn2 <- as.factor(nn2)
x <- confusionMatrix(nn2, test_data$ganhador)
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
#save(n, file ='rede_neural.rda')
save(n, file='rede_neural_teste.rda')
jogos <- read.csv2('csv/partidas.csv') %>% dplyr::select(-X, -ganhador)
outras_partidas <- read.csv2('csv/partidas_2.csv') %>% dplyr::select(-X, -ganhador)
jogos_scale <- rbind(jogos, outras_partidas)
jogos_scale <- scale(jogos_scale)
partidas <- jogos_scale[-1:-nrow(jogos),]
partidas <- as.data.frame(partidas)
previsao <- compute(n, partidas)
previsao <- previsao$net.result
partidas_reversas <- partidas
partidas_reversas$time1R <- partidas$time2R
partidas_reversas$time2R <- partidas$time1R
partidas_reversas$time1ACS <- partidas$time2ACS
partidas_reversas$time2ACS <- partidas$time1ACS
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
a <- read.csv2('csv/urls_2')
a <- read.csv2('csv/urls_2.csv') %>% select(-X)
a <- unlist(a)
m <- 1
dff <- list()
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(a[m], resultado = T)
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
library(valorant)
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(a[m], resultado = T)
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
dff <- dff %>% map_df(as_tibble)
write.csv2(dff, 'csv/partidas_2_teste.csv') #apenas de janeiro 2023 em diante
load(file = 'rede_neural_teste.rda')
jogos <- read.csv2('csv/partidas.csv') %>% dplyr::select(-X, -ganhador)
outras_partidas <- read.csv2('csv/partidas_2_teste.csv') %>% dplyr::select(-X, -ganhador)
jogos_scale <- rbind(jogos, outras_partidas)
jogos_scale <- scale(jogos_scale)
partidas <- jogos_scale[-1:-nrow(jogos),]
partidas <- as.data.frame(partidas)
previsao <- compute(n, partidas)
previsao <- previsao$net.result
partidas_reversas <- partidas
partidas_reversas$time1R <- partidas$time2R
jogos <- read.csv2('csv/partidas.csv') %>% dplyr::select(-X, -ganhador)
outras_partidas <- read.csv2('csv/partidas_2_teste.csv') %>% dplyr::select(-X, -ganhador)
jogos_scale <- rbind(jogos, outras_partidas)
jogos <- read.csv2('csv/partidas_teste.csv') %>% dplyr::select(-X, -ganhador)
outras_partidas <- read.csv2('csv/partidas_2_teste.csv') %>% dplyr::select(-X, -ganhador)
jogos_scale <- rbind(jogos, outras_partidas)
jogos_scale <- scale(jogos_scale)
partidas <- jogos_scale[-1:-nrow(jogos),]
partidas <- as.data.frame(partidas)
previsao <- compute(n, partidas)
previsao <- previsao$net.result
partidas_reversas <- partidas
partidas_reversas$time1R <- partidas$time2R
partidas_reversas$time2R <- partidas$time1R
partidas_reversas$time1ACS <- partidas$time2ACS
partidas_reversas$time2ACS <- partidas$time1ACS
partidas_reversas$time1KAST <- partidas$time2KAST
partidas_reversas$time2KAST <- partidas$time1KAST
partidas_reversas$time1KD <- partidas$time2KD
partidas_reversas$time2KD <- partidas$time1KD
partidas_reversas$time1ADR <- partidas$time2ADR
partidas_reversas$time2ADR <- partidas$time1ADR
previsao2 <- compute(n, partidas_reversas)
previsao2 <- previsao2$net.result
previsoes <- cbind(previsao, previsao2)
transforma_positivo <- function (x){
y = atan(x) + pi/2
return (y)
}
transforma_probabilidade <- function (y, x){
z = y / (y + x)
w = x / (x + y)
c = as.matrix(c(z,w))
return(c)
}
a <- transforma_positivo(previsao)
b <- transforma_positivo(previsao2)
previsao <- transforma_probabilidade(a,b)
previsao <- previsao * 100
previsao2 <- previsao[((length(previsao)/2)+1):length(previsao)]
previsao <- previsao[1:(length(previsao)/2)]
previsao <- cbind(previsao, previsao2)
ganhadores <- read.csv2('csv/partidas_2.csv') %>% dplyr::select(ganhador)
ganhadores <- read.csv2('csv/partidas_2_teste.csv') %>% dplyr::select(ganhador)
previsao <- cbind(previsao, ganhadores)
colnames(previsao) <- c('previsao1', 'previsao2', 'ganhador')
previsao <- previsao %>%
mutate(ganhador = as.factor(ganhador))
# Plot
ggplot(data = previsao, mapping = aes(x = previsao1, y = previsao2, colour = ganhador)) +
geom_tile(aes(fill = ganhador)) +
geom_point() +
theme_bw()
resultados <- dplyr::select(previsao, ganhador)
resultadovspredict <- cbind(partidas, previsao)
resultadovspredict$previsoes <-  ifelse(resultadovspredict$previsao1>resultadovspredict$previsao2,
1,
0)
i <- sum(resultadovspredict$ganhador == resultadovspredict$previsoes)/nrow(resultadovspredict)
