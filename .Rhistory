# Diferença de KAST
plot3 <- ggplot(jogos, aes(x = KAST_diff, fill = ganhador)) +
geom_density(alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de KAST', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw() +
theme(legend.position = "bottom")
# Diferença de ADR
plot4 <- ggplot(jogos, aes(x = ADR_diff, fill = ganhador)) +
geom_density(alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de ADR', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw() +
theme(legend.position = "bottom")
# Combinando os gráficos em uma única grade
grid.arrange(plot1, plot2, plot3, plot4, ncol = 3, bottom = "Legenda comum para todos os gráficos")
library(gridExtra)
# Diferença de Rating
plot1 <- ggplot(jogos, aes(x = R_diff, fill = ganhador)) +
geom_density(alpha = 0.7, show.legend = FALSE) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de Rating', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador', guide = FALSE)) +
theme_bw() +
theme(legend.position = "bottom")
# Diferença de ROUNDS
plot2 <- ggplot(jogos, aes(x = RND_diff, fill = ganhador)) +
geom_density(alpha = 0.7, show.legend = FALSE) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de ROUNDS', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = NULL, guide = FALSE)) +
theme_bw() +
theme(legend.position = "bottom")
# Diferença de KAST
plot3 <- ggplot(jogos, aes(x = KAST_diff, fill = ganhador)) +
geom_density(alpha = 0.7, show.legend = FALSE) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de KAST', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = NULL, guide = FALSE)) +
theme_bw() +
theme(legend.position = "bottom")
# Diferença de ADR
plot4 <- ggplot(jogos, aes(x = ADR_diff, fill = ganhador)) +
geom_density(alpha = 0.7, show.legend = FALSE) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de ADR', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = NULL, guide = FALSE)) +
theme_bw() +
theme(legend.position = "bottom")
# Combinando os gráficos em uma única grade
grid.arrange(plot1, plot2, plot3, plot4, ncol = 3, bottom = "Legenda comum para todos os gráficos")
library(gridExtra)
library(grid)
# Criando a legenda comum
legenda <- ggplot(jogos, aes(x = ganhador, fill = ganhador)) +
geom_bar(stat = "count", show.legend = FALSE) +
scale_fill_manual(values = c('red', 'green')) +
theme(legend.position = "bottom")
# Diferença de Rating
plot1 <- ggplot(jogos, aes(x = R_diff, fill = ganhador)) +
geom_density(alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de Rating', y = 'Densidade') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = FALSE) +
theme_bw() +
theme(legend.position = "none")
# Diferença de ROUNDS
plot2 <- ggplot(jogos, aes(x = RND_diff, fill = ganhador)) +
geom_density(alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de ROUNDS', y = 'Densidade') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = FALSE) +
theme_bw() +
theme(legend.position = "none")
# Diferença de KAST
plot3 <- ggplot(jogos, aes(x = KAST_diff, fill = ganhador)) +
geom_density(alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de KAST', y = 'Densidade') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = FALSE) +
theme_bw() +
theme(legend.position = "none")
# Diferença de ADR
plot4 <- ggplot(jogos, aes(x = ADR_diff, fill = ganhador)) +
geom_density(alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de ADR', y = 'Densidade') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = FALSE) +
theme_bw() +
theme(legend.position = "none")
# Combinando os gráficos em uma única grade
grid.arrange(arrangeGrob(plot1, plot2, plot3, plot4, ncol = 2, widths = c(1,1)), legenda, ncol = 1, bottom = "Legenda comum para todos os gráficos")
library(gridExtra)
library(grid)
# Criando a legenda comum
legenda <- ggplot(jogos, aes(x = ganhador, fill = ganhador)) +
geom_bar(stat = "count", show.legend = FALSE) +
scale_fill_manual(values = c('red', 'green')) +
theme(legend.position = "bottom",
legend.text = element_text(size = 8),
legend.title = element_text(size = 9))
# Diferença de Rating
plot1 <- ggplot(jogos, aes(x = R_diff, fill = ganhador)) +
geom_density(alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de Rating', y = 'Densidade') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = FALSE) +
theme_bw() +
theme(legend.position = "none")
# Diferença de ROUNDS
plot2 <- ggplot(jogos, aes(x = RND_diff, fill = ganhador)) +
geom_density(alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de ROUNDS', y = 'Densidade') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = FALSE) +
theme_bw() +
theme(legend.position = "none")
# Diferença de KAST
plot3 <- ggplot(jogos, aes(x = KAST_diff, fill = ganhador)) +
geom_density(alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de KAST', y = 'Densidade') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = FALSE) +
theme_bw() +
theme(legend.position = "none")
# Diferença de ADR
plot4 <- ggplot(jogos, aes(x = ADR_diff, fill = ganhador)) +
geom_density(alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de ADR', y = 'Densidade') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = FALSE) +
theme_bw() +
theme(legend.position = "none")
# Combinando os gráficos em uma única grade
grid.arrange(arrangeGrob(plot1, plot2, plot3, plot4, ncol = 2, widths = c(1,1)), legenda, ncol = 1, bottom = "Legenda comum para todos os gráficos")
library(gridExtra)
# Diferença de Rating
plot1 <- ggplot(jogos, aes(x = R_diff, fill = ganhador)) +
geom_density(alpha = 0.7, show.legend = FALSE) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de Rating', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador', guide = FALSE)) +
theme_bw() +
theme(legend.position = "bottom")
# Diferença de ROUNDS
plot2 <- ggplot(jogos, aes(x = RND_diff, fill = ganhador)) +
geom_density(alpha = 0.7, show.legend = FALSE) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de ROUNDS', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = NULL, guide = FALSE)) +
theme_bw() +
theme(legend.position = "bottom")
# Diferença de KAST
plot3 <- ggplot(jogos, aes(x = KAST_diff, fill = ganhador)) +
geom_density(alpha = 0.7, show.legend = FALSE) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de KAST', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = NULL, guide = FALSE)) +
theme_bw() +
theme(legend.position = "bottom")
# Diferença de ADR
plot4 <- ggplot(jogos, aes(x = ADR_diff, fill = ganhador)) +
geom_density(alpha = 0.7, show.legend = FALSE) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de ADR', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = NULL, guide = FALSE)) +
theme_bw() +
theme(legend.position = "bottom")
# Combinando os gráficos em uma única grade
grid.arrange(plot1, plot2, plot3, plot4, ncol = 3, bottom = "Legenda comum para todos os gráficos")
# Diferença de Rating
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = R_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de Rating', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
ggplotly(
jogos %>%
ggplot() +
geom_histogram(aes(x = R_diff, fill = ganhador), alpha = 0.7, binwidth = 5) +
labs(x = 'Diferença da média de Rating', y = 'Frequência', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de Rating
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = R_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de Rating', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de ROUNDS
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = RND_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de rounds', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de Rating
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = R_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de Rating', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de ACS
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = ACS_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de ACS', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de KAST
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = KAST_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de KAST', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Fazer previsões nos dados de treinamento e teste usando a rede neural treinada
train_preds <- predict(n, training_data)
test_preds <- predict(n, test_data)
train_preds <- ifelse(train_preds > 0.5, 1, 0)
test_preds <- ifelse(test_preds > 0.5, 1, 0)
# Calcular a precisão da rede neural nos conjuntos de treinamento e teste
train_acc <- mean(train_preds == training_data$ganhador)
test_acc <- mean(test_preds == test_data$ganhador)
# Exibir a precisão nos conjuntos de treinamento e teste
cat('Precisão nos dados de treinamento:', train_acc, '\n')
cat('Precisão nos dados de teste:', test_acc, '\n')
# Verificar se há overfitting comparando a precisão nos conjuntos de treinamento e teste
if(test_acc < train_acc){
cat('A precisão nos dados de teste é menor do que a precisão nos dados de treinamento, o que pode indicar overfitting.\n')
} else {
cat('Não há evidência de overfitting.\n')
}
# Separar as variáveis preditoras e a variável de resposta
variaveis_preditoras <- subset(jogos, select = -c(ganhador))
variavel_resposta <- jogos$ganhador
# Normalizar as variáveis preditoras
variaveis_preditoras_norm <- scale(variaveis_preditoras)
jogos_normalizados <- cbind(variaveis_preditoras, variavel_resposta)
# Ajustar um modelo de regressão logística com as variáveis preditoras normalizadas
modelo <- glm(variavel_resposta ~ ., data = jogos_normalizados, family = 'binomial')
# Examinar a importância de cada variável no modelo
importancia <- abs(coef(modelo))
importancia_rel <- importancia/sum(importancia)
importancia_rel
# Criar um gráfico de barras para visualizar as importâncias relativas
barplot(importancia_rel, horiz = TRUE, las = 1, main = 'Importância Relativa das Variáveis')
# Criar um gráfico de barras para visualizar as importâncias relativas
barplot(importancia_rel, horiz = F, las = 1, main = 'Importância Relativa das Variáveis')
# Diferença de ACS
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = ACS_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de ACS', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de KAST
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = KAST_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de KAST', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de KD
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = KD_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de KD', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de ADR
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = ADR_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de ADR', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de KPR
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = KPR_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de KPR', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de APR
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = APR_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de APR', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de FKPR
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = FKPR_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de FKPR', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de FDPR
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = FDPR_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de FDPR', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de Kill
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = K_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de Kill', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de Assistência
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = A_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de Assistência', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de First Kill
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = FK_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de First Kill', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de First Death
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = FD_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de First Death', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Diferença de Assistência
ggplotly(
jogos %>%
ggplot() +
geom_density(aes(x = A_diff, fill = ganhador), alpha = 0.7) +
geom_vline(xintercept = 0, color = 'black', size = 0.3) +
labs(x = 'Diferença da média de Assistência', y = 'Densidade', fill = 'Ganhador') +
scale_fill_manual(values = c('red', 'green')) +
guides(fill = guide_legend(title = 'Ganhador')) +
theme_bw()
)
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
#install_github('Juniorffonseca/r-pacote-valorant')
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(pROC)
library(ROCR)
library(kableExtra)
library(valorant)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date('2023-04-13'), Sys.Date() - 1, by = 'day')
nomes_arquivos <- paste0('csv/previsao_diaria/', format(datas, '%Y-%m-%d'), '_acuracia.csv')
acuracia <- list()
for (arquivo in nomes_arquivos) {
acuracia[[arquivo]] <- possibly(read.csv2, otherwise = NULL)(arquivo)
}
acuracia <- bind_rows(acuracia) %>% select(-X)
acertos <- sum(acuracia$acertos)
erros <- sum(acuracia$erros)
print(acuracia_total <- acertos/(acertos+erros))
# Plot matriz de confusão
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1, size = 6.5) +
scale_fill_gradient2(low = hcl(0, 100, 70), mid = 'white', high = 'springgreen',
limits = c(0, max(x$Freq)), midpoint = max(x$Freq) / 2) +
labs(x = "Classe Real", y = "Classe Predita", fill = "Frequência") +
theme_bw(base_size = 14) +
theme(legend.position = 'none', axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(hjust = 1, size = 15), legend.title = element_text(size = 15)) +
guides(fill = FALSE)
F1 <- x$byClass['F1']
# Carregando modelo e obtendo os resultados
load('rede_neural_10_04_2023.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
# Carregando modelo e obtendo os resultados
load('rede_neural_10_04_2023.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
x <- as.data.frame(x$table)
predictVstest <- cbind(test_data, Predict$net.result)
names(predictVstest)[length(predictVstest)] <- 'previsao'
accuracy <- sum(predictVstest$ganhador == nn2)/nrow(test_data)
error_rate <- sum(predictVstest$ganhador != nn2)/nrow(test_data)
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
plot(n, rep = 1)
