margin = list(l = 50, r = 50, t = 50, b = 50))
View(predictVstest)
plot_ly(data = predictVstest, x = ~'Predict$net.result', y = ~ganhador,
color = ~factor(ganhador), colors = c("red", "green"), type = "scatter",
mode = "markers", marker = list(size = 10)) %>%
layout(xaxis = list(title = "Porcentagem"), yaxis = list(title = "Ganhador"),
legend = list(title = "Ganhador", font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50))
plot_ly(data = predictVstest, x = '~Predict$net.result', y = ~ganhador,
color = ~factor(ganhador), colors = c("red", "green"), type = "scatter",
mode = "markers", marker = list(size = 10)) %>%
layout(xaxis = list(title = "Porcentagem"), yaxis = list(title = "Ganhador"),
legend = list(title = "Ganhador", font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50))
rm(Predict)
plot_ly(data = predictVstest, x = ~Predict$net.result, y = ~ganhador,
color = ~factor(ganhador), colors = c("red", "green"), type = "scatter",
mode = "markers", marker = list(size = 10)) %>%
layout(xaxis = list(title = "Porcentagem"), yaxis = list(title = "Ganhador"),
legend = list(title = "Ganhador", font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50))
plot_ly(data = predictVstest, x = ~`Predict$net.result`, y = ~ganhador,
color = ~factor(ganhador), colors = c("red", "green"), type = "scatter",
mode = "markers", marker = list(size = 10)) %>%
layout(xaxis = list(title = "Porcentagem"), yaxis = list(title = "Ganhador"),
legend = list(title = "Ganhador", font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50))
plot_ly(data = predictVstest, x = ~`Predict$net.result`, y = ~ganhador,
color = ~factor(ganhador), colors = c("red", "green"), type = "scatter",
mode = "markers", marker = list(size = 10)) %>%
layout(xaxis = list(title = "Porcentagem"), yaxis = list(title = "Ganhador"),
legend = list(title = "Ganhador", font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = "line", x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = "black", width = 2))))
plot_ly(data = predictVstest, x = ~`Predict$net.result`, y = ~ganhador,
color = ~factor(ganhador), colors = c("red", "green"), type = "scatter",
mode = "markers", marker = list(size = 10)) %>%
layout(xaxis = list(title = "Porcentagem"), yaxis = list(title = "Ganhador"),
legend = list(title = "Ganhador", font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = "line", x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = "gray", width = 2))))
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(valorant)
url <- 'https://www.vlr.gg/169012/turtle-troop-vs-oxygen-esports-challengers-league-north-america-w5'
nomes_times <- read_html(url) %>%
html_nodes('wf-title-med') %>%
html_text()
nomes_times <- read_html(url) %>%
html_nodes('div.wf-title-med') %>%
html_text()
nomes_times
nomes_times <- read_html(url) %>%
html_nodes('div.wf-title-med') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
nomes_times
previsao <- c(70.5, 29.5)
previsao <- nomes_times + previsao
previsao <- paste(nomes_times, previsao, sep = ' ')
previsao
detach("package:valorant", unload = TRUE)
previsao <- paste(nomes_times, previsao, ' ')
?paste0
?paste
install_github("Juniorffonseca/r-pacote-valorant")
library(valorant)
detach("package:valorant", unload = TRUE)
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant", force= T)
---
runtime: shiny
setCurrentTheme()
library(bslib)
# Carregando pacotes
library(devtools)
#install_github("Juniorffonseca/r-pacote-valorant")
library(shiny)
library(shinythemes)
library(bslib)
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(reshape2)
library(data.table)
library(readr)
library(ggplot2)
library(DT)
library(valorant)
library(purrr)
setCurrentTheme()
library(bslib)
first_bs5_theme <- bs_theme(
version = 5
)
first_bs5_theme
first_bs5_theme
bs_theme_preview(theme = first_bs5_theme, with_themer = FALSE)
custom_theme <- bs_theme(
version = 5,
bg = "black",
fg = "red",
primary = "#0199F8",
secondary = "#FF374B",
base_font = "Maven Pro"
)
bs_theme_preview(custom_theme)
bs_theme_update(theme, bootswatch = "vapor")
custom_theme <- bs_theme_update(theme, bootswatch = "vapor")
custom_theme <- bs_theme_update(custom_theme, bootswatch = "vapor")
bs_theme_preview(custom_theme)
custom_theme <- bs_theme_update(custom_theme, bootswatch = "vapor")
bs_theme_preview(custom_theme)
custom_theme <- bs_theme_update(custom_theme, bootswatch = "morph")
bs_theme_preview(custom_theme)
custom_theme <- bs_theme_update(custom_theme, bootswatch = "sketchy")
bs_theme_preview(custom_theme)
custom_theme <- bs_theme_update(custom_theme, bootswatch = "journal")
custom_theme <- bs_theme(
version = 5,
primary = "#0199F8",
secondary = "#FF374B",
base_font = "Maven Pro"
)
custom_theme <- bs_theme_update(custom_theme, bootswatch = "journal")
custom_theme <- bs_theme(
version = 5,
primary = "#0199F8",
secondary = "#FF374B",
base_font = "Maven Pro"
)
custom_theme <- bs_theme_update(custom_theme, bootswatch = "journal")
?bs_theme
bs_theme_preview(custom_theme)
bs_theme_preview(bs_theme)
bs_theme_preview(theme)
# Define UI
tema <- bs_theme(version = 5, base_font = font_google('Yanone Kaffeesatz'), font_scale = 1.2)
bs_theme_preview(tema)
bs_theme_preview(tema)
# Define UI
tema <- bs_theme(version = 5, base_font = font_google('Yanone Kaffeesatz'), font_scale = 1.2)
bs_theme_preview(tema)
# Carregando pacotes
library(devtools)
#install_github("Juniorffonseca/r-pacote-valorant")
library(shiny)
library(shinythemes)
library(bslib)
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(reshape2)
library(data.table)
library(readr)
library(ggplot2)
library(DT)
library(valorant)
library(purrr)
# Define UI
tema <- bs_theme(version = 5, base_font = font_google('Yanone Kaffeesatz'), font_scale = 1.2)
bs_theme_preview(tema)
bs_theme_preview(tema)
install.packages("pROC")
install.packages("pROC")
install.packages("pROC")
library(pROC)
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(pROC)
library(valorant)
# Matriz de confusão ---------------------------------------------------------------------------------------
jogos <- read.csv2('csv/partidas_teste.csv') %>% dplyr::select(-X)
set.seed(s-1)
data_split <- initial_split(jogos, prop = 0.7, strata = "ganhador")
training_data <- training(data_split)
test_data <- testing(data_split)
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
test_data$ganhador <- as.factor(test_data$ganhador)
# Carregando modelo e obtendo os resultados
load('prototipo_rede_neural.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
s <- 10679
# Matriz de confusão ---------------------------------------------------------------------------------------
jogos <- read.csv2('csv/partidas_teste.csv') %>% dplyr::select(-X)
set.seed(s-1) #10679
data_split <- initial_split(jogos, prop = 0.7, strata = "ganhador")
training_data <- training(data_split)
test_data <- testing(data_split)
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
test_data$ganhador <- as.factor(test_data$ganhador)
# Carregando modelo e obtendo os resultados
load('prototipo_rede_neural.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
#Plot distribuição
histogram(predictVstest$`Predict$net.result`, breaks = 98,
col = ifelse(as.factor(predictVstest$ganhador) == 1, "blue", "red"))
predictVstest <- cbind(test_data, Predict$net.result)
View(predictVstest)
names(predictVstest)[31] <- 'previsao'
View(predictVstest)
predictVstest <- cbind(test_data, Predict$net.result)
View(predictVstest)
names(predictVstest)[32] <- 'previsao'
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
#Plot distribuição
histogram(predictVstest$`Predict$net.result`, breaks = 98,
col = ifelse(as.factor(predictVstest$ganhador) == 1, "blue", "red"))
plot_ly(data = predictVstest, x = ~previsao, y = ~ganhador,
color = ~factor(ganhador), colors = c("red", "green"), type = "scatter",
mode = "markers", marker = list(size = 10)) %>%
layout(xaxis = list(title = "Porcentagem"), yaxis = list(title = "Ganhador"),
legend = list(title = "Ganhador", font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = "line", x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = "gray", width = 2))))
View(predictVstest)
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
library(valorant)
library(lubridate)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando arquivos csv ---------------------------------------------------------------------------------
nome_arquivo_urls <- paste(Sys.Date() - 1, '_urls.csv', sep = '')
nome_arquivo_previsoes <- paste(Sys.Date() - 1, '_previsoes.csv', sep = '')
nome_arquivo_acuracia <- paste(Sys.Date() - 1, '_acuracia.csv', sep = '')
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-X) %>% unlist()
previsoes <- read.csv2(paste('csv/previsao_diaria/', nome_arquivo_previsoes, sep = '')) %>% select(-X)
df <- cbind(b, previsoes)
ganhador <- '' %>% .[0]
for (i in b){
ganhador[length(ganhador)+1] <- get_Ganhadores(i)
}
df$ganhador <- ganhador
df$prev <- ifelse(df$V1>df$V2, 1, 0)
View(df)
df$prev <- ifelse(as.numeric(df$V1)>as.numeric(df$V2), 1, 0)
df$V1_n <- gsub('[^0-9]', '', df$V1)
df$V2_n <- gsub('[^0-9]', '', df$V2)
View(df)
df$V1_n <- as.numeric(gsub('[^0-9.]+', '', df$V1))
df$V2_n <- as.numeric(gsub('[^0-9.]+', '', df$V2))
df$prev <- ifelse(as.numeric(df$V1)>as.numeric(df$V2), 1, 0)
df$prev <- ifelse(as.numeric(df$V1_n)>as.numeric(df$V2_n), 1, 0)
acertos <- sum(df$ganhador == df$prev)
erros <- sum(df$ganhador != df$prev)
acuracia <- acertos/nrow(df)
View(df)
acuracia_diaria <- as.data.frame(cbind(acertos, erros, acuracia))
View(acuracia_diaria)
write.csv2(df, paste('csv/previsao_diaria/', nome_arquivo_previsoes, sep = ''))
write.csv2(df, paste('csv/previsao_diaria/', nome_arquivo_previsoes, sep = ''))
write.csv2(acuracia_diaria, paste('csv/previsao_diaria/', nome_arquivo_acuracia, sep = ''))
taskscheduleR:::taskschedulerAddin()
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
library(valorant)
library(lubridate)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(pROC)
library(valorant)
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date("2023-02-19"), Sys.Date() - 1, by = "day")
nomes_arquivos <- paste0("csv/catalogacao_diaria/", format(datas, "%Y-%m-%d"), "_partidas.csv")
jogos_lista <- list()
for (arquivo in nomes_arquivos) {
jogos_lista[[arquivo]] <- possibly(read.csv2, otherwise = NULL)(arquivo)
}
jogos <- bind_rows(jogos_lista) %>% select(-X)
jogos$ganhador <- as.factor(jogos$ganhador)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
data_split <- initial_split(jogos, prop = 0.7, strata = "ganhador")
training_data <- training(data_split)
test_data <- testing(data_split)
hidden_n <- c(30)
t <- 1 #thresholder
formula <- 'ganhador == 1 ~ .'
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(formula,
data = training_data,
hidden = hidden_n,
err.fct = "sse",
linear.output = F,
threshold = t,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 1 # 10679 13/03 0.7959% acuracia 98 partidas
w <- 0.1
while ( i < 0.75) {
achar_Seed(s, hidden_n, t = 0.9)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
# Atualizando a seed para achar a melhor neuralnetwork ----------------------------------------------------
set.seed(s-1)
data_split <- initial_split(jogos, prop = 0.7, strata = "ganhador")
training_data <- training(data_split)
test_data <- testing(data_split)
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
Predict = compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
# Procurando uma rede neural com acuracia a cima de determinado percentual --------------------------------
z <- 0.1
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
# Procurando uma rede neural com acuracia a cima de determinado percentual --------------------------------
z <- 0.1
while (i < 0.79) {
achar_Nn(t = 0.9)
}
while (i < 0.79) {
achar_Nn(t = 0.9)
}
beep(8)
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
x <- as.data.frame(x$table)
predictVstest <- cbind(test_data, Predict$net.result)
names(predictVstest)[32] <- 'previsao'
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
#Plot distribuição
histogram(predictVstest$`Predict$net.result`, breaks = 98,
col = ifelse(as.factor(predictVstest$ganhador) == 1, "blue", "red"))
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, yaxt = 'n')
axis(side = 2, at = c(0, 1), labels = c("0", "1"))
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "green"), pch = 1)
abline(v = 0.5, lty = 2, col = "black")
plot_ly(data = predictVstest, x = ~previsao, y = ~ganhador,
color = ~factor(ganhador), colors = c("red", "green"), type = "scatter",
mode = "markers", marker = list(size = 10)) %>%
layout(xaxis = list(title = "Porcentagem"), yaxis = list(title = "Ganhador"),
legend = list(title = "Ganhador", font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = "line", x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = "gray", width = 2))))
while (i < 0.82) {
achar_Nn(t = 0.9)
}
