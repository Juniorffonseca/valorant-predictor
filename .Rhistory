placar
dff <- cbind(dff, placar)
View(dff)
# Carregando arquivos csv ---------------------------------------------------------------------------------
nome_arquivo_urls <- paste(Sys.Date(), '_urls.csv', sep = '')
nome_arquivo_partidas <- paste(Sys.Date(), '_partidas.csv', sep = '')
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-X) %>% unlist()
dff <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_partidas, sep = '')) %>% select(-X)
ganhador <- '' %>% .[0]
for (i in b){
ganhador[length(ganhador)+1] <- get_Ganhadores(i)
}
dff <- cbind(dff, ganhador)
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
View(dff)
write.csv2(dff, paste('csv/catalogacao_diaria/', nome_arquivo_partidas, sep = ''))
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
library(valorant)
library(lubridate)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
write.csv2(dff, paste('csv/catalogacao_diaria/', nome_arquivo_partidas, sep = ''))
write.csv2(dff, paste('csv/catalogacao_diaria/', nome_arquivo_partidas, sep = ''))
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
dff$ganhador <- ganhador
View(dff)
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
# Carregando arquivos csv ---------------------------------------------------------------------------------
nome_arquivo_urls <- paste(Sys.Date() - 1, '_urls.csv', sep = '')
nome_arquivo_partidas <- paste(Sys.Date() - 1, '_partidas.csv', sep = '')
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
library(valorant)
library(lubridate)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
library(valorant)
library(lubridate)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
funcaoPagina <- function(pagina){
matchs <- read_html(pagina) %>%
html_nodes('a') %>% html_attr('href')
matchs <- matchs[15:64]
n <- 1
for (i in matchs){
matchs[n] <- paste('https://www.vlr.gg', matchs[n], sep = '')
n = n + 1
}
return(matchs)
}
a <- funcaoPagina('https://www.vlr.gg/matches')
n <- 1
nome_arquivo_urls <- paste(Sys.Date(), '_urls.csv', sep = '')
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = ''))
for (i in b){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(b[m])
m = m + 1
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
m <- 1
dff <- list()
for (i in b){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(b[m])
m = m + 1
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-x)
unlist(b)
b <- unlist(b)
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-x)
View(b)
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = ''))
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-X)
b <- unlist(b)
m <- 1
dff <- list()
for (i in b){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(b[m])
m = m + 1
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
View(dff)
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-X)
b <- unlist(b)
m <- 1
dff <- list()
for (i in b){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(b[m])
m = m + 1
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
dff <- dff %>% map_df(as_tibble)
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-X)
b <- unlist(b)
for (i in b){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(b[m])
m = m + 1
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
for (i in b){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(b[m])
m = m + 1
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
m <- 1
dff <- list()
for (i in b){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(b[m])
m = m + 1
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
dff <- dff %>% map_df(as_tibble)
View(dff)
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
library(valorant)
library(lubridate)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(caret)
library(ggplot2)
load('rede_neural_teste.rda')
# Matriz de confusão ---------------------------------------------------------------------------------------
jogos <- read.csv2('csv/partidas.csv') %>% dplyr::select(-X)
set.seed(5)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
nn2 <- as.factor(nn2)
# Carregando modelo e obtendo os resultados
load('rede_neural.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
nn2 <- as.factor(nn2)
x <- confusionMatrix(nn2, test_data$ganhador)
x <- as.data.frame(x$table)
View(Predict)
Predict$net.result
test_data
Predict$net.result
View(test_data)
#Log Loss
LogLoss(y_pred =)
library(MASS)
library(caTools)
LogLoss()
library(Metrics)
library(ModelMetrics)
?LogLoss
??LogLoss
?logLoss
#Log Loss
LogLoss()
#Log Loss
logLoss()
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
Predict$net.result
summarise(Predict$net.result)
load('rede_neural_teste.rda')
# Matriz de confusão ---------------------------------------------------------------------------------------
jogos <- read.csv2('csv/partidas_teste.csv') %>% dplyr::select(-X)
set.seed(5)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
# Carregando modelo e obtendo os resultados
load('rede_neural.rda')
load('rede_neural_teste.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
nn2 <- as.factor(nn2)
x <- confusionMatrix(nn2, test_data$ganhador)
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
transforma_probabilidade <- function (y, x){
z = y / (y + x)
w = x / (x + y)
c = as.matrix(c(z,w))
return(c)
}
transforma_probabilidade(0.8, 0.2)
transforma_probabilidade(0.38, 0.42)
transforma_probabilidade(0.8, 0.25)
#' prever
#' Função que prevê o resultado de determinada partida.
#' Para utilizar: prever(url)
#' @export
prever <- function(link){
# Pegando os dados no link da partida ----------------------------------------------------------------------
partida <- medias_Times(link)
jogos_scale <- read.csv2('csv/partidas.csv') %>% select(-X, -ganhador)
jogos_scale <- rbind(jogos_scale, partida)
jogos_scale <- scale(jogos_scale)
partida <- jogos_scale[nrow(jogos_scale),]
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR')
previsao <- compute(n, partida)
previsao <- previsao$net.result[1]
partida_reversa <- partida
partida_reversa$time1R <- partida$time2R
partida_reversa$time2R <- partida$time1R
partida_reversa$time1ACS <- partida$time2ACS
partida_reversa$time2ACS <- partida$time1ACS
partida_reversa$time1KAST <- partida$time2KAST
partida_reversa$time2KAST <- partida$time1KAST
partida_reversa$time1KD <- partida$time2KD
partida_reversa$time2KD <- partida$time1KD
partida_reversa$time1ADR <- partida$time2ADR
partida_reversa$time2ADR <- partida$time1ADR
previsao2 <- compute(n, partida_reversa)
previsao2 <- previsao2$net.result[1]
a <- previsao
b <- previsao2
transforma_probabilidade <- function (y, x){
z = y / (y + x)
w = x / (x + y)
c = as.matrix(c(z,w))
return(c)
}
previsao <- transforma_probabilidade(a,b)
previsao <- previsao * 100
return(previsao)
}
prever('https://www.vlr.gg/167391/loud-vs-drx-champions-tour-2023-lock-in-s-o-paulo-sf')
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(reshape2)
library(valorant)
#Instalando pacotes (se necessário)
library(devtools)
detach("package:valorant", unload = TRUE)
#Instalando pacotes (se necessário)
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(valorant)
load(file = "rede_neural.rda")
prever(link)
return <- prever(
'https://www.vlr.gg/130685/loud-vs-optic-gaming-valorant-champions-2022-gf'
)
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(reshape2)
library(valorant)
return <- prever(
'https://www.vlr.gg/130685/loud-vs-optic-gaming-valorant-champions-2022-gf'
)
prever('https://www.vlr.gg/167391/loud-vs-drx-champions-tour-2023-lock-in-s-o-paulo-sf')
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(readr)
library(purrr)
library(valorant)
prever('https://www.vlr.gg/167391/loud-vs-drx-champions-tour-2023-lock-in-s-o-paulo-sf')
jogos_scale <- read.csv2('csv/partidas.csv') %>% select(-X, -ganhador)
library(stringr)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
jogos_scale <- read.csv2('csv/partidas.csv') %>% dplyr::select(-X, -ganhador)
rm(jogos_scale)
prever('https://www.vlr.gg/167391/loud-vs-drx-champions-tour-2023-lock-in-s-o-paulo-sf')
#' prever
#' Função que prevê o resultado de determinada partida.
#' Para utilizar: prever(url)
#' @export
prever <- function(link){
# Pegando os dados no link da partida ----------------------------------------------------------------------
partida <- medias_Times(link)
jogos_scale <- read.csv2('csv/partidas.csv') %>% dplyr::select(-X, -ganhador)
jogos_scale <- rbind(jogos_scale, partida)
jogos_scale <- scale(jogos_scale)
partida <- jogos_scale[nrow(jogos_scale),]
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR')
previsao <- compute(n, partida)
previsao <- previsao$net.result[1]
partida_reversa <- partida
partida_reversa$time1R <- partida$time2R
partida_reversa$time2R <- partida$time1R
partida_reversa$time1ACS <- partida$time2ACS
partida_reversa$time2ACS <- partida$time1ACS
partida_reversa$time1KAST <- partida$time2KAST
partida_reversa$time2KAST <- partida$time1KAST
partida_reversa$time1KD <- partida$time2KD
partida_reversa$time2KD <- partida$time1KD
partida_reversa$time1ADR <- partida$time2ADR
partida_reversa$time2ADR <- partida$time1ADR
previsao2 <- compute(n, partida_reversa)
previsao2 <- previsao2$net.result[1]
a <- previsao
b <- previsao2
previsao <- transforma_probabilidade(a,b)
previsao <- previsao * 100
return(previsao)
}
prever('https://www.vlr.gg/167391/loud-vs-drx-champions-tour-2023-lock-in-s-o-paulo-sf')
prever('https://www.vlr.gg/167391/loud-vs-drx-champions-tour-2023-lock-in-s-o-paulo-sf')
detach("package:valorant", unload = TRUE)
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
library(valorant)
detach("package:valorant", unload = TRUE)
install_github("Juniorffonseca/r-pacote-valorant")
library(valorant)
link <- 'https://www.vlr.gg/167046/liberty-vs-tbk-esports-challengers-league-brazil-split-1-w5'
# Pegando os dados no link da partida ----------------------------------------------------------------------
partida <- medias_Times(link)
jogos_scale <- read.csv2('csv/partidas_teste.csv') %>% dplyr::select(-X, -ganhador)
jogos_scale <- rbind(jogos_scale, partida)
jogos_scale <- scale(jogos_scale)
partida <- jogos_scale[nrow(jogos_scale),]
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR')
View(partida)
# Pegando os dados no link da partida ----------------------------------------------------------------------
partida <- medias_Times(link)
jogos_scale <- read.csv2('csv/partidas_teste.csv') %>% dplyr::select(-X, -ganhador)
jogos_scale <- rbind(jogos_scale, partida)
jogos_scale <- scale(jogos_scale)
partida <- jogos_scale[nrow(jogos_scale),]
partida <- t(partida)
partida <- as.data.frame(partida)
View(partida)
previsao <- compute(n, partida)
load(file = "rede_neural_teste.rda")
previsao <- compute(n, partida)
previsao <- previsao$net.result[1]
partida_reversa <- partida
partida_reversa$time1R <- partida$time2R
partida_reversa$time2R <- partida$time1R
partida_reversa$time1ACS <- partida$time2ACS
partida_reversa$time2ACS <- partida$time1ACS
partida_reversa$time1KAST <- partida$time2KAST
partida_reversa$time2KAST <- partida$time1KAST
partida_reversa$time1KD <- partida$time2KD
partida_reversa$time2KD <- partida$time1KD
partida_reversa$time1ADR <- partida$time2ADR
partida_reversa$time2ADR <- partida$time1ADR
previsao2 <- compute(n, partida_reversa)
previsao2 <- previsao2$net.result[1]
a <- previsao
b <- previsao2
transforma_probabilidade <- function (y, x){
z = y / (y + x)
w = x / (x + y)
c = as.matrix(c(z,w))
return(c)
}
previsao <- transforma_probabilidade(a,b)
previsao <- previsao * 100
link <- 'https://www.vlr.gg/167046/liberty-vs-tbk-esports-challengers-league-brazil-split-1-w5'
# Pegando os dados no link da partida ----------------------------------------------------------------------
partida <- medias_Times(link)
jogos_scale <- read.csv2('csv/partidas_teste.csv') %>% dplyr::select(-X, -ganhador)
jogos_scale <- rbind(jogos_scale, partida)
jogos_scale <- scale(jogos_scale)
partida <- jogos_scale[nrow(jogos_scale),]
partida <- t(partida)
partida <- as.data.frame(partida)
previsao <- compute(n, partida)
previsao <- previsao$net.result[1]
partida_reversa <- partida
# Carregando a rede neural e o dataframe Jogadores
load(file = "rede_neural_teste.rda")
previsao <- compute(n, partida)
previsao <- previsao$net.result[1]
partida_reversa <- partida
partida_reversa$time1R <- partida$time2R
partida_reversa$time2R <- partida$time1R
partida_reversa$time1ACS <- partida$time2ACS
partida_reversa$time2ACS <- partida$time1ACS
partida_reversa$time1KAST <- partida$time2KAST
partida_reversa$time2KAST <- partida$time1KAST
partida_reversa$time1KD <- partida$time2KD
partida_reversa$time2KD <- partida$time1KD
partida_reversa$time1ADR <- partida$time2ADR
partida_reversa$time2ADR <- partida$time1ADR
previsao2 <- compute(n, partida_reversa)
previsao2 <- previsao2$net.result[1]
a <- previsao
b <- previsao2
transforma_probabilidade <- function (y, x){
z = y / (y + x)
w = x / (x + y)
c = as.matrix(c(z,w))
return(c)
}
previsao <- transforma_probabilidade(a,b)
previsao <- previsao * 100
detach("package:valorant", unload = TRUE)
install_github("Juniorffonseca/r-pacote-valorant")
library(valorant)
