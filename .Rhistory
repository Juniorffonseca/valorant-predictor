last_page <- grep('[\\D]', links[68], value = T)
last_page <- grep('[\\D]+', links[68], value = T)
last_page <- grep('[\\d]+', links[68], value = T)
last_page <- grep('[^\\d]+', links[68], value = T)
last_page <- grep('[^\\d]', links[68], value = T)
last_page <- grep('[\\d]^', links[68], value = T)
last_page <- grep('[0-9]', links[68], value = T)
last_page <- grep('[0-9]+', links[68], value = T)
last_page <- grep('+[0-9]', links[68], value = T)
last_page <- grep('\\d+', links[68], value = T)
last_page <- grep("[0-9]+", links[68], value = T)
last_page <- grep('[:digit:]', links[68], value = T)
last_page <- grep('[:digit:]', links[68], value = T)
last_page <- str_extract('[:digit:]', links[68], value = T)
last_page <- str_extract('[:digit:]', links[68])
last_page <- str_extract_all('[:digit:]', links[68])
View(last_page)
last_page <- str_extract(links[68], '[:digit:]')
last_page <- str_extract_all(links[68], '[:digit:]')
View(last_page)
last_page <- str_extract_all(links[68], '[:xdigit:]')
last_page <- str_extract_all(links[68], '[:digit:*]')
last_page <- str_extract(links[68], '[:digit:*]')
last_page <- str_extract(links[68], '[:digit*:]')
last_page <- str_extract(links[68], '[\\d]')
last_page <- str_extract(links[68], '[\\d*]')
last_page <- str_extract(links[68], '[\\d+]')
last_page <- str_extract(links[68], '\\d+')
paginas <- ''
p <- 1
for (i in 1:last_page){
paginas[p] <- paste('https://www.vlr.gg/matches/results/?page=', p, sep = '')
p = p + 1
}
paginas
read_html('paginas[370') %>%
html_nodes('a') %>% html_attr('href')
read_html(paginas[370]) %>%
html_nodes('a') %>% html_attr('href')
c <- 1
matchs <- 'a'
funcaoPagina <- function(pagina){
matchs <- read_html(pagina) %>%
html_nodes('a') %>% html_attr('href')
matchs <- matchs[15:64]
n <- 1
for (i in matchs){
matchs[n] <- paste('https://www.vlr.gg', matchs[n], sep = '')
n = n + 1
}
return(matchs)
}
f <- 1
a <- list()
for (i in paginas){
a[[length(a)+1]] = funcaoPagina(paginas[f])
f = f + 1
}
View(a)
View(a)
a <- unlist(a)
catalogarporUrl <- function (string){
tryCatch(
{
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
info <- read_html(string) %>%
html_nodes("table") %>%
html_table()
placar <- read_html(string) %>%
html_nodes("div.js-spoiler") %>% html_text(trim=T)
placar <- str_replace_all(placar, '\t', '') %>% str_replace_all('\n', '')
placar <- as.data.frame(placar[1])
placar <- separate(placar, 'placar[1]', into = c('Time1', 'Time2'), sep = ':', extra = 'merge')
ifelse(placar$Time1 > placar$Time2, ganhador <- 1, ganhador <- 0)
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
timeA <- paste0('\\b', timeA, '\\b')
dados_gerais$timeA <- ifelse(grepl(paste(timeA, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeB <- paste0('\\b', timeB, '\\b')
dados_gerais$timeB <- ifelse(grepl(paste(timeB, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeA_df <- filter(dados_gerais, dados_gerais$timeA == 1)
timeA_df <- dplyr::select(timeA_df, R, ACS, K.D, KAST, ADR)
timeB_df <- filter(dados_gerais, dados_gerais$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, K.D, KAST, ADR)
if(nrow(timeA_df) == 5 && nrow(timeB_df) == 5){
# MÃ©dias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$K.D)
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$K.D)
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
partida <- t(partida)
partida <- as.data.frame(partida) %>% cbind(ganhador)
colnames(partida) <- c('time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR', 'ganhador')
return(partida)
}
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
rm (c, f, i, p, matchs, paginas)
m <- 1
dff <- list()
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl(a[m])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
dados_gerais <- read.csv2("csv/jogadores.csv")
dff <- list()
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl(a[m])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
m <- 1
dff <- list()
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl(a[m])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
View(dff)
rm(dff)
dff <- list()
m <- 1
rm (c, f, i, p, matchs, paginas)
a[1]
read_html(a[1]) %>%
html_nodes('a') %>% html_attr('href')
last_page - 9
as.numeric(last_page) - 9
info <- read_html(a[1]) %>%
html_nodes("table") %>%
html_table()
View(info)
View(info)
infoo <- unlist(info)
rm(infoo)
info[[1]]
info[1
]
View(info)
info[[2]]
info[[3]]
info <- rbind(info[[1]], info[[2]])
info <- lapply(info, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
View(info)
as.data.frame(info)
info <- read_html(a[1]) %>%
html_nodes("table") %>%
html_table()
timeA <- info[[1]]
View(timeA)
View(timeA)
info <- read_html(a[50]) %>%
html_nodes("table") %>%
html_table()
timeA <- info[[1]]
View(info)
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
info <- read_html(a[50]) %>%
html_nodes("table") %>%
html_table()
View(info)
timeA <- info[[1]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
colnames(timeA) <- '1'
info <- read_html(a[1]) %>%
html_nodes("table") %>%
html_table()
View(info)
info <- read_html(a[6]) %>%
html_nodes("table") %>%
html_table()
a[6]
a[1]
timea <- info[[3]]
View(timea)
info <- read_html(a[5]) %>%
+     html_nodes("table") %>%
+     html_table()
info <- read_html(a[4]) %>%
+     html_nodes("table") %>%
+     html_table()
info <- read_html(a[5]) %>%
html_nodes("table") %>%
html_table()
View(info)
info <- read_html(a[1]) %>%
html_nodes("table") %>%
html_table()
info <- rbind(info[[3]], info[[4]])
colnames(info[1]) <- 'jogador'
colnames(info[1,]) <- 'jogador'
colnames(info) <- c('jogador', 'time', 'R', 'ACS', 'K', 'K', 'A', '+/-', 'KAST', 'ADR', 'HS%', 'FK', 'FD', '')
colnames(info) <- c('jogador', 'time', 'R', 'ACS', 'K', 'K', 'A', '+/-', 'KAST', 'ADR', 'HS%', 'FK', 'FD', 'z')
colnames(info) <- c('jogador', 'time', 'R', 'ACS', 'K', 'D', 'A', '+/-', 'KAST', 'ADR', 'HS%', 'FK', 'FD', 'z')
info %>% select('jogador', 'R', 'ACS', 'K', 'D', 'A', 'KAST', 'ADR')
View(info)
info <- select(info, 'jogador', 'R', 'ACS', 'K', 'D', 'A', 'KAST', 'ADR')
info <- separate(info, 'jogador', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
?grep
info$R <- grep('\\d+{3}', info$R)
info$R <- grep('\\d{3}', info$R)
info$R <- grep('^\D*(\d(?:\D*\d){2})', info$R)
info$R <- grep('^\\D*(\d(?:\D*\d){2})', info$R)
info$R <- grep('\^\D*(\d(?:\D*\d){2})', info$R)
info$R <- grep('^\\D*(\\d(?:\\D*\\d){2})', info$R)
info <- read_html(a[1]) %>%
html_nodes("table") %>%
html_table()
info <- rbind(info[[3]], info[[4]])
## APENAS PARA TESTES:: ##
info <- read_html(a[1]) %>%
html_nodes("table") %>%
html_table()
info <- rbind(info[[3]], info[[4]])
colnames(info) <- c('jogador', 'time', 'R', 'ACS', 'K', 'D', 'A', '+/-', 'KAST', 'ADR', 'HS%', 'FK', 'FD', 'z')
info <- select(info, 'jogador', 'R', 'ACS', 'K', 'D', 'A', 'KAST', 'ADR')
View(info)
info$R <- grep('[^.{0,4}]', info$R)
info <- read_html(a[1]) %>%
html_nodes("table") %>%
html_table()
## APENAS PARA TESTES:: ##
info <- rbind(info[[3]], info[[4]])
colnames(info) <- c('jogador', 'time', 'R', 'ACS', 'K', 'D', 'A', '+/-', 'KAST', 'ADR', 'HS%', 'FK', 'FD', 'z')
info <- select(info, 'jogador', 'R', 'ACS', 'K', 'D', 'A', 'KAST', 'ADR')
info$R <- grep(' .*', info$R)
info$R <- gsub(' .*', info$R)
info$R <- gsub(' .*', '', info$R)
info$R <- sub(' .*', '', info$R)
info$R <- sub('*. ', '', info$R)
info$R <- substr(info$R, 1, 4)
info$ACS <- substr(info$ACS, 1, 3)
info$K <- substr(info$K, 1, 2)
substr(info$D, 3, 4)
substr(info$D, 3, 5)
?substr
substr(info$D, 1, 5)
substr(info$D, 5, 7)
substr(info$D, 9, 11)
info$D <- str_replace_all(info$D, '\t', ) %>%
str_replace_all(info$D, '\n', '')
info$D <- str_replace_all(info$D, '\t', '') %>%
str_replace_all(info$D, '\n', '')
info$D <- str_replace_all(info$D, '\t', '') %>%
str_replace_all('\n', '')
info <- read_html(a[1]) %>%
html_nodes("table") %>%
html_table()
## APENAS PARA TESTES:: ##
info <- rbind(info[[3]], info[[4]])
colnames(info) <- c('jogador', 'time', 'R', 'ACS', 'K', 'D', 'A', '+/-', 'KAST', 'ADR', 'HS%', 'FK', 'FD', 'z')
info <- select(info, 'jogador', 'R', 'ACS', 'K', 'D', 'A', 'KAST', 'ADR')
info$R <- substr(info$R, 1, 4)
info$ACS <- substr(info$ACS, 1, 3)
info$K <- substr(info$K, 1, 2)
info$D <- str_replace_all(info$D, '\t', '') %>%
str_replace_all('\n', ' ')
info$D
info$D <- str_replace_all(info$D, '\t', '') %>%
str_replace_all('\n', ' ') %>%
str_replace_all('/  ', '')
## APENAS PARA TESTES:: ##
info <- read_html(a[1]) %>%
html_nodes("table") %>%
html_table()
## APENAS PARA TESTES:: ##
info <- rbind(info[[3]], info[[4]])
colnames(info) <- c('jogador', 'time', 'R', 'ACS', 'K', 'D', 'A', '+/-', 'KAST', 'ADR', 'HS%', 'FK', 'FD', 'z')
info <- select(info, 'jogador', 'R', 'ACS', 'K', 'D', 'A', 'KAST', 'ADR')
info$R <- substr(info$R, 1, 4)
info$ACS <- substr(info$ACS, 1, 3)
info$K <- substr(info$K, 1, 2)
info$D <- str_replace_all(info$D, '\t', '') %>%
str_replace_all('\n', ' ') %>%
str_replace_all('/  ', '')
substr(info$D, 1, 2)
info$D <- substr(info$D, 1, 2)
info$A <- substr(info$A, 1, 2)
info$KAST <- substr(info$KAST, 1, 3)
info$ADR <- substr(info$ADR, 1, 3)
info <- separate(info, 'jogador', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
info <- cbind(info, ganhador)
ganhador <- 1
info <- cbind(info, ganhador)
View(info)
ganhador <- c(1,1,1,1,1,0,0,0,0,0)
info <- cbind(info, ganhador)
catalogarporUrl <- function (string){
tryCatch(
{
info <- read_html(string) %>%
html_nodes("table") %>%
html_table()
placar <- read_html(string) %>%
html_nodes("div.js-spoiler") %>% html_text(trim=T)
placar <- str_replace_all(placar, '\t', '') %>% str_replace_all('\n', '')
placar <- as.data.frame(placar[1])
placar <- separate(placar, 'placar[1]', into = c('Time1', 'Time2'), sep = ':', extra = 'merge')
ifelse(placar$Time1 > placar$Time2, ganhador <- c(1,1,1,1,1,0,0,0,0,0), ganhador <- c(0,0,0,0,0,1,1,1,1,1))
info <- rbind(info[[3]], info[[4]])
colnames(info) <- c('jogador', 'time', 'R', 'ACS', 'K', 'D', 'A', '+/-', 'KAST', 'ADR', 'HS%', 'FK', 'FD', 'z')
info <- select(info, 'jogador', 'R', 'ACS', 'K', 'D', 'A', 'KAST', 'ADR')
info$R <- substr(info$R, 1, 4)
info$ACS <- substr(info$ACS, 1, 3)
info$K <- substr(info$K, 1, 2)
info$D <- str_replace_all(info$D, '\t', '') %>%
str_replace_all('\n', ' ') %>%
str_replace_all('/  ', '')
info$D <- substr(info$D, 1, 2)
info$A <- substr(info$A, 1, 2)
info$KAST <- substr(info$KAST, 1, 3)
info$ADR <- substr(info$ADR, 1, 3)
info <- separate(info, 'jogador', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
info <- cbind(info, ganhador)
return(info)
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
rm (c, f, i, p, matchs, paginas)
m <- 1
dff <- list()
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl(a[m])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
View(dff)
dff <- dff %>% map_df(as_tibble)
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
# Criando variÃ¡vel pÃ¡ginas e criando variÃ¡vel 'p' que serÃ¡ a parte final do url (o nÃºmero da pÃ¡gina) -------
paginas <- 'https://www.vlr.gg/matches/results'
p <- 1
links <- read_html(paginas) %>%
html_nodes('a') %>% html_attr('href')
last_page <- str_extract(links[68], '\\d+')
paginas <- ''
p <- 1
write.csv2(a, 'csv/a.csv')
catalogarporUrl <- function (string){
tryCatch(
{
info <- read_html(string) %>%
html_nodes("table") %>%
html_table()
placar <- read_html(string) %>%
html_nodes("div.js-spoiler") %>% html_text(trim=T)
placar <- str_replace_all(placar, '\t', '') %>% str_replace_all('\n', '')
placar <- as.data.frame(placar[1])
placar <- separate(placar, 'placar[1]', into = c('Time1', 'Time2'), sep = ':', extra = 'merge')
ifelse(placar$Time1 > placar$Time2, ganhador <- c(1,1,1,1,1,0,0,0,0,0), ganhador <- c(0,0,0,0,0,1,1,1,1,1))
info <- rbind(info[[3]], info[[4]])
colnames(info) <- c('jogador', 'time', 'R', 'ACS', 'K', 'D', 'A', '+/-', 'KAST', 'ADR', 'HS%', 'FK', 'FD', 'z')
info <- select(info, 'jogador', 'R', 'ACS', 'K', 'D', 'A', 'KAST', 'ADR')
info$R <- substr(info$R, 1, 4)
info$ACS <- substr(info$ACS, 1, 3)
info$K <- substr(info$K, 1, 2)
info$D <- str_replace_all(info$D, '\t', '') %>%
str_replace_all('\n', ' ') %>%
str_replace_all('/  ', '')
info$D <- substr(info$D, 1, 2)
info$A <- substr(info$A, 1, 2)
info$KAST <- substr(info$KAST, 1, 3)
info$ADR <- substr(info$ADR, 1, 3)
info <- separate(info, 'jogador', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
info <- cbind(info, ganhador)
return(info)
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
rm (c, f, i, p, matchs, paginas)
m <- 1
dff <- list()
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl(a[m])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
a[1547]
View(dff)
dff[1547]
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl(a[m])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl(a[m])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl(a[m])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
write.csv2('csv/historico.csv')
write.csv2(dff, 'csv/historico.csv')
View(dff)
dff <- dff %>% map_df(as_tibble)
dff <- na.omit(dff)
write.csv2(dff, 'csv/historico_formatado.csv')
write.csv(dff, 'csv/historico_formatado.csv')
write.csv(dff, 'csv/historico_formatado.csv')
write.csv2(dff, 'csv/historico_formatado.csv')
write.csv2(dff, 'csv/historico_formatado.csv')
keenc <- dff$Player=='keenc'
rm(keenc)
keenc <- select(dff$Player=='keenc')
keenc <- dff[dff$Player == 'keenc',]
View(keenc)
mean(keenc$R)
mean(as.numeric(keenc$R))
mean(as.numeric(keenc$ACS))
mean(as.numeric(keenc$K:d))
mean(as.numeric(keenc$K:D))
mean(as.numeric(keenc$kast))
mean(as.numeric(keenc$KAST))
mean(as.numeric(keenc$ADR))
rm(keenc)
player_name <- 'aspas'
player_name <- select(dff[dff$Player == player_name,])
View(player_name)
player_name <- 'aspas'
player_name <- dff[dff$Player == player_name,]
View(player_name)
player <- 'aspas'
player <- dff[dff$Player == player,]
rm(player_name)
View(player)
mean(as.numeric(player$R))
