library(readr)
library(purrr)
library(valorant)
library(lubridate)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando arquivos csv ---------------------------------------------------------------------------------
nome_arquivo_urls <- paste(Sys.Date() - 1, '_urls.csv', sep = '')
nome_arquivo_previsoes <- paste(Sys.Date() - 1, '_previsoes.csv', sep = '')
nome_arquivo_acuracia <- paste(Sys.Date() - 1, '_acuracia.csv', sep = '')
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-X) %>% unlist()
previsoes <- read.csv2(paste('csv/previsao_diaria/', nome_arquivo_previsoes, sep = '')) %>% select(-X)
ganhador <- '' %>% .[0]
for (i in b){
tryCatch({
ganhador[length(ganhador)+1] <- get_Ganhadores(i)
}, error = function(e) {
# caso ocorra um erro, imprimir mensagem de erro e continuar o loop
cat("Erro ao checar a URL", url, ":", conditionMessage(e), "\n")
return(NULL)
})
}
df <- cbind(b, previsoes)
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
library(valorant)
library(lubridate)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando arquivos csv ---------------------------------------------------------------------------------
nome_arquivo_urls <- paste(Sys.Date() - 1, '_urls.csv', sep = '')
nome_arquivo_previsoes <- paste(Sys.Date() - 1, '_previsoes.csv', sep = '')
nome_arquivo_acuracia <- paste(Sys.Date() - 1, '_acuracia.csv', sep = '')
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-X) %>% unlist()
previsoes <- read.csv2(paste('csv/previsao_diaria/', nome_arquivo_previsoes, sep = '')) %>% select(-X)
ganhador <- '' %>% .[0]
for (i in b){
tryCatch({
ganhador[length(ganhador)+1] <- get_Ganhadores(i)
}, error = function(e) {
# caso ocorra um erro, imprimir mensagem de erro e continuar o loop
cat("Erro ao checar a URL", url, ":", conditionMessage(e), "\n")
return(NULL)
})
}
df <- cbind(b, previsoes)
View(previsoes)
# Instalando (se necessário) e carregando pacotes ----------------------------------------------------------
remotes::install_github('Juniorffonseca/r-pacote-valorant')
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(pROC)
library(ROCR)
library(kableExtra)
library(glmnet)
library(valorant)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
library(valorant)
library(lubridate)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando arquivos csv ---------------------------------------------------------------------------------
nome_arquivo_urls <- paste(Sys.Date() - 1, '_urls.csv', sep = '')
nome_arquivo_previsoes <- paste(Sys.Date() - 1, '_previsoes.csv', sep = '')
nome_arquivo_acuracia <- paste(Sys.Date() - 1, '_acuracia.csv', sep = '')
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-X) %>% unlist()
previsoes <- read.csv2(paste('csv/previsao_diaria/', nome_arquivo_previsoes, sep = '')) %>% select(-X)
ganhador <- '' %>% .[0]
for (i in b){
tryCatch({
ganhador[length(ganhador)+1] <- get_Ganhadores(i)
}, error = function(e) {
# caso ocorra um erro, imprimir mensagem de erro e continuar o loop
cat("Erro ao checar a URL", url, ":", conditionMessage(e), "\n")
return(NULL)
})
}
b
ganhador
previsoe
previsoes
b
# Carregando arquivos csv ---------------------------------------------------------------------------------
nome_arquivo_urls <- paste(Sys.Date() - 1, '_urls2.csv', sep = '')
nome_arquivo_previsoes <- paste(Sys.Date() - 1, '_previsoes.csv', sep = '')
nome_arquivo_acuracia <- paste(Sys.Date() - 1, '_acuracia.csv', sep = '')
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-X) %>% unlist()
previsoes <- read.csv2(paste('csv/previsao_diaria/', nome_arquivo_previsoes, sep = '')) %>% select(-X)
ganhador <- '' %>% .[0]
for (i in b){
tryCatch({
ganhador[length(ganhador)+1] <- get_Ganhadores(i)
}, error = function(e) {
# caso ocorra um erro, imprimir mensagem de erro e continuar o loop
cat("Erro ao checar a URL", url, ":", conditionMessage(e), "\n")
return(NULL)
})
}
df <- cbind(b, previsoes)
df$ganhador <- ganhador
df <- df[!df$ganhador %in% "empate", ]
df$V1_n <- as.numeric(ifelse(is.na(str_extract(df$V1, "\\d{1,2}[.,]\\d{1,2}")),
str_extract(df$V1, "\\d{1,2}"),
str_extract(df$V1, "\\d{1,2}[.,]\\d{1,2}")))
df$V2_n <- as.numeric(ifelse(is.na(str_extract(df$V2, "\\d{1,2}[.,]\\d{1,2}")),
str_extract(df$V2, "\\d{1,2}"),
str_extract(df$V2, "\\d{1,2}[.,]\\d{1,2}")))
df$prev <- ifelse(as.numeric(df$V1_n)>as.numeric(df$V2_n), 1, 0)
row.names(df) <- NULL
acertos <- sum(df$ganhador == df$prev)
erros <- sum(df$ganhador != df$prev)
acuracia <- acertos/nrow(df)
acuracia_diaria <- as.data.frame(cbind(acertos, erros, acuracia))
# Carregando arquivos csv ---------------------------------------------------------------------------------
nome_arquivo_urls <- paste(Sys.Date() - 1, '_urls.csv', sep = '')
nome_arquivo_previsoes <- paste(Sys.Date() - 1, '_previsoes.csv', sep = '')
nome_arquivo_acuracia <- paste(Sys.Date() - 1, '_acuracia.csv', sep = '')
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-X) %>% unlist()
previsoes <- read.csv2(paste('csv/previsao_diaria/', nome_arquivo_previsoes, sep = '')) %>% select(-X)
# Carregando arquivos csv ---------------------------------------------------------------------------------
nome_arquivo_urls <- paste(Sys.Date() - 1, '_urls.csv', sep = '')
nome_arquivo_previsoes <- paste(Sys.Date() - 1, '_previsoes.csv', sep = '')
nome_arquivo_acuracia <- paste(Sys.Date() - 1, '_acuracia.csv', sep = '')
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-X) %>% unlist()
previsoes <- read.csv2(paste('csv/previsao_diaria/', nome_arquivo_previsoes, sep = '')) %>% select(-X)
ganhador <- '' %>% .[0]
for (i in b){
tryCatch({
ganhador[length(ganhador)+1] <- get_Ganhadores(i)
}, error = function(e) {
# caso ocorra um erro, imprimir mensagem de erro e continuar o loop
cat("Erro ao checar a URL", url, ":", conditionMessage(e), "\n")
return(NULL)
})
}
df <- cbind(b, previsoes)
df$ganhador <- ganhador
df <- df[!df$ganhador %in% "empate", ]
df$V1_n <- as.numeric(ifelse(is.na(str_extract(df$V1, "\\d{1,2}[.,]\\d{1,2}")),
str_extract(df$V1, "\\d{1,2}"),
str_extract(df$V1, "\\d{1,2}[.,]\\d{1,2}")))
df$V2_n <- as.numeric(ifelse(is.na(str_extract(df$V2, "\\d{1,2}[.,]\\d{1,2}")),
str_extract(df$V2, "\\d{1,2}"),
str_extract(df$V2, "\\d{1,2}[.,]\\d{1,2}")))
df$prev <- ifelse(as.numeric(df$V1_n)>as.numeric(df$V2_n), 1, 0)
row.names(df) <- NULL
acertos <- sum(df$ganhador == df$prev)
erros <- sum(df$ganhador != df$prev)
acuracia <- acertos/nrow(df)
acuracia_diaria <- as.data.frame(cbind(acertos, erros, acuracia))
write.csv2(df, paste('csv/previsao_diaria/', nome_arquivo_previsoes, sep = ''))
write.csv2(acuracia_diaria, paste('csv/previsao_diaria/', nome_arquivo_acuracia, sep = ''))
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
#install_github('Juniorffonseca/r-pacote-valorant')
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(pROC)
library(ROCR)
library(kableExtra)
library(valorant)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date('2023-04-13'), Sys.Date() - 1, by = 'day')
nomes_arquivos <- paste0('csv/previsao_diaria/', format(datas, '%Y-%m-%d'), '_acuracia.csv')
acuracia <- list()
for (arquivo in nomes_arquivos) {
acuracia[[arquivo]] <- possibly(read.csv2, otherwise = NULL)(arquivo)
}
acuracia <- bind_rows(acuracia) %>% select(-X)
acertos <- sum(acuracia$acertos)
erros <- sum(acuracia$erros)
print(acuracia_total <- acertos/(acertos+erros))
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
library(valorant)
library(lubridate)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando arquivos csv ---------------------------------------------------------------------------------
nome_arquivo_urls <- paste(Sys.Date() - 1, '_urls.csv', sep = '')
nome_arquivo_previsoes <- paste(Sys.Date() - 1, '_previsoes.csv', sep = '')
nome_arquivo_acuracia <- paste(Sys.Date() - 1, '_acuracia.csv', sep = '')
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-X) %>% unlist()
previsoes <- read.csv2(paste('csv/previsao_diaria/', nome_arquivo_previsoes, sep = '')) %>% select(-X)
ganhador <- '' %>% .[0]
for (i in b){
tryCatch({
ganhador[length(ganhador)+1] <- get_Ganhadores(i)
}, error = function(e) {
# caso ocorra um erro, imprimir mensagem de erro e continuar o loop
cat("Erro ao checar a URL", url, ":", conditionMessage(e), "\n")
return(NULL)
})
}
df <- cbind(b, previsoes)
df$ganhador <- ganhador
df <- df[!df$ganhador %in% "empate", ]
df$V1_n <- as.numeric(ifelse(is.na(str_extract(df$V1, "\\d{1,2}[.,]\\d{1,2}")),
str_extract(df$V1, "\\d{1,2}"),
str_extract(df$V1, "\\d{1,2}[.,]\\d{1,2}")))
df$V2_n <- as.numeric(ifelse(is.na(str_extract(df$V2, "\\d{1,2}[.,]\\d{1,2}")),
str_extract(df$V2, "\\d{1,2}"),
str_extract(df$V2, "\\d{1,2}[.,]\\d{1,2}")))
df$prev <- ifelse(as.numeric(df$V1_n)>as.numeric(df$V2_n), 1, 0)
row.names(df) <- NULL
acertos <- sum(df$ganhador == df$prev)
erros <- sum(df$ganhador != df$prev)
acuracia <- acertos/nrow(df)
acuracia_diaria <- as.data.frame(cbind(acertos, erros, acuracia))
write.csv2(df, paste('csv/previsao_diaria/', nome_arquivo_previsoes, sep = ''))
write.csv2(acuracia_diaria, paste('csv/previsao_diaria/', nome_arquivo_acuracia, sep = ''))
taskscheduleR:::taskschedulerAddin()
# Instalando (se necessário) e carregando pacotes ----------------------------------------------------------
remotes::install_github('Juniorffonseca/r-pacote-valorant')
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(pROC)
library(ROCR)
library(kableExtra)
library(glmnet)
library(valorant)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date('2023-02-19'), Sys.Date() - 1, by = 'day')
nomes_arquivos <- paste0('csv/catalogacao_diaria/', format(datas, '%Y-%m-%d'), '_partidas.csv')
jogos_lista <- list()
for (arquivo in nomes_arquivos) {
jogos_lista[[arquivo]] <- possibly(read.csv2, otherwise = NULL)(arquivo)
}
jogos <- bind_rows(jogos_lista) %>% select(-X)
vars <- c('RND', 'R', 'ACS', 'KAST', 'KD', 'ADR', 'KPR', 'APR', 'FKPR', 'FDPR', 'K', 'D', 'A', 'FK', 'FD')
for (i in vars) {
new_var <- paste0(i, "_diff")
jogos[[new_var]] <- jogos[[paste0("time1", i)]] - jogos[[paste0("time2", i)]]
}
jogos <- select(jogos, ends_with("_diff"), ganhador)
jogos$ganhador <- as.factor(jogos$ganhador)
#write.csv2(jogos, 'csv/partidas_teste_10_04_2023.csv')
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
data_split <- initial_split(jogos, prop = 0.7, strata = 'ganhador')
training_data <- training(data_split)
test_data <- testing(data_split)
hidden_n <- c(15)
formula <- 'ganhador == 1 ~ .'
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(formula,
data = training_data,
hidden = hidden_n,
err.fct = 'sse',
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
#plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 281768
w <- 0.1
while ( i < 0.78) {
achar_Seed(s, hidden_n, t = 0.5, mostrar_i = F)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(round(w, 2))
}
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
#install_github('Juniorffonseca/r-pacote-valorant')
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(pROC)
library(ROCR)
library(kableExtra)
library(valorant)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date('2023-04-13'), Sys.Date() - 1, by = 'day')
nomes_arquivos <- paste0('csv/previsao_diaria/', format(datas, '%Y-%m-%d'), '_acuracia.csv')
acuracia <- list()
for (arquivo in nomes_arquivos) {
acuracia[[arquivo]] <- possibly(read.csv2, otherwise = NULL)(arquivo)
}
acuracia <- bind_rows(acuracia) %>% select(-X)
acertos <- sum(acuracia$acertos)
erros <- sum(acuracia$erros)
print(acuracia_total <- acertos/(acertos+erros))
# Instalando (se necessário) e carregando pacotes ----------------------------------------------------------
remotes::install_github('Juniorffonseca/r-pacote-valorant')
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(pROC)
library(ROCR)
library(kableExtra)
library(glmnet)
library(valorant)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
previsoes_lista <- list()
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date('2023-04-11'), Sys.Date() - 1, by = 'day')
nomes_arquivos <- paste0('csv/previsao_diaria/', format(datas, '%Y-%m-%d'), '_previsoes.csv')
previsoes_lista <- list()
for (arquivo in nomes_arquivos) {
previsoes_lista[[arquivo]] <- possibly(read.csv2, otherwise = NULL)(arquivo)
}
previsoes <- bind_rows(previsoes_lista) %>% select(-X)
View(previsoes_lista)
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date('2023-04-11'), Sys.Date() - 1, by = 'day')
nomes_arquivos <- paste0('csv/previsao_diaria/', format(datas, '%Y-%m-%d'), '_previsoes.csv')
previsoes_lista <- list()
for (arquivo in nomes_arquivos) {
previsoes_lista[[arquivo]] <- possibly(read.csv2, otherwise = NULL)(arquivo)
}
View(previsoes_lista)
View(previsoes_lista)
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date('2023-04-11'), Sys.Date() - 1, by = 'day')
nomes_arquivos <- paste0('csv/previsao_diaria/', format(datas, '%Y-%m-%d'), '_previsoes.csv')
previsoes_lista <- list()
for (arquivo in nomes_arquivos) {
previsoes_lista[[arquivo]] <- possibly(read.csv2, otherwise = NULL)(arquivo)
}
View(previsoes_lista)
previsoes <- bind_rows(previsoes_lista) %>% select(-X)
View(previsoes_lista)
previsoes <- map_df(previsoes_lista, as_tibble, .name_repair = 'minimal')
?map_df
previsoes <- bind_rows(previsoes_lista) %>%
mutate(X = as.character(X)) %>%
select(-X)
lapply(previsoes_lista, str)
View(previsoes_lista)
previsoes_lista[[1]] <- previsoes_lista[[1]] %>%
rename(X = X1)
View(previsoes_lista)
previsoes_lista <- lapply(previsoes_lista, function(df) {
df %>% rename(partida = X)
})
previsoes <- bind_rows(previsoes_lista)
previsoes_lista <- lapply(previsoes_lista, function(df) {
df %>% mutate(partida = as.character(partida))
})
previsoes <- bind_rows(previsoes_lista)
View(previsoes)
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date('2023-04-11'), Sys.Date() - 1, by = 'day')
nomes_arquivos <- paste0('csv/previsao_diaria/', format(datas, '%Y-%m-%d'), '_previsoes.csv')
previsoes_lista <- list()
for (arquivo in nomes_arquivos) {
previsoes_lista[[arquivo]] <- possibly(read.csv2, otherwise = NULL)(arquivo)
}
previsoes_lista <- lapply(previsoes_lista, function(df) {
df %>% mutate(partida = as.character(partida))
})
previsoes_lista <- lapply(previsoes_lista, function(df) {
df %>% mutate(X = as.character(partida))
})
previsoes_lista <- lapply(previsoes_lista, function(df) {
df %>% mutate(X = as.character(X))
})
previsoes <- bind_rows(previsoes_lista)
View(previsoes)
#Plot distribuição
plot_ly(data = previsoes, x = ~prev, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 4)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
#Plot distribuição
plot_ly(data = previsoes, x = ~V1_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 4)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
#Plot distribuição
plot_ly(data = previsoes, x = ~V1_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 4)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 50, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
