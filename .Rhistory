paises_times_2 <- rbind(paises_times_2, pais)
}
paises_times_2 <- matrix(nrow = 0, ncol = 2)
for(url in paises_times){
pais <- read_html(url) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
paises_times_2 <- rbind(paises_times_2, pais)
}
for(url in paises_times){
pais <- read_html(url[,]) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
paises_times_2 <- rbind(paises_times_2, pais)
}
links <- as.character(paises_times)
paises_times
links
links <- as.character(paises_times[,])
links <- paises_times
links <- as.array(paises_times)
links <- as.array(paises_times[,])
links <- as.list(paises_jogadores)
View(links)
links <- as.list(paises_times)
View(links)
links <- as.list(paises_times[,])
View(paises_times)
all_urls <- unlist(paises_times)
all_urls[1:2]
all_urls[1:3]
view(all_urls)
View(paises_times)
paises_times_2 <- matrix(nrow = 0, ncol = 2)
for(url in 1:nrow(paises_times)){
url1 <- paises_times[i, 'V1']
url2 <- paises_times[i, 'V2']
pais1 <- read_html(url1) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
pais2 <- read_html(url2) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
paises_times_2 <- rbind(paises_times_2, pais1, pais2)
}
View(paises_times_2)
View(paises_times)
for(url in 1:nrow(paises_times)){
url1 <- paises_times[i, 'V1']
url2 <- paises_times[i, 'V2']
pais1 <- read_html(url1) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
pais2 <- read_html(url2) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
paises_times_2 <- rbind(paises_times_2, pais1, pais2)
}
paises_times_2 <- matrix(nrow = 0, ncol = 2)
for(url in 1:nrow(paises_times)){
url1 <- paises_times[url, 'V1']
url2 <- paises_times[url, 'V2']
pais1 <- read_html(url1) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
pais2 <- read_html(url2) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
paises_times_2 <- rbind(paises_times_2, pais1, pais2)
}
View(paises_times_2)
for(url in 1:nrow(paises_times)){
url1 <- paises_times[url, 'V1']
url2 <- paises_times[url, 'V2']
pais1 <- read_html(url1) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
pais2 <- read_html(url2) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
paises_times_2 <- rbind(paises_times_2, pais1, pais2)
}
paises_times_2 <- matrix(nrow = 0, ncol = 2)
for(url in 1:nrow(paises_times)){
url1 <- paises_times[url, 'V1']
url2 <- paises_times[url, 'V2']
pais1 <- read_html(url1) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
pais2 <- read_html(url2) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
paises_times_2 <- cbind(paises_times_2, pais1, pais2)
}
paises_times_2 <- matrix(nrow = 0, ncol = 2)
for(url in 1:nrow(paises_times)){
url1 <- paises_times[url, 'V1']
url2 <- paises_times[url, 'V2']
pais1 <- read_html(url1) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
pais2 <- read_html(url2) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
paises_times_2 <- c(pais1, pais2)
}
paises_times_2 <- list()
for(url in 1:nrow(paises_times)){
url1 <- paises_times[url, 'V1']
url2 <- paises_times[url, 'V2']
pais1 <- read_html(url1) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
pais2 <- read_html(url2) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
paises_times_2[[url]] <- c(pais1, pais2)
}
View(paises_times_2)
paises_times_2 <- matrix(nrow = 0, ncol = 2)
for(url in 1:nrow(paises_times)){
url1 <- paises_times[url, 'V1']
url2 <- paises_times[url, 'V2']
pais1 <- read_html(url1) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
pais2 <- read_html(url2) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
paises_times_2 <- rbind(paises_times_2, pais1, pais2)
}
resultados_matriz <- t(matrix(unlist(paises_times_2), ncol = 2))
resultados_df <- data.frame(paises_times, resultados_matriz)
View(resultados_df)
View(paises_times_2)
# Instalando (se necessário) e carregando pacotes ----------------------------------------------------------
remotes::install_github('Juniorffonseca/r-pacote-valorant')
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(pROC)
library(ROCR)
library(kableExtra)
library(glmnet)
library(valorant)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
View(paises_times_2)
paises_times_2 <- matrix(nrow = 0, ncol = 2)
for(url in 1:nrow(paises_times)){
url1 <- paises_times[url, 'V1']
url2 <- paises_times[url, 'V2']
pais1 <- read_html(url1) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
pais2 <- read_html(url2) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
paises_times_2 <- rbind(paises_times_2, cbind(pais1, pais2))
}
View(paises_times_2)
options(timeout())
options(timeout = 360)
getOption(timeout)
getOption('timeout')
paises_times_2 <- matrix(nrow = 0, ncol = 2)
for(url in 1:nrow(paises_times)){
url1 <- paises_times[url, 'V1']
url2 <- paises_times[url, 'V2']
pais1 <- read_html(url1) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
pais2 <- read_html(url2) %>% html_nodes('div.team-header-country') %>%
html_text() %>% str_replace_all('\n', '') %>% str_replace_all('\t', '')
paises_times_2 <- rbind(paises_times_2, cbind(pais1, pais2))
}
View(paises_times_2)
backup <- paises_times_2
# PAREI AQUI ANTES DE DORMIR, PRECISO ARRUMAR PQ TÁ REPETIDO OS DADOS OBTIDOS NESSE LOOP
resultados_matriz <- t(matrix(unlist(paises_times_2), ncol = 2))
View(resultados_matriz)
paises_times_2 <- backup
View(paises_times_2)
x <- as.data.frame(paises_times_2)
View(x)
paises_times_urls <- read.csv2('csv/paises_times.csv') %>% select(-X)
View(paises_times_urls)
write.csv2(paises_times_urls, 'csv/paises_times_urls.csv')
write.csv2(paises_times_2, 'csv/paises_times.csv')
freq <- table(unlist(paises_times_2))
df_freq <- data.frame(
pais = names(freq),
frequencia = as.numeric(freq)
)
# filtrar as 10 linhas com as maiores frequências
df_top10 <- df_freq[order(df_freq$frequencia, decreasing = TRUE), ][1:10, ]
# criar um plot de ggplot2 com barras de frequência
ggplot(df_top10, aes(x = pais, y = frequencia, fill = pais)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(title = "Frequência dos 10 Países Mais Comuns", x = "Países", y = "Frequência") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Instalando (se necessário) e carregando pacotes ----------------------------------------------------------
remotes::install_github('Juniorffonseca/r-pacote-valorant')
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(pROC)
library(ROCR)
library(kableExtra)
library(glmnet)
library(valorant)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
freq <- table(unlist(paises_times_2))
df_freq <- data.frame(
pais = names(freq),
frequencia = as.numeric(freq)
)
# filtrar as 10 linhas com as maiores frequências
df_top10 <- df_freq[order(df_freq$frequencia, decreasing = TRUE), ][1:10, ]
# criar um plot de ggplot2 com barras de frequência
ggplot(df_top10, aes(x = pais, y = frequencia, fill = pais)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(title = "Frequência dos 10 Países Mais Comuns", x = "Países", y = "Frequência") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico de pizza
ggplot(df_top10, aes(x = "", y = frequencia, fill = pais)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
theme_void() +
labs(title = "Frequência de Países") +
guides(fill = guide_legend(title = "Países"))
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
#install_github('Juniorffonseca/r-pacote-valorant')
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(pROC)
library(ROCR)
library(kableExtra)
library(valorant)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date('2023-04-11'), Sys.Date() - 1, by = 'day')
nomes_arquivos <- paste0('csv/previsao_diaria/', format(datas, '%Y-%m-%d'), '_acuracia.csv')
acuracia <- list()
for (arquivo in nomes_arquivos) {
acuracia[[arquivo]] <- possibly(read.csv2, otherwise = NULL)(arquivo)
}
acuracia <- bind_rows(acuracia) %>% select(-X)
acertos <- sum(acuracia$acertos)
erros <- sum(acuracia$erros)
print(acuracia_total <- acertos/(acertos+erros))
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
library(valorant)
library(lubridate)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando arquivos csv ---------------------------------------------------------------------------------
nome_arquivo_urls <- paste(Sys.Date() - 1, '_urls.csv', sep = '')
nome_arquivo_previsoes <- paste(Sys.Date() - 1, '_previsoes.csv', sep = '')
nome_arquivo_acuracia <- paste(Sys.Date() - 1, '_acuracia.csv', sep = '')
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-X) %>% unlist()
previsoes <- read.csv2(paste('csv/previsao_diaria/', nome_arquivo_previsoes, sep = '')) %>% select(-X)
ganhador <- '' %>% .[0]
for (i in b){
tryCatch({
ganhador[length(ganhador)+1] <- get_Ganhadores(i)
}, error = function(e) {
# caso ocorra um erro, imprimir mensagem de erro e continuar o loop
cat("Erro ao checar a URL", url, ":", conditionMessage(e), "\n")
return(NULL)
})
}
df <- cbind(b, previsoes)
df$ganhador <- ganhador
df <- df[!df$ganhador %in% "empate", ]
df$V1_n <- as.numeric(ifelse(is.na(str_extract(df$V1, "\\d{1,2}[.,]\\d{1,2}")),
str_extract(df$V1, "\\d{1,2}"),
str_extract(df$V1, "\\d{1,2}[.,]\\d{1,2}")))
df$V2_n <- as.numeric(ifelse(is.na(str_extract(df$V2, "\\d{1,2}[.,]\\d{1,2}")),
str_extract(df$V2, "\\d{1,2}"),
str_extract(df$V2, "\\d{1,2}[.,]\\d{1,2}")))
df$prev <- ifelse(as.numeric(df$V1_n)>as.numeric(df$V2_n), 1, 0)
acertos <- sum(df$ganhador == df$prev)
erros <- sum(df$ganhador != df$prev)
acuracia <- acertos/nrow(df)
acuracia_diaria <- as.data.frame(cbind(acertos, erros, acuracia))
row.names(acuracia_diaria) <- NULL
View(acuracia_diaria)
row.names(df) <- NULL
View(df)
View(previsoes)
acertos <- sum(df$ganhador == df$prev)
erros <- sum(df$ganhador != df$prev)
acuracia <- acertos/nrow(df)
acuracia_diaria <- as.data.frame(cbind(acertos, erros, acuracia))
View(previsoes)
View(previsoes)
taskscheduleR:::taskschedulerAddin()
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
library(valorant)
library(lubridate)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando arquivos csv ---------------------------------------------------------------------------------
nome_arquivo_urls <- paste(Sys.Date() - 0, '_urls.csv', sep = '')
nome_arquivo_previsoes <- paste(Sys.Date() - 0, '_previsoes.csv', sep = '')
nome_arquivo_acuracia <- paste(Sys.Date() - 0, '_acuracia.csv', sep = '')
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-X) %>% unlist()
previsoes <- read.csv2(paste('csv/previsao_diaria/', nome_arquivo_previsoes, sep = '')) %>% select(-X)
ganhador <- '' %>% .[0]
for (i in b){
tryCatch({
ganhador[length(ganhador)+1] <- get_Ganhadores(i)
}, error = function(e) {
# caso ocorra um erro, imprimir mensagem de erro e continuar o loop
cat("Erro ao checar a URL", url, ":", conditionMessage(e), "\n")
return(NULL)
})
}
df <- cbind(b, previsoes)
df$ganhador <- ganhador
df <- df[!df$ganhador %in% "empate", ]
df$V1_n <- as.numeric(ifelse(is.na(str_extract(df$V1, "\\d{1,2}[.,]\\d{1,2}")),
str_extract(df$V1, "\\d{1,2}"),
str_extract(df$V1, "\\d{1,2}[.,]\\d{1,2}")))
df$V2_n <- as.numeric(ifelse(is.na(str_extract(df$V2, "\\d{1,2}[.,]\\d{1,2}")),
str_extract(df$V2, "\\d{1,2}"),
str_extract(df$V2, "\\d{1,2}[.,]\\d{1,2}")))
df$prev <- ifelse(as.numeric(df$V1_n)>as.numeric(df$V2_n), 1, 0)
row.names(df) <- NULL
acertos <- sum(df$ganhador == df$prev)
erros <- sum(df$ganhador != df$prev)
acuracia <- acertos/nrow(df)
acuracia_diaria <- as.data.frame(cbind(acertos, erros, acuracia))
# Instalando (se necessário) e carregando pacotes ----------------------------------------------------------
remotes::install_github('Juniorffonseca/r-pacote-valorant')
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(pROC)
library(ROCR)
library(kableExtra)
library(glmnet)
library(valorant)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Matriz de confusão ---------------------------------------------------------------------------------------
jogos <- read.csv2('csv/partidas_teste_10_04_2023.csv') %>% dplyr::select(-X)
jogos$ganhador <- as.factor(jogos$ganhador)
s <- 281768
set.seed(s-1) #10679
data_split <- initial_split(jogos, prop = 0.7, strata = 'ganhador')
training_data <- training(data_split)
test_data <- testing(data_split)
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
test_data$ganhador <- as.factor(test_data$ganhador)
training_data$ganhador <- as.factor(training_data$ganhador)
# Carregando modelo e obtendo os resultados
load('rede_neural_10_04_2023.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
x <- as.data.frame(x$table)
predictVstest <- cbind(test_data, Predict$net.result)
names(predictVstest)[length(predictVstest)] <- 'previsao'
accuracy <- sum(predictVstest$ganhador == nn2)/nrow(test_data)
error_rate <- sum(predictVstest$ganhador != nn2)/nrow(test_data)
# Curva ROC
ROC <- roc(response = as.factor(predictVstest$ganhador),
predictor = predictVstest$previsao)
predicoes <- ROCR::prediction(predictions = predictVstest$previsao,
labels = as.factor(predictVstest$ganhador))
dados_curva_roc <- performance(predicoes, measure = "sens")
sensitividade <- (performance(predicoes, measure = "sens"))@y.values[[1]]
especificidade <- (performance(predicoes, measure = "spec"))@y.values[[1]]
ggplot() +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = 'grey40', size = 0.2) +
geom_line(aes(x = 1 - especificidade, y = sensitividade),
color = "darkorchid", size = 2) +
labs(x = '1 - Especificidade',
y = 'Sensitividade',
title = paste('Área abaixo da curva:',
round(ROC$auc, 4),
'|',
'Coeficiente de Gini:',
round((ROC$auc[1] - 0.5) / 0.5, 4))) +
theme(panel.background = element_rect(NA),
panel.border = element_rect(color = 'black', fill = NA),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10)
)
# Plot matriz de confusão
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1, size = 6.5) +
scale_fill_gradient2(low = hcl(0, 100, 70), mid = 'white', high = 'springgreen',
limits = c(0, max(x$Freq)), midpoint = max(x$Freq) / 2) +
labs(x = "Classe Real", y = "Classe Predita", fill = "Frequência") +
theme_bw(base_size = 14) +
theme(legend.position = 'none', axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(hjust = 1, size = 15), legend.title = element_text(size = 15)) +
guides(fill = FALSE)
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
#install_github('Juniorffonseca/r-pacote-valorant')
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(pROC)
library(ROCR)
library(kableExtra)
library(valorant)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date('2023-04-11'), Sys.Date() - 1, by = 'day')
nomes_arquivos <- paste0('csv/previsao_diaria/', format(datas, '%Y-%m-%d'), '_acuracia.csv')
acuracia <- list()
for (arquivo in nomes_arquivos) {
acuracia[[arquivo]] <- possibly(read.csv2, otherwise = NULL)(arquivo)
}
acuracia <- bind_rows(acuracia) %>% select(-X)
acertos <- sum(acuracia$acertos)
erros <- sum(acuracia$erros)
print(acuracia_total <- acertos/(acertos+erros))
0 > 1
0 < 1
0 < -1
0 > 10
