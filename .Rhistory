library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(valorant)
# Carregando partidas diarias e unindo emum df ------------------------------------------------------------
jogos_1 <- read.csv2('csv/catalogacao_diaria/2023-02-19_partidas.csv') %>% dplyr::select(-X)
jogos_2 <- read.csv2('csv/catalogacao_diaria/2023-02-20_partidas.csv') %>% dplyr::select(-X)
jogos_3 <- read.csv2('csv/catalogacao_diaria/2023-02-21_partidas.csv') %>% dplyr::select(-X)
jogos_4 <- read.csv2('csv/catalogacao_diaria/2023-02-22_partidas.csv') %>% dplyr::select(-X)
jogos_5 <- read.csv2('csv/catalogacao_diaria/2023-02-23_partidas.csv') %>% dplyr::select(-X)
jogos_6 <- read.csv2('csv/catalogacao_diaria/2023-02-24_partidas.csv') %>% dplyr::select(-X)
jogos_7 <- read.csv2('csv/catalogacao_diaria/2023-02-25_partidas.csv') %>% dplyr::select(-X)
jogos_8 <- read.csv2('csv/catalogacao_diaria/2023-02-26_partidas.csv') %>% dplyr::select(-X)
jogos_9 <- read.csv2('csv/catalogacao_diaria/2023-02-27_partidas.csv') %>% dplyr::select(-X)
jogos_10 <- read.csv2('csv/catalogacao_diaria/2023-02-28_partidas.csv') %>% dplyr::select(-X)
jogos_11 <- read.csv2('csv/catalogacao_diaria/2023-03-01_partidas.csv') %>% dplyr::select(-X)
jogos_12 <- read.csv2('csv/catalogacao_diaria/2023-03-02_partidas.csv') %>% dplyr::select(-X)
jogos_13 <- read.csv2('csv/catalogacao_diaria/2023-03-03_partidas.csv') %>% dplyr::select(-X)
jogos <- rbind(jogos_1, jogos_2, jogos_3, jogos_4, jogos_5, jogos_6, jogos_7, jogos_8, jogos_9,
jogos_10, jogos_11, jogos_12, jogos_13)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
prob_a <- 0.7
prob_b <- 0.3
hidden_n <- c(10)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(prob_a, prob_b))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = hidden_n,
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 1
w <- 0.1
while ( i < 0.84) {
achar_Seed(s, prob_a, prob_b, hidden_n)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
while ( i < 0.87) {
achar_Seed(s, prob_a, prob_b, hidden_n)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
while ( i < 0.86) {
achar_Seed(s, prob_a, prob_b, hidden_n)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 13000
w <- 0.1
while ( i < 0.86) {
achar_Seed(s, prob_a, prob_b, hidden_n)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 11000
w <- 0.1
while ( i < 0.86) {
achar_Seed(s, prob_a, prob_b, hidden_n)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
# Atualizando a seed para achar a melhor neuralnetwork ----------------------------------------------------
set.seed(s-1) #4 #59
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(prob_a, prob_b))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
# Procurando uma rede neural com acuracia a cima de determinado percentual --------------------------------
z <- 0.1
while (i < 0.94) {
achar_Nn()
}
while (i < 0.91) {
achar_Nn()
}
beep(8)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
beep(8)
#save(n, file ='rede_neural.rda')
#save(n, file='rede_neural_teste.rda')
save(n, file='prototipo_rede_neural.rda') #primeira tentativa de rede neural com os dados diarios
View(predictVstest)
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
library(valorant)
library(lubridate)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
nome_arquivo_urls <- paste(Sys.Date(), '_urls.csv', sep = '')
nome_arquivo_partidas <- paste(Sys.Date(), '_partidas.csv', sep = '')
b <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_urls, sep = '')) %>% select(-X) %>% unlist()
dff <- read.csv2(paste('csv/catalogacao_diaria/', nome_arquivo_partidas, sep = '')) %>% select(-X)
ganhador <- '' %>% .[0]
for (i in b){
ganhador[length(ganhador)+1] <- get_Ganhadores(i)
}
dff$ganhador <- ganhador
nome_arquivo_partidas <- '2023-03-04_partidas_momentaneo.csv'
write.csv2(dff, paste('csv/catalogacao_diaria/', nome_arquivo_partidas, sep = ''))
#Instalando pacotes (se necessário)
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(valorant)
jogos <- rbind(jogos_1, jogos_2, jogos_3, jogos_4, jogos_5, jogos_6, jogos_7, jogos_8, jogos_9,
jogos_10, jogos_11, jogos_12, jogos_13, jogos_14)
# Carregando partidas diarias e unindo emum df ------------------------------------------------------------
jogos_1 <- read.csv2('csv/catalogacao_diaria/2023-02-19_partidas.csv') %>% dplyr::select(-X)
jogos_2 <- read.csv2('csv/catalogacao_diaria/2023-02-20_partidas.csv') %>% dplyr::select(-X)
jogos_3 <- read.csv2('csv/catalogacao_diaria/2023-02-21_partidas.csv') %>% dplyr::select(-X)
jogos_4 <- read.csv2('csv/catalogacao_diaria/2023-02-22_partidas.csv') %>% dplyr::select(-X)
jogos_5 <- read.csv2('csv/catalogacao_diaria/2023-02-23_partidas.csv') %>% dplyr::select(-X)
jogos_6 <- read.csv2('csv/catalogacao_diaria/2023-02-24_partidas.csv') %>% dplyr::select(-X)
jogos_7 <- read.csv2('csv/catalogacao_diaria/2023-02-25_partidas.csv') %>% dplyr::select(-X)
jogos_8 <- read.csv2('csv/catalogacao_diaria/2023-02-26_partidas.csv') %>% dplyr::select(-X)
jogos_9 <- read.csv2('csv/catalogacao_diaria/2023-02-27_partidas.csv') %>% dplyr::select(-X)
jogos_10 <- read.csv2('csv/catalogacao_diaria/2023-02-28_partidas.csv') %>% dplyr::select(-X)
jogos_11 <- read.csv2('csv/catalogacao_diaria/2023-03-01_partidas.csv') %>% dplyr::select(-X)
jogos_12 <- read.csv2('csv/catalogacao_diaria/2023-03-02_partidas.csv') %>% dplyr::select(-X)
jogos_13 <- read.csv2('csv/catalogacao_diaria/2023-03-03_partidas.csv') %>% dplyr::select(-X)
jogos_14 <- read.csv2('csv/catalogacao_diaria/2023-03-04_partidas_momentaneo.csv') %>% dplyr::select(-X) #preciso remover amanha e colocar o correto
jogos <- rbind(jogos_1, jogos_2, jogos_3, jogos_4, jogos_5, jogos_6, jogos_7, jogos_8, jogos_9,
jogos_10, jogos_11, jogos_12, jogos_13, jogos_14)
rm(jogos_1, jogos_2, jogos_3, jogos_4, jogos_5, jogos_6, jogos_7, jogos_8, jogos_9,
jogos_10, jogos_11, jogos_12, jogos_13, jogos_14)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
prob_a <- 0.7
prob_b <- 0.3
hidden_n <- c(10)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(prob_a, prob_b))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = hidden_n,
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 1
w <- 0.1
while ( i < 0.86) {
achar_Seed(s, prob_a, prob_b, hidden_n)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
prob_a <- 0.8
prob_b <- 0.2
hidden_n <- c(10)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(prob_a, prob_b))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = hidden_n,
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 1
w <- 0.1
while ( i < 0.86) {
achar_Seed(s, prob_a, prob_b, hidden_n)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
# Atualizando a seed para achar a melhor neuralnetwork ----------------------------------------------------
set.seed(s-1) #4 #59
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(prob_a, prob_b))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
# Procurando uma rede neural com acuracia a cima de determinado percentual --------------------------------
z <- 0.1
while (i < 0.93) {
achar_Nn()
}
beep(8)
# Matriz de confusão ---------------------------------------------------------------------------------------
jogos <- read.csv2('csv/partidas_teste.csv') %>% dplyr::select(-X)
set.seed(5)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
# Carregando modelo e obtendo os resultados
load('rede_neural.rda')
# Procurando uma rede neural com acuracia a cima de determinado percentual --------------------------------
z <- 0.1
while (i < 0.93) {
achar_Nn()
}
i <- 0
while (i < 0.93) {
achar_Nn()
}
# Atualizando a seed para achar a melhor neuralnetwork ----------------------------------------------------
set.seed(s-1) #4 #59
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(prob_a, prob_b))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
while (i < 0.96) {
achar_Nn()
}
# Atualizando a seed para achar a melhor neuralnetwork ----------------------------------------------------
set.seed(s-1) #4 #59
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(prob_a, prob_b))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
# Procurando uma rede neural com acuracia a cima de determinado percentual --------------------------------
z <- 0.1
test_data <- jogos[inp==2, ]
training_data <- jogos[inp==1, ]
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(prob_a, prob_b))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
prob_a <- 0.8
prob_b <- 0.2
hidden_n <- c(10)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(prob_a, prob_b))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
jogos_1 <- read.csv2('csv/catalogacao_diaria/2023-02-19_partidas.csv') %>% dplyr::select(-X)
jogos_2 <- read.csv2('csv/catalogacao_diaria/2023-02-20_partidas.csv') %>% dplyr::select(-X)
jogos_3 <- read.csv2('csv/catalogacao_diaria/2023-02-21_partidas.csv') %>% dplyr::select(-X)
jogos_4 <- read.csv2('csv/catalogacao_diaria/2023-02-22_partidas.csv') %>% dplyr::select(-X)
jogos_5 <- read.csv2('csv/catalogacao_diaria/2023-02-23_partidas.csv') %>% dplyr::select(-X)
jogos_6 <- read.csv2('csv/catalogacao_diaria/2023-02-24_partidas.csv') %>% dplyr::select(-X)
jogos_7 <- read.csv2('csv/catalogacao_diaria/2023-02-25_partidas.csv') %>% dplyr::select(-X)
jogos_8 <- read.csv2('csv/catalogacao_diaria/2023-02-26_partidas.csv') %>% dplyr::select(-X)
jogos_9 <- read.csv2('csv/catalogacao_diaria/2023-02-27_partidas.csv') %>% dplyr::select(-X)
jogos_10 <- read.csv2('csv/catalogacao_diaria/2023-02-28_partidas.csv') %>% dplyr::select(-X)
jogos_11 <- read.csv2('csv/catalogacao_diaria/2023-03-01_partidas.csv') %>% dplyr::select(-X)
jogos_12 <- read.csv2('csv/catalogacao_diaria/2023-03-02_partidas.csv') %>% dplyr::select(-X)
jogos_13 <- read.csv2('csv/catalogacao_diaria/2023-03-03_partidas.csv') %>% dplyr::select(-X)
jogos_14 <- read.csv2('csv/catalogacao_diaria/2023-03-04_partidas_momentaneo.csv') %>% dplyr::select(-X) #preciso remover amanha e colocar o correto
jogos <- rbind(jogos_1, jogos_2, jogos_3, jogos_4, jogos_5, jogos_6, jogos_7, jogos_8, jogos_9,
jogos_10, jogos_11, jogos_12, jogos_13, jogos_14)
rm(jogos_1, jogos_2, jogos_3, jogos_4, jogos_5, jogos_6, jogos_7, jogos_8, jogos_9,
jogos_10, jogos_11, jogos_12, jogos_13, jogos_14)
# Atualizando a seed para achar a melhor neuralnetwork ----------------------------------------------------
set.seed(s-1) #4 #59
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(prob_a, prob_b))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
# Procurando uma rede neural com acuracia a cima de determinado percentual --------------------------------
z <- 0.1
while (i < 0.96) {
achar_Nn()
}
while (i < 0.95) {
achar_Nn()
}
beep(8)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
prob_a <- 0.7
prob_b <- 0.3
hidden_n <- c(10)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(prob_a, prob_b))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = hidden_n,
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 1
w <- 0.1
while ( i < 0.86) {
achar_Seed(s, prob_a, prob_b, hidden_n)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
while ( i < 0.87) {
achar_Seed(s, prob_a, prob_b, hidden_n)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
