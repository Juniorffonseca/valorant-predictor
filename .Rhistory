dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- sum(dados_jogador, na.rm = T)
# for (i in colnames(dados_jogador)){
#   as.numeric(dados_jogador[[i]]) * as.numeric(dados_jogador$Use)
# }
# dados_jogador$Rating <- dados_jogador$Rating * dados_jogador$Use
# dados_jogador$ACS <- dados_jogador$ACS * dados_jogador$Use
# dados_jogador$KAST <- dados_jogador$KAST * dados_jogador$Use
# dados_jogador$
# for (i in dados_jogador$Rating) {
#   sum(dados_jogador$)
# }
#means_jogador <- round(colMeans(dados_jogador, na.rm = T), 2)
#means_jogador[['KAST']] <- round(means_jogador[['KAST']], 0)
return(dados_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum)
# for (i in colnames(dados_jogador)){
#   as.numeric(dados_jogador[[i]]) * as.numeric(dados_jogador$Use)
# }
# dados_jogador$Rating <- dados_jogador$Rating * dados_jogador$Use
# dados_jogador$ACS <- dados_jogador$ACS * dados_jogador$Use
# dados_jogador$KAST <- dados_jogador$KAST * dados_jogador$Use
# dados_jogador$
# for (i in dados_jogador$Rating) {
#   sum(dados_jogador$)
# }
#means_jogador <- round(colMeans(dados_jogador, na.rm = T), 2)
#means_jogador[['KAST']] <- round(means_jogador[['KAST']], 0)
return(dados_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
# for (i in colnames(dados_jogador)){
#   as.numeric(dados_jogador[[i]]) * as.numeric(dados_jogador$Use)
# }
# dados_jogador$Rating <- dados_jogador$Rating * dados_jogador$Use
# dados_jogador$ACS <- dados_jogador$ACS * dados_jogador$Use
# dados_jogador$KAST <- dados_jogador$KAST * dados_jogador$Use
# dados_jogador$
# for (i in dados_jogador$Rating) {
#   sum(dados_jogador$)
# }
#means_jogador <- round(colMeans(dados_jogador, na.rm = T), 2)
#means_jogador[['KAST']] <- round(means_jogador[['KAST']], 0)
return(dados_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
# for (i in colnames(dados_jogador)){
#   as.numeric(dados_jogador[[i]]) * as.numeric(dados_jogador$Use)
# }
# dados_jogador$Rating <- dados_jogador$Rating * dados_jogador$Use
# dados_jogador$ACS <- dados_jogador$ACS * dados_jogador$Use
# dados_jogador$KAST <- dados_jogador$KAST * dados_jogador$Use
# dados_jogador$
# for (i in dados_jogador$Rating) {
#   sum(dados_jogador$)
# }
#means_jogador <- round(colMeans(dados_jogador, na.rm = T), 2)
#means_jogador[['KAST']] <- round(means_jogador[['KAST']], 0)
return(dados_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
means_jogador <- round(colMeans(dados_jogador, na.rm = T), 2)
means_jogador[['KAST']] <- round(means_jogador[['KAST']], 0)
return(dados_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
medias_jogador <- round(dados_jogador, 2)
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
medias_jogador <- lapply(dados_jogador, round(2))
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
?round
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
medias_jogador <- dados_jogador
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
medias_jogador <- dados_jogador %>% round(2)
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
medias_jogador <- dados_jogador %>% round(as.numeric(dados_jogador), 2)
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
medias_jogador <- dados_jogador
medias_jogador <- round(medias_jogador, 2)
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- round(lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use), 2)
medias_jogador <- dados_jogador
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) round(x / y, 2), dados_jogador$Use)
medias_jogador <- dados_jogador
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
library(valorant)
library('valorant')
library(valorant)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(caret)
library(ggplot2)
library('valorant')
install(valorant)
install.packages('valorant')
install.packages("valorant")
valorant::medias_Jogadores()
library('valorant')
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(valorant)
#Instalando pacotes (se necessário)
install_github("Juniorffonseca/r-pacote-valorant")
#Instalando pacotes (se necessário)
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
#Instalando pacotes (se necessário)
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(valorant)
valorant::medias_Jogadores()
library(roxygen2)
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant", force = T)
library(valorant)
detach("package:valorant", unload = TRUE)
remove.packages("valorant")
install_github("Juniorffonseca/r-pacote-valorant")
#Instalando pacotes (se necessário)
library(devtools)
library(roxygen2)
install_github("Juniorffonseca/r-pacote-valorant")
#Instalando pacotes (se necessário)
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(readr)
library(purrr)
library(valorant)
# Criando variável páginas e criando variável 'p' que será a parte final do url (o número da página) -------
paginas <- ''
p <- 1
# Criando um laço for que armazenará o url de cada página dentro da variável paginas -----------------------
for (i in 1:50){
paginas[p] <- paste('https://www.vlr.gg/matches/results/?page=', p, sep = '')
p = p + 1
}
# Variável partidas e variável c ---------------------------------------------------------------------------
c <- 1
partidas <- 'a'
# Função que retorna o url de cada partida -----------------------------------------------------------------
funcaoPagina <- function(pagina){
partidas <- read_html(pagina) %>%
html_nodes('a') %>% html_attr('href') # Nessa parte ele pega todos os urls que estão contidos na página.
partidas <- partidas[15:64] # Aqui é separado os urls que são efetivamente de partidas.
n <- 1
for (i in partidas){
partidas[n] <- paste('https://www.vlr.gg', partidas[n], sep = '') # Salvando urls dentro da variável partida
n = n + 1
}
return(partidas)
}
# Criando f e uma lista que receberá todos os returns da funcaoPagina (url de cada partida) ----------------
f <- 1
a <- list()
# Executando um for que fará a iteração da funcaoPagina todas as vezes necessárias -------------------------
for (i in paginas){
a[[length(a)+1]] = funcaoPagina(paginas[f])
f = f + 1
}
# Fazendo unlist de 'a' e criando 'm' e 'dff' (lista que receberá todos os dados dos jogos) ----------------
m <- 1
a <- unlist(a)
dff <- list()
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(a[m])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
# Passando os dados recebidos para um dataframe mais organizado --------------------------------------------
dff <- dff %>% map_df(as_tibble, .name_repair = "unique") # talvez não precise do .name_repair = "unique"
# Exportando como csv --------------------------------------------------------------------------------------
write.csv2(dff, 'csv/partidas_3.csv')
View(dff)
round(dff$time1R, 2)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(caret)
library(ggplot2)
#jogos <- read.csv2('csv/totalidade_jogos_sem_na.csv') %>% dplyr::select(-X)
#jogos <- read.csv2('csv/partidas_2.csv') %>% dplyr::select(-X)
jogos <- read.csv2('csv/partidas_3.csv') %>% dplyr::select(-X)
#jogos <- read.csv2('csv/totalidade_jogos_sem_na.csv') %>% dplyr::select(-X)
#jogos <- read.csv2('csv/partidas_2.csv') %>% dplyr::select(-X)
jogos <- read.csv2('csv/partidas_3.csv') %>% dplyr::select(-X)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
ganhadores <- list()
# Criando variável páginas e criando variável 'p' que será a parte final do url (o número da página) -------
paginas <- ''
p <- 1
# Criando um laço for que armazenará o url de cada página dentro da variável paginas -----------------------
for (i in 1:50){
paginas[p] <- paste('https://www.vlr.gg/matches/results/?page=', p, sep = '')
p = p + 1
}
# Variável partidas e variável c ---------------------------------------------------------------------------
c <- 1
partidas <- 'a'
# Função que retorna o url de cada partida -----------------------------------------------------------------
funcaoPagina <- function(pagina){
partidas <- read_html(pagina) %>%
html_nodes('a') %>% html_attr('href') # Nessa parte ele pega todos os urls que estão contidos na página.
partidas <- partidas[15:64] # Aqui é separado os urls que são efetivamente de partidas.
n <- 1
for (i in partidas){
partidas[n] <- paste('https://www.vlr.gg', partidas[n], sep = '') # Salvando urls dentro da variável partida
n = n + 1
}
return(partidas)
}
# Criando f e uma lista que receberá todos os returns da funcaoPagina (url de cada partida) ----------------
f <- 1
a <- list()
# Executando um for que fará a iteração da funcaoPagina todas as vezes necessárias -------------------------
for (i in paginas){
a[[length(a)+1]] = funcaoPagina(paginas[f])
f = f + 1
}
# Fazendo unlist de 'a' e criando 'm' e 'dff' (lista que receberá todos os dados dos jogos) ----------------
m <- 1
a <- unlist(a)
ganhadores <- list()
for (i in a){
tryCatch({
ganhadores[[length(ganhadores)+1]] <- get_Ganhadores(a[m])
m = m + 1
}, error = function(e) {cat('error:', conditionMessage(e), '\n')})
}
install_github("Juniorffonseca/r-pacote-valorant")
detach("package:valorant", unload = TRUE)
install_github("Juniorffonseca/r-pacote-valorant")
for (i in a){
tryCatch({
ganhadores[[length(ganhadores)+1]] <- get_Ganhadores(a[m])
m = m + 1
}, error = function(e) {cat('error:', conditionMessage(e), '\n')})
}
library(valorant)
for (i in a){
tryCatch({
ganhadores[[length(ganhadores)+1]] <- get_Ganhadores(a[m])
m = m + 1
}, error = function(e) {cat('error:', conditionMessage(e), '\n')})
}
detach("package:valorant", unload = TRUE)
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
ganhadores[[length(ganhadores)+1]] <- get_Ganhadores(a[m])
library(valorant)
for (i in a){
tryCatch({
ganhadores[[length(ganhadores)+1]] <- get_Ganhadores(a[m])
m = m + 1
}, error = function(e) {cat('error:', conditionMessage(e), '\n')})
}
