pagina
pagina <- read_html(url) %>% html_node('td.DoNotBreak')
pagina <- read_html(url) %>% html_node('td')
pagina <- read_html(url) %>% html_node('table')
pagina <- read_html(url) %>% html_nodes('td.DoNotBreak')
pagina
View(pagina)
pagina[[1]]
pagina[1]
pagina[2]
pagina[3]
pagina[4]
pagina[1]
pagina <- unlist(pagina)
pagina
View(pagina)
pagina[1]
pagina <- read_html(url) %>% html_nodes('td.DoNotBreak')
pagina <- tabble(pagina)
library(mlflow)
# Carregando pacotes ---------------------------------------------------------------------------------------
pacotes <- c("remotes", "caret", "dplyr", "tidyr", "rvest", "rsample", "readr", "quantmod",
"httr", "tibble", "stringr", "neuralnet", "nnet", "ggplot2", "ModelMetrics",
"beepr", "purrr", "plotly", "pROC", "ROCR", "kableExtra", "glmnet", "valorant", 'mlflow')
for (pacote in pacotes) {
if (!require(pacote, character.only = TRUE)) {
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github('Juniorffonseca/r-pacote-valorant')
if (!require(pacote, character.only = TRUE)) {
stop(paste("Pacote", pacote, "não encontrado"))
}
}
}
install.packages('mlflow')
mlflow_set_tracking_uri("http://localhost:5000") # define a URI do servidor de rastreamento
for (pacote in pacotes) {
if (!require(pacote, character.only = TRUE)) {
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github('Juniorffonseca/r-pacote-valorant')
if (!require(pacote, character.only = TRUE)) {
stop(paste("Pacote", pacote, "não encontrado"))
}
}
}
mlflow_set_tracking_uri("http://localhost:5000") # define a URI do servidor de rastreamento
mlflow_set_experiment("rede_neural") # define o nome do experimento
mlflow_create_experiment("rede_neural") # define o nome do experimento
# Definindo diretório --------------------------------------------------------------------------------------
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando pacotes ---------------------------------------------------------------------------------------
pacotes <- c("remotes", "caret", "dplyr", "tidyr", "rvest", "rsample", "readr", "quantmod",
"httr", "tibble", "stringr", "neuralnet", "nnet", "ggplot2", "ModelMetrics",
"beepr", "purrr", "plotly", "pROC", "ROCR", "kableExtra", "glmnet", "valorant", 'mlflow')
for (pacote in pacotes) {
if (!require(pacote, character.only = TRUE)) {
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github('Juniorffonseca/r-pacote-valorant')
if (!require(pacote, character.only = TRUE)) {
stop(paste("Pacote", pacote, "não encontrado"))
}
}
}
mlflow_set_tracking_uri('http://localhost:5000') # define a URI do servidor de rastreamento
mlflow_create_experiment('rede_neural') # define o nome do experimento
mlflow_set_tracking_uri('http://localhost:5000') # define a URI do servidor de rastreamento
mlflow ui
CRAN (install.packages("mlflow"))
install.packages("mlflow")
mlflow_set_tracking_uri('http://http://127.0.0.1:5000') # define a URI do servidor de rastreamento
install.packages("mlflow")
install.packages("mlflow")
mlflow_set_tracking_uri('http://localhost:5000') # define a URI do servidor de rastreamento
# Definindo diretório --------------------------------------------------------------------------------------
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando pacotes ---------------------------------------------------------------------------------------
pacotes <- c("remotes", "caret", "dplyr", "tidyr", "rvest", "rsample", "readr", "quantmod",
"httr", "tibble", "stringr", "neuralnet", "nnet", "ggplot2", "ModelMetrics",
"beepr", "purrr", "plotly", "pROC", "ROCR", "kableExtra", "glmnet", "valorant", 'mlflow')
for (pacote in pacotes) {
if (!require(pacote, character.only = TRUE)) {
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github('Juniorffonseca/r-pacote-valorant')
if (!require(pacote, character.only = TRUE)) {
stop(paste("Pacote", pacote, "não encontrado"))
}
}
}
mlflow_set_tracking_uri('http://localhost:5000') # define a URI do servidor de rastreamento
mlflow_create_experiment('rede_neural') # define o nome do experimento
mlflow_ui()
# alterar caminho da variável de ambiente do python
Sys.setenv(MLFLOW_BIN="./venv/Scripts/mlflow")
# alterar caminho da variável de ambiente do python
Sys.setenv(MLFLOW_PYTHON_BIN="./venv/Scripts/python")
mlflow_set_tracking_uri('http://localhost:5000') # define a URI do servidor de rastreamento
mlflow_create_experiment('rede_neural') # define o nome do experimento
mlflow_ui()
# alterar caminho da variável de ambiente do python
Sys.setenv(MLFLOW_BIN="./venv/Scripts/mlflow")
# alterar caminho da variável de ambiente do python
Sys.setenv(MLFLOW_PYTHON_BIN="./venv/Scripts/python")
mlflow_set_tracking_uri('http://localhost:5000') # define a URI do servidor de rastreamento
mlflow_create_experiment('rede_neural') # define o nome do experimento
mlflow_ui()
# Defina os parâmetros de treinamento
params <- list(
hidden_n = toString(hidden_n),
err.fct = 'sse',
linear.output = F,
threshold = 0.5,
algorithm = 'rprop-',
stepmax = 10000
)
hidden_n <- c(15)
# Defina os parâmetros de treinamento
params <- list(
hidden_n = toString(hidden_n),
err.fct = 'sse',
linear.output = F,
threshold = 0.5,
algorithm = 'rprop-',
stepmax = 10000
)
# Registre os parâmetros e inicie o treinamento da rede neural
with_mlflow(
mlflow_start_run(),
{
mlflow_log_params(params) # rastreia os parâmetros de treinamento
n <- neuralnet(formula,
data = training_data,
hidden = hidden_n,
err.fct = 'sse',
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
}
)
mlflow_start_run()
# Registre os parâmetros
mlflow_log_params(params) # rastreia os parâmetros de treinamento
# Registre os parâmetros
mlflow_log_param(params) # rastreia os parâmetros de treinamento
# Registre os parâmetros
mlflow_log_param(params) # rastreia os parâmetros de treinamento
# Defina os parâmetros de treinamento
params <- list(
hidden_n = toString(hidden_n),
err.fct = 'sse',
linear.output = F,
threshold = 0.5,
algorithm = 'rprop-',
stepmax = 10000
)
mlflow_start_run()
# Registre os parâmetros
mlflow_log_param(params) # rastreia os parâmetros de treinamento
# Defina os parâmetros de treinamento
params <- list(
hidden_n = toString(hidden_n),
err.fct = 'sse',
linear.output = toString(linear.output),
threshold = 0.5,
algorithm = 'rprop-',
stepmax = 10000
)
mlflow_start_run()
# Registre os parâmetros
mlflow_log_param(params) # rastreia os parâmetros de treinamento
# Defina os parâmetros de treinamento
params <- list(
hidden_n = toString(hidden_n),
err.fct = 'sse',
linear.output = F,
threshold = 0.5,
algorithm = 'rprop-',
stepmax = 10000
)
mlflow_start_run()
# Registre os parâmetros
mlflow_log_param(params) # rastreia os parâmetros de treinamento
rlang::last_error()
rlang::last_trace()
# Defina os parâmetros de treinamento
params <- list(
hidden_n = toString(hidden_n),
err.fct = 'sse',
linear.output = linear.output,
threshold = 0.5,
algorithm = 'rprop-',
stepmax = 10000
)
# Defina os parâmetros de treinamento
params <- list(
hidden_n = toString(hidden_n),
err.fct = 'sse',
linear.output = FALSE,
threshold = 0.5,
algorithm = 'rprop-',
stepmax = 10000
)
# Registre os parâmetros na corrida do MLflow
mlflow_log_param(params)
# Defina os parâmetros de treinamento
params <- list(
hidden_n = toString(hidden_n),
err.fct = 'sse',
threshold = 0.5,
algorithm = 'rprop-',
stepmax = 10000
)
mlflow_start_run()
# Registre os parâmetros
mlflow_log_param(params) # rastreia os parâmetros de treinamento
# Defina os parâmetros de treinamento
params <- list(
hidden_n = toString(hidden_n),
err.fct = 'sse',
algorithm = 'rprop-',
stepmax = 10000
)
mlflow_start_run()
# Registre os parâmetros
mlflow_log_param(params) # rastreia os parâmetros de treinamento
# Defina os parâmetros de treinamento
params <- list(
hidden_n = toString(hidden_n),
err.fct = 'sse',
algorithm = 'rprop-',
)
mlflow_start_run()
# Registre os parâmetros
mlflow_log_param(params) # rastreia os parâmetros de treinamento
# Defina os parâmetros de treinamento
params <- list(
err.fct = 'sse',
algorithm = 'rprop-',
)
mlflow_start_run()
# Registre os parâmetros
mlflow_log_param(params) # rastreia os parâmetros de treinamento
?mlflow_log_model()
load('rede_neural_10_04_2023.rda')
mlflow_start_run()
# Registre os parâmetros
mlflow_log_model(n) # rastreia os parâmetros de treinamento
# Registre os parâmetros
mlflow_log_model(n, artifact_path = 'modelo') # rastreia os parâmetros de treinamento
# Registre os parâmetros
mlflow_log_model(n, artifact_path = 'modelo.rds') # rastreia os parâmetros de treinamento
# Carregando pacotes ---------------------------------------------------------------------------------------
pacotes <- c("remotes", "caret", "dplyr", "tidyr", "rvest", "rsample", "readr", "quantmod",
"httr", "tibble", "stringr", "neuralnet", "nnet", "ggplot2", "ModelMetrics", 'kerasR',
"beepr", "purrr", "plotly", "pROC", "ROCR", "kableExtra", "glmnet", "valorant", 'mlflow')
for (pacote in pacotes) {
if (!require(pacote, character.only = TRUE)) {
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github('Juniorffonseca/r-pacote-valorant')
if (!require(pacote, character.only = TRUE)) {
stop(paste("Pacote", pacote, "não encontrado"))
}
}
}
model_keras <- keras_model_sequential() # Crie um modelo Keras vazio
# Carregando pacotes ---------------------------------------------------------------------------------------
pacotes <- c("remotes", "caret", "dplyr", "tidyr", "rvest", "rsample", "readr", "quantmod",
"httr", "tibble", "stringr", "neuralnet", "nnet", "ggplot2", "ModelMetrics", 'keras',
"beepr", "purrr", "plotly", "pROC", "ROCR", "kableExtra", "glmnet", "valorant", 'mlflow')
for (pacote in pacotes) {
if (!require(pacote, character.only = TRUE)) {
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github('Juniorffonseca/r-pacote-valorant')
if (!require(pacote, character.only = TRUE)) {
stop(paste("Pacote", pacote, "não encontrado"))
}
}
}
model_keras <- keras_model_sequential() # Crie um modelo Keras vazio
model_keras %>%
layer_dense(units = hidden_n, input_shape = input_n) %>%
layer_dense(units = 1)
model_keras %>%
layer_dense(units = 15, input_shape = 15) %>%
layer_dense(units = 1)
# Copie os pesos da rede neural para o modelo Keras
weights <- getWeights(n)
weights_keras <- list()
for (i in 1:length(weights)) {
weights_keras[[i]] <- array(weights[[i]], dim = dim(weights[[i]])[2:1])
}
# Copie os pesos da rede neural para o modelo Keras
weights <- n$weights
weights_keras <- list()
for (i in 1:length(weights)) {
weights_keras[[i]] <- array(weights[[i]], dim = dim(weights[[i]])[2:1])
}
for (i in 1:length(weights)) {
n <- nn$act.fct[[i + 1]]$n
m <- nn$act.fct[[i]]$n + 1
weights_keras[[i]] <- array(weights[[i]]$W, dim = c(n, m))
}
nn <- n
# Copie os pesos da rede neural para o modelo Keras
weights <- nn$weights
weights_keras <- list()
for (i in 1:length(weights)) {
n <- nn$act.fct[[i + 1]]$n
m <- nn$act.fct[[i]]$n + 1
weights_keras[[i]] <- array(weights[[i]]$W, dim = c(n, m))
}
for (i in 1:length(weights)) {
n <- nn$net.layers[[i + 1]]
m <- nn$net.layers[[i]] + 1
weights_keras[[i]] <- array(weights[[i]]$W, dim = c(n, m))
}
for (i in 1:length(weights)) {
n <- nn$net.layers[[i + 1]]
m <- nn$net.layers[[i]] + 1
if (is.null(weights[[i]]$W) || any(is.na(weights[[i]]$W))) {
weights_keras[[i]] <- array(0, dim = c(n, m))
} else {
weights_keras[[i]] <- array(weights[[i]]$W, dim = c(n, m))
}
}
m <- nn$net.layers[[i]] + 1
for (i in 1:length(weights)) {
n <- nn$net.layers[[i + 1]]
m <- nn$net.layers[[i]] + 1
if (length(weights[[i]]) == 0) {
weights_keras[[i]] <- array(0, dim = c(n, m))
} else {
weights_keras[[i]] <- array(weights[[i]]$W, dim = c(n, m))
}
}
for (i in 1:length(weights)) {
n <- nn$net.layers[[i + 1]]
m <- nn$net.layers[[i]] + 1
if (length(weights[[i]]$W) == 0 || any(is.na(weights[[i]]$W))) {
weights_keras[[i]] <- array(0, dim = c(n, m))
} else {
weights_keras[[i]] <- array(weights[[i]]$W, dim = c(n, m))
}
}
n <- nn$net.layers[[i + 1]]
for (i in 1:length(weights)) {
n <- nn$net.layers[[i + 1]]
m <- nn$net.layers[[i]] + 1
if (length(weights[[i]]$W) == 0 || any(is.na(weights[[i]]$W))) {
weights_keras[[i]] <- array(0, dim = c(n, m))
} else if (length(dim(weights[[i]]$W)) == 0) {
weights_keras[[i]] <- array(0, dim = c(n, m))
} else {
weights_keras[[i]] <- array(weights[[i]]$W, dim = c(n, m))
}
}
# Compile o modelo
model_keras %>% compile(
loss = "mse",
optimizer = optimizer_adam(lr = learning_rate)
)
# Inicie o treinamento da rede neural
n <- neuralnet(formula,
data = training_data,
hidden = hidden_n,
err.fct = 'sse',
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
model_nnet <- readRDS("path/to/model.rds")
load('rede_neural_10_04_2023.rda')
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date('2023-02-19'), Sys.Date() - 1, by = 'day')
nomes_arquivos <- paste0('csv/catalogacao_diaria/', format(datas, '%Y-%m-%d'), '_partidas.csv')
jogos_lista <- list()
for (arquivo in nomes_arquivos) {
jogos_lista[[arquivo]] <- possibly(read.csv2, otherwise = NULL)(arquivo)
}
jogos <- bind_rows(jogos_lista) %>% select(-X)
vars <- c('RND', 'R', 'ACS', 'KAST', 'KD', 'ADR', 'KPR', 'APR', 'FKPR', 'FDPR', 'K', 'D', 'A', 'FK', 'FD')
for (i in vars) {
new_var <- paste0(i, "_diff")
jogos[[new_var]] <- jogos[[paste0("time1", i)]] - jogos[[paste0("time2", i)]]
}
jogos <- select(jogos, ends_with("_diff"), ganhador)
jogos$ganhador <- as.factor(jogos$ganhador)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
data_split <- initial_split(jogos, prop = 0.7, strata = 'ganhador')
training_data <- training(data_split)
test_data <- testing(data_split)
# Carregando os dados --------------------------------------------------------------------------------------
jogos <- read.csv2('csv/partidas_teste_10_04_2023.csv') %>% dplyr::select(-X)
jogos$ganhador <- as.factor(jogos$ganhador)
s <- 281768
set.seed(s-1) #10679
data_split <- initial_split(jogos, prop = 0.7, strata = 'ganhador')
training_data <- training(data_split)
test_data <- testing(data_split)
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
test_data$ganhador <- as.factor(test_data$ganhador)
training_data$ganhador <- as.factor(training_data$ganhador)
predictions <- predict(n, test_data)
mse <- mean((test_data$y - predictions)^2)
test_data$ganhador
mse <- mean((test_data$ganhador - predictions)^2)
# Crie uma matriz de design numérica a partir dos dados de teste
test_design <- model.matrix(~ ., data = test_data)
# Calcule as previsões usando a matriz de design numérica
predictions <- predict(model, newdata = test_design)
# Calcule as previsões usando a matriz de design numérica
predictions <- predict(n, newdata = test_design)
# Converta as respostas em uma forma numérica
response_numeric <- as.numeric(as.character(test_data$ganhador))
# Calcule o MSE usando as previsões e as respostas numéricas
mse <- mean((response_numeric - predictions)^2)
# Salve o modelo como um artefato no servidor MLflow
mlflow_log_param("hidden_n", n$size)
mlflow_log_param("weight_decay", n$decay)
mlflow_log_param("num_epochs", n$nIter)
mlflow_log_metric("mse", mse)
n$size
n$weights
# Salve o modelo como um artefato no servidor MLflow
mlflow_log_param("hidden_n", 15)
mlflow_set_tracking_uri('http://localhost:5000') # define a URI do servidor de rastreamento
mlflow_create_experiment('rede_neural') # define o nome do experimento
mlflow server
# Definindo diretório --------------------------------------------------------------------------------------
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando pacotes ---------------------------------------------------------------------------------------
pacotes <- c("remotes", "caret", "dplyr", "tidyr", "rvest", "rsample", "readr", "quantmod",
"httr", "tibble", "stringr", "neuralnet", "nnet", "ggplot2", "ModelMetrics",
"beepr", "purrr", "plotly", "pROC", "ROCR", "kableExtra", "glmnet", "valorant", 'mlflow')
for (pacote in pacotes) {
if (!require(pacote, character.only = TRUE)) {
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github('Juniorffonseca/r-pacote-valorant')
if (!require(pacote, character.only = TRUE)) {
stop(paste("Pacote", pacote, "não encontrado"))
}
}
}
# alterar caminho da variável de ambiente do python
Sys.setenv(MLFLOW_BIN="./venv/Scripts/mlflow")
# alterar caminho da variável de ambiente do python
Sys.setenv(MLFLOW_PYTHON_BIN="./venv/Scripts/python")
# Carregando os dados --------------------------------------------------------------------------------------
jogos <- read.csv2('csv/partidas_teste_10_04_2023.csv') %>% dplyr::select(-X)
jogos$ganhador <- as.factor(jogos$ganhador)
s <- 281768
set.seed(s-1) #10679
data_split <- initial_split(jogos, prop = 0.7, strata = 'ganhador')
training_data <- training(data_split)
test_data <- testing(data_split)
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
test_data$ganhador <- as.factor(test_data$ganhador)
training_data$ganhador <- as.factor(training_data$ganhador)
mlflow_set_tracking_uri('http://localhost:5000') # define a URI do servidor de rastreamento
mlflow_create_experiment('rede_neural') # define o nome do experimento
mlflow_set_tracking_uri('http://localhost:5000') # define a URI do servidor de rastreamento
mlflow_create_experiment('rede_neural') # define o nome do experimento
mlflow_ui()
load('rede_neural_10_04_2023.rda')
predictions <- predict(n, test_data)
# Crie uma matriz de design numérica a partir dos dados de teste
test_design <- model.matrix(~ ., data = test_data)
# Calcule as previsões usando a matriz de design numérica
predictions <- predict(n, newdata = test_design)
# Converta as respostas em uma forma numérica
response_numeric <- as.numeric(as.character(test_data$ganhador))
# Calcule o MSE usando as previsões e as respostas numéricas
mse <- mean((response_numeric - predictions)^2)
# Salve o modelo como um artefato no servidor MLflow
mlflow_log_param("hidden_n", 15)
mlflow_log_metric("mse", mse)
mlflow_log_artifact("rede_neural_10_04_2023.rda", artifact_path = "n.rda")
?mlflow_log_model
mlflow_log_model('rede_neural_10_04_2023.rda', artifact_path = "n.rda")
mlflow_log_model(n, artifact_path = "n.rda")
