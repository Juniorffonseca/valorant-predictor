rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 20),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 10),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 10, 20),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 10, 10),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 10, 10, 10, 10),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
acharseed <- function(seed){
set.seed(seed)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(60,60),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
}
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 20, 40, 80),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 20, 40),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 20, 40),
err.fct = "sse",
linear.output = F,
threshold = 1.5,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 20, 40),
err.fct = "sse",
linear.output = F,
threshold = 2.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 20, 40),
err.fct = "sse",
linear.output = F,
threshold = 3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 20, 40),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(20, 20, 40),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(15, 20, 40),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(40, 20, 40),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(9, 20, 40),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(5, 20, 40),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 20, 40),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 1000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
acharseed <- function(seed){
set.seed(seed)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(60,60),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
}
acharseed <- function(seed){
set.seed(seed)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 20, 40),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
}
s <- 1
while ( i < 0.67) {
acharseed(s)
s <- s + 1
}
while ( i < 0.65) {
acharseed(s)
s <- s + 1
}
s <- 1
while ( i < 0.65) {
acharseed(s)
s <- s + 1
}
s <- 1
while ( i < 0.64) {
acharseed(s)
s <- s + 1
}
# Atualizando a seed para achar a melhor neuralnetwork -----------------------------------------------------
#set.seed(4264)
set.seed(120)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(50,50),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 100)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 20, 40),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 100)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.67) {
acharnn()
}
while ( i < 0.67) {
acharnn()
print(i)
}
while ( i < 0.67) {
acharnn()
}
while ( i < 0.655) {
acharnn()
}
#save(n, file ='model_nnet.rda')
save(n, file ='model_2_nnet.rda')
test_data$ganhador <- as.factor(test_data$ganhador)
# Atualizando a seed para achar a melhor neuralnetwork -----------------------------------------------------
#set.seed(4264)
set.seed(120)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
View(predictVstest)
predictVstest <- cbind(test_data, Predict$net.result)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 20, 40),
err.fct = "sse",
linear.output = F,
threshold = 2,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 100)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.655) {
acharnn()
}
#save(n, file ='model_nnet.rda')
save(n, file ='model_2_nnet.rda') #2991
