# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
testando <- partidas[partidas[[1]]$Player == 'aspas']
testando <- partidas[partidas[[1]]$Player == 'aspas',]
testando <- partidas[partidas[[1]]$Player == 'aspas']
partidas[partidas[[1]]$Player == 'aspas']
partidas[partidas[[1]]$Player == 'a']
partidas[[1]]
partidas[[1]]$Player == 'grubinho'
partidas[partidas[[1]]]$Player == 'grubinho'
partidas[partidas[[1]]$Player == 'grubinho']
testando <- partidas[[1]]$Player == 'grubinho'
testando <- partidas[partidas[[1]]$Player == 'grubinho']
View(testando)
testando[[2]]
testando <- partidas[partidas[[1]]$Team == 'loud']
testando <- partidas[partidas[[1]]$Team == 'Loud']
testando <- partidas[partidas[[1]]$Team == 'OPTC']
testando <- partidas[partidas[[1]]$Team == 'DSG']
rm(historico, i, m, n)
m <- 1
buscaJogador <- function(){
for(i in partidas){
testando <- partidas[partidas[[m]]$Player == 'grubinho']
m = m + 1
}
}
buscaJogador()
buscaJogador <- function(jogador){
for(i in partidas){
testando <- partidas[partidas[[m]]$Player == jogador]
m = m + 1
}
}
buscaJogador('grubinho')
buscaJogador <- function(jogador){
for(i in partidas[[]]){
testando <- partidas[partidas[[m]]$Player == jogador]
m = m + 1
}
}
buscaJogador('grubinho')
count(partidas)
length(partidas)
buscaJogador <- function(jogador){
while(i < length(partidas)){
testando <- partidas[partidas[[m]]$Player == jogador]
m = m + 1
}
}
buscaJogador('grubinho')
i <- 1
buscaJogador <- function(jogador){
while(i < length(partidas)){
testando <- partidas[partidas[[m]]$Player == jogador]
m = m + 1
}
}
buscaJogador('grubinho')
partidas[partidas[[1]]
]
partidas[partidas[[m]]$Player == 'teste']
partidas[[1]]$Player
partidas[[1]]$Player[1]
n <- 1
buscaJogador <- function(jogador){
while(i < length(partidas)){
testando <- partidas[partidas[[m]]$Player[n] == jogador]
m = m + 1
n = n + 1
}
}
buscaJogador('grubinho')
partidas[partidas[[m]]$Player[n] == 'teste']
partidas[partidas[[m]]$Player[n] == 'grubinho']
jogador <- 'grubinho'
partidas[partidas[[m]]$Player[n] == jogador]
while(i < length(partidas)){
testando <- partidas[partidas[[m]]$Player[n] == jogador]
m = m + 1
n = n + 1
}
View(testando)
testando <- list()
while(i < length(partidas)){
testando[[length(testando)+1]] <- partidas[partidas[[m]]$Player[n] == jogador]
m = m + 1
n = n + 1
}
i <- 1
m <- 1
n <- 1
testando <- list()
while(i < length(partidas)){
testando[[length(testando)+1]] <- partidas[partidas[[m]]$Player[n] == jogador]
m = m + 1
n = n + 1
}
View(testando)
testando <- list()
i <- 1
m <- 1
n <- 1
testando <- list()
partidas[[1]]$Player
partidas[[1]]$Player[1]
partidas[[2]]$Player[1]
partidas[[1]]$Player[10]
partidas[[1]]$Player[9]
partidas[[1]]$Player[11]
partidas[[1]]$Player[10]
while(i < length(partidas)){
testando[[length(testando)+1]] <- partidas[partidas[[m]]$Player[n] == jogador]
ifelse(n = 10, n = 0)
m = m + 1
n = n + 1
}
while(i < length(partidas)){
testando[[length(testando)+1]] <- partidas[partidas[[m]]$Player[n] == jogador]
ifelse(n == 10, n = 0)
m = m + 1
n = n + 1
}
n = n
n
while(i < length(partidas)){
testando[[length(testando)+1]] <- partidas[partidas[[m]]$Player[n] == jogador]
ifelse(n == 10, n = 0, n = n)
m = m + 1
n = n + 1
}
?ifelse
while(i < length(partidas)){
testando[[length(testando)+1]] <- partidas[partidas[[m]]$Player[n] == jogador]
ifelse(n == 10, n <- 0, n = n)
m = m + 1
n = n + 1
}
while(i < length(partidas)){
testando[[length(testando)+1]] <- partidas[partidas[[m]]$Player[n] == jogador]
ifelse(n == 10, n = 0, n = n)
m = m + 1
n = n + 1
}
View(testando)
i <- 1
m <- 1
n <- 1
testando <- list()
while(i < length(partidas)){
testando[[length(testando)+1]] <- partidas[partidas[[m]]$Player[n] == jogador]
ifelse(n == 10, n = 0, n = n)
m = m + 1
n = n + 1
}
while(i < length(partidas)){
testando[[length(testando)+1]] <- partidas[partidas[[m]]$Player[n] == jogador]
ifelse(n == 10, n <- 0, n <- n)
m = m + 1
n = n + 1
}
i <- 1
m <- 1
n <- 1
testando <- list()
while(i < length(partidas)){
testando[[length(testando)+1]] <- partidas[partidas[[m]]$Player[n] == jogador]
ifelse(n == 10, n <- 0, n <- n)
m = m + 1
n = n + 1
}
View(testando)
i <- 1
m <- 1
n <- 1
testando <- list()
partidas[partidas[[m]]$Player[n] == jogador]
partidas[partidas[[m]]$Player[n] === jogador]
partidas[partidas[[m]]$Player[n] = jogador]
partidas[[m]]$Player[n] == jogador
partidas[[m]]$Player[n] == jogador
partidas[[m]]$Player[2] == jogador
partidas[[m]]$Player[n]
partidas[[m]][n]
partidas[[m]]
partidas[[m]][n]
partidas[[m]]$Player
partidas[[m]][n]
partidas[[m]][2]
partidas[[]][2]
partidas[][2]
partidas[][1]
partidas[][[1]
]
partidas[][[1]]
partidas[][[1,]]
partidas[1][[1]]
partidas[1,][[1]]
partidas[1][[1]][1]
partidas[1][[1]][2]
partidas[[1]][1]
partidas[[1]][2]
partidas[[1]][]
partidas[[1]][]
partidas[[1]][][1]
partidas[[1[1]]][]
partidas[[1]]
partidas[partidas[[1]]$,]
partidas[partidas[[1]]$]
partidas[[1]]$
partidas[[1]][2]
partidas[[1]][[1]]
partidas[[1]][[2]]
partidas[[1]][[3]]
View(partidas)
historico <- read.csv2('csv/historico.csv') %>% dplyr::select(-X)
View(historico)
historico[1]
historico[[1]
]
historico[1][1]
historico[[1]][[1]]
historico[[1]][[2]]
historico[[2]][[1]]
historico[1]
historico[1,]
partidas[[1]]
partidas[[1]][1]
partidas[[1]][1,]
partidas[[1]][2,]
while(i < length(partidas)){
if(partidas[[m]]$Player[n] == jogador)
testando[[length(testando)+1]] <- partidas[[m]][n,]
ifelse(n == 10, n <- 0, n <- n)
m = m + 1
n = n + 1
}
View(testando)
i <- 1
m <- 1
n <- 1
testando <- list()
while(i < length(partidas)){
if(partidas[[m]]$Player[n] == jogador)
testando[[length(testando)+1]] <- partidas[[m]][n,]
if(n == 10){n = 0}
m = m + 1
n = n + 1
}
testando
View(historico)
a <- na.omit(historico)
View(a)
View(a)
rm(a)
historico_sem_formatar <- read.csv2('csv/historico_sem_formatar.csv')
View(historico_sem_formatar)
dff <- historico_sem_formatar %>% map_df(as_tibble)
historico_sem_formatar <- dplyr::select(historico_sem_formatar, -X)
View(historico_sem_formatar)
View(historico_sem_formatar)
historico_sem_formatar
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
dff <- historico_sem_formatar %>% map_df(as_tibble)
?map_df
as_tibble
?as_tibble
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
dff <- t(historico_sem_formatar)
View(dff)
dff2 <- dff %>% map_df(as_tibble)
View(dff2)
while(i < length(partidas)){
if(partidas[[m]]$Player[n] == jogador)
testando[[length(testando)+1]] <- partidas[[m]][n,]
if(n == 10){n = 0}
m = m + 1
n = n + 1
}
View(partidas)
for (i in a[,]){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl(a[m,])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
a <- read.csv2('csv/a.csv') %>% dplyr::select(-X)
# Script para tentar pegar todas as partidas do cenário de valorant que já tiveram até agora!
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
a <- read.csv2('csv/a.csv') %>% dplyr::select(-X)
# Criando função sem o placar para tentar evitar perca de dados
catalogarporUrl_sem_placar <- function (string){
tryCatch(
{
info <- read_html(string) %>%
html_nodes("table") %>%
html_table()
info <- rbind(info[[3]], info[[4]])
colnames(info) <- c('jogador', 'time', 'R', 'ACS', 'K', 'D', 'A', '+/-', 'KAST', 'ADR', 'HS%', 'FK', 'FD', 'z')
info <- select(info, 'jogador', 'R', 'ACS', 'K', 'D', 'A', 'KAST', 'ADR')
info$R <- substr(info$R, 1, 4)
info$ACS <- substr(info$ACS, 1, 3)
info$K <- substr(info$K, 1, 2)
info$D <- str_replace_all(info$D, '\t', '') %>%
str_replace_all('\n', ' ') %>%
str_replace_all('/  ', '')
info$D <- substr(info$D, 1, 2)
info$A <- substr(info$A, 1, 2)
info$KAST <- substr(info$KAST, 1, 3)
info$ADR <- substr(info$ADR, 1, 3)
info <- separate(info, 'jogador', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
return(info)
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
m <- 1
dff <- list()
for (i in a[,]){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl(a[m,])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
for (i in a[,]){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl_sem_placar(a[m,])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
View(dff)
m <- 1
dff <- list()
for (i in a[,]){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl_sem_placar(a[m,])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
View(dff)
for (i in a[,]){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl_sem_placar(a[m,])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
View(dff)
write.csv2(dff, 'csv/historico_a.csv')
View(dff)
a[1]
dff[1]
dff[2]
dff[[]]$A
dff[][]
dff[]
dff[dff[]]
teste <- unlist(df)
teste <- unlist(dff)
teste
teste[1]
teste[2]
teste[3]
teste[5]
teste[500]
dff2 <- dff %>% map_df(as_tibble)
View(dff2)
dff2
dff3 <- as.list(dff2)
View(dff3)
dff3 <- dff2 %>% map_df(as_tibble)
View(dff3)
?map_df
?as_tibble
rm(dff3)
View(dff)
dff[212]
dff2$Player == 'Ciko'
dff[[1]][1,]
dff[[1]][1,]$Player == 'grubinho'
?select
select(dff2, dff2$Player == 'grubinho')
filter(dff2, dff2$Player == 'grubinho')
filter(dff2, dff2$Player == 'aspas')
aspas <-filter(dff2, dff2$Player == 'aspas')
View(aspas)
mean(aspas)
mean(aspas$R)
mean(as.numeric(aspas$R))
mean(as.numeric(aspas$ACS))
mean(as.numeric(aspas$ADR))
rnorm(1:5)
x <- 1:5
x
x <- 1:181966
dff3 <- cbind(dff2, x)
View(dff3)
aspas <- filter(dff3, dff3$Player == 'aspas')
View(aspas)
View(aspas)
View(dff3)
dff3[1]
dff3[,1]
dff3[1,]
dff4 <- list()
rm(i)
z <- 1
dff3[1,]
dff3[10,]
dff3[1:10,]
dff3[1:1+10,]
y <- 1
dff3[y:y+10,]
dff3[y:(y+10),]
for(i in dff3){
dff4[[length(dff4)+1]] <- dff3[z:(z+9),]
}
View(dff4)
dff[1]
dff[2]
dff[3]
dff[4]
z <- 1
dff4 <- list()
for(i in dff3){
dff4[[length(dff4)+1]] <- dff3[z:(z+9),]
z+10
}
dff4 <- list()
z <- 1
for(i in dff3){
dff4[[length(dff4)+1]] <- dff3[z:(z+9),]
z = z + 10
}
dff4 <- list()
z <- 1
for(i in dff3[,]){
dff4[[length(dff4)+1]] <- dff3[z:(z+9),]
z = z + 10
}
length(dff3)
count(dff3)
while (z < count(dff3)) {
dff4[[length(dff4)+1]] <- dff3[z:(z+9),]
z = z + 10
}
View(dff4)
dff[4]
dff[3]
dff4[3]
dff4[3100]
dff4[1]
dff4[2]
dff4[3]
dff4[4]
dff4[5]
dff4[6]
dff4[7]
dff4[9]
dff4[10]
dff4[11]
while (z < count(dff3)) {
dff4[[length(dff4)+1]] <- dff3[z:(z+9),]
z = z + 10
}
dff4[18197]
dff4[1]
historico <- read.csv2('csv/historico.csv') %>% dplyr::select(-X)
View(dff2)
View(historico)
write.csv2(dff, 'csv/historico_a.csv')
View(dff)
View(dff4)
write.csv2(dff4, 'csv/historico_a.csv')
write.csv2(dff3, 'csv/historico_b.csv')
