while ( i < 0.8) {
acharseed(s)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
acharseed <- function(seed){
set.seed(seed)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(30, 10, 10, 5, 5),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
s <- 27740
w <- 0.1
while ( i < 0.8) {
acharseed(s)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
acharseed <- function(seed){
set.seed(seed)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(30, 10, 10, 5),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
s <- 27740
w <- 0.1
while ( i < 0.8) {
acharseed(s)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
acharseed <- function(seed){
set.seed(seed)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(30, 10, 10, 10),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
s <- 27740
w <- 0.1
while ( i < 0.8) {
acharseed(s)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
acharseed <- function(seed){
set.seed(seed)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(30, 10, 10),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
s <- 27740
w <- 0.1
while ( i < 0.8) {
acharseed(s)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
s <- 27740
w <- 0.1
while ( i < 0.79) {
acharseed(s)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
# Atualizando a seed para achar a melhor neuralnetwork -------------------------------------------------------
set.seed(27741) #4 #59
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
acharnn <- function(){
n <<- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict <<- compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <<- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
z <<- ifelse(i>z, z <<- i, z <<- z)
print(z)
}
while (i < 0.84) {
acharnn()
}
z <- 0.1
z <- 0.1
acharnn <- function(){
n <<- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 20),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict <<- compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <<- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
z <<- ifelse(i>z, z <<- i, z <<- z)
print(z)
}
while (i < 0.84) {
acharnn()
}
acharnn <- function(){
n <<- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(30, 10, 10),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict <<- compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <<- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
z <<- ifelse(i>z, z <<- i, z <<- z)
print(z)
}
z <- 0.1
while (i < 0.84) {
acharnn()
}
acharnn <- function(){
n <<- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(30, 10, 10),
err.fct = "sse",
linear.output = F,
threshold = 0.1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict <<- compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <<- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
z <<- ifelse(i>z, z <<- i, z <<- z)
print(z)
}
z <- 0.1
while (i < 0.84) {
acharnn()
}
acharnn <- function(){
n <<- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(30, 10, 10),
err.fct = "sse",
linear.output = F,
threshold = 0.9,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict <<- compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <<- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
z <<- ifelse(i>z, z <<- i, z <<- z)
print(z)
}
z <- 0.1
while (i < 0.84) {
acharnn()
}
jogos <- read.csv2('csv/partidas_teste.csv') %>% dplyr::select(time1RND, time2RND, time1R, time2R,
time1ACS, time2ACS, time1KAST, time2KAST,
time1ADR, time2ADR,
ganhador)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(15),
err.fct = "sse",
linear.output = F,
threshold = 0.1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
acharseed <- function(seed){
set.seed(seed)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(30, 10, 10),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
s <- 27740
w <- 0.1
while ( i < 0.79) {
acharseed(s)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
acharseed <- function(seed){
set.seed(seed)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(20, 10, 10),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
s <- 27740
w <- 0.1
while ( i < 0.79) {
acharseed(s)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
acharseed <- function(seed){
set.seed(seed)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
n <- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(10, 10, 10),
err.fct = "sse",
linear.output = F,
threshold = 1,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
s <- 27740
w <- 0.1
while ( i < 0.79) {
acharseed(s)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
# Atualizando a seed para achar a melhor neuralnetwork -------------------------------------------------------
set.seed(27741) #4 #59
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
acharnn <- function(){
n <<- neuralnet(ganhador == 1 ~ .,
data = training_data,
hidden = c(10, 10, 10),
err.fct = "sse",
linear.output = F,
threshold = 0.9,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict <<- compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <<- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
z <<- ifelse(i>z, z <<- i, z <<- z)
print(z)
}
z <- 0.1
while (i < 0.84) {
acharnn()
}
while (i < 0.81) {
acharnn()
}
z <- 0.1
while (i < 0.81) {
acharnn()
}
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
