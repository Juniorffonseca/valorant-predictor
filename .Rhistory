df %>% mutate(partida = as.character(partida))
})
previsoes_lista <- lapply(previsoes_lista, function(df) {
df %>% mutate(X = as.character(partida))
})
previsoes_lista <- lapply(previsoes_lista, function(df) {
df %>% mutate(X = as.character(X))
})
previsoes <- bind_rows(previsoes_lista)
View(previsoes)
#Plot distribuição
plot_ly(data = previsoes, x = ~prev, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 4)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
#Plot distribuição
plot_ly(data = previsoes, x = ~V1_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 4)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
#Plot distribuição
plot_ly(data = previsoes, x = ~V1_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 4)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 50, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
#install_github('Juniorffonseca/r-pacote-valorant')
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(pROC)
library(ROCR)
library(kableExtra)
library(valorant)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date('2023-04-13'), Sys.Date() - 1, by = 'day')
nomes_arquivos <- paste0('csv/previsao_diaria/', format(datas, '%Y-%m-%d'), '_acuracia.csv')
acuracia <- list()
for (arquivo in nomes_arquivos) {
acuracia[[arquivo]] <- possibly(read.csv2, otherwise = NULL)(arquivo)
}
acuracia <- bind_rows(acuracia) %>% select(-X)
acertos <- sum(acuracia$acertos)
erros <- sum(acuracia$erros)
print(acuracia_total <- acertos/(acertos+erros))
acuracia_total_df <- as.data.frame(cbind(acuracia_total, acertos, erros))
View(acuracia_total_df)
write.csv2(acuracia_total_df, 'csv/acuracia_total.csv')
taskscheduleR:::taskschedulerAddin()
# Instalando (se necessário) e carregando pacotes ----------------------------------------------------------
remotes::install_github('Juniorffonseca/r-pacote-valorant')
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(plotly)
library(pROC)
library(ROCR)
library(kableExtra)
library(glmnet)
library(valorant)
setwd('C:/Users/anonb/Documents/TCC_Pós/Scripts')
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date('2023-04-11'), Sys.Date() - 1, by = 'day')
nomes_arquivos <- paste0('csv/previsao_diaria/', format(datas, '%Y-%m-%d'), '_previsoes.csv')
previsoes_lista <- list()
for (arquivo in nomes_arquivos) {
previsoes_lista[[arquivo]] <- possibly(read.csv2, otherwise = NULL)(arquivo)
}
previsoes_lista <- lapply(previsoes_lista, function(df) {
df %>% mutate(X = as.character(X))
})
previsoes <- bind_rows(previsoes_lista)
#Plot distribuição
plot_ly(data = previsoes, x = ~V1_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 4)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 50, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
# Plot distribuição das probabilidades por densidade
ggplot(data = predictVstest, aes(x = previsao, fill = ganhador)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c('red', 'green')) +
labs(x = 'Porcentagem', y = 'Densidade', fill = 'Ganhador') +
theme_bw()
View(previsoes)
previsoes$V1_n <- previsoes$V1_n / 100
View(previsoes)
previsoes$V2_n <- previsoes$V2_n / 100
#Plot distribuição
plot_ly(data = previsoes, x = ~V1_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 4)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 50, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
# Plot distribuição das probabilidades por densidade
ggplot(data = predictVstest, aes(x = previsao, fill = ganhador)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c('red', 'green')) +
labs(x = 'Porcentagem', y = 'Densidade', fill = 'Ganhador') +
theme_bw()
#Plot distribuição
plot_ly(data = previsoes, x = ~V1_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 4)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
# Plot distribuição das probabilidades por densidade
ggplot(data = previsoes, aes(x = prev, fill = ganhador)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c('red', 'green')) +
labs(x = 'Porcentagem', y = 'Densidade', fill = 'Ganhador') +
theme_bw()
# Plot distribuição das probabilidades por densidade
ggplot(data = previsoes, aes(x = V1_n, fill = ganhador)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c('red', 'green')) +
labs(x = 'Porcentagem', y = 'Densidade', fill = 'Ganhador') +
theme_bw()
previsoes$ganhador <- as.factor(previsoes$ganhador)
#Plot distribuição
plot_ly(data = previsoes, x = ~V1_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 4)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
# Plot distribuição das probabilidades por densidade
ggplot(data = previsoes, aes(x = V1_n, fill = ganhador)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c('red', 'green')) +
labs(x = 'Porcentagem', y = 'Densidade', fill = 'Ganhador') +
theme_bw()
#Plot distribuição
plot_ly(data = previsoes, x = ~V1_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 4)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
#Plot distribuição
plot_ly(data = previsoes, x = ~V1_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 2)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
#Plot distribuição
plot_ly(data = previsoes, x = ~V1_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 3)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
#Plot distribuição
plot_ly(data = previsoes, x = ~V1_n + V2_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 3)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
#Plot distribuição
plot_ly(data = previsoes, x = ~V2_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 3)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
#Plot distribuição
plot_ly(data = previsoes, x = ~V1_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 3)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
# Plot distribuição das probabilidades por densidade
ggplot(data = previsoes, aes(x = V1_n, fill = ganhador)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c('red', 'green')) +
labs(x = 'Porcentagem', y = 'Densidade', fill = 'Ganhador') +
theme_bw()
# Plot distribuição das probabilidades por densidade
ggplot(data = previsoes, aes(x = V2_n, fill = ganhador)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c('red', 'green')) +
labs(x = 'Porcentagem', y = 'Densidade', fill = 'Ganhador') +
theme_bw()
# Plot distribuição das probabilidades por densidade
ggplot(data = previsoes, aes(x = V1_n, fill = ganhador)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c('red', 'green')) +
labs(x = 'Porcentagem', y = 'Densidade', fill = 'Ganhador') +
theme_bw()
View(previsoes)
previsoes <- bind_rows(previsoes_lista)
previsoes$ganhador <- as.factor(previsoes$ganhador)
#Plot distribuição
plot_ly(data = previsoes, x = ~V1_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 3)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 50, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
#Plot distribuição
plot_ly(data = previsoes, x = ~V1_n, y = ~ganhador,
color = ~factor(ganhador), colors = c('red', 'green'), type = 'scatter',
mode = 'markers', marker = list(size = 3)) %>%
layout(xaxis = list(title = 'Porcentagem'), yaxis = list(title = 'Ganhador'),
legend = list(title = 'Ganhador', font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = 'line', x0 = 50, x1 = 50, y0 = 0, y1 = 1,
line = list(color = 'gray', width = 2))))
# Plot distribuição das probabilidades por densidade
ggplot(data = previsoes, aes(x = V1_n, fill = ganhador)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c('red', 'green')) +
labs(x = 'Porcentagem', y = 'Densidade', fill = 'Ganhador') +
theme_bw()
View(previsoes)
odds <- read_html(previsoes$b[1])
odds <- read_html(previsoes$b[1]) %>% html_nodes('div.match-bet-item-half')
View(odds)
odds <- read_html(previsoes$b[1]) %>% html_nodes('div.match-bet-item-half') %>% html_text()
odds
previsoes$b[1]
odds <- read_html(previsoes$b[1]) %>% html_nodes('div.match-bet-item-half') %>% html_text() %>%
str_replace_all('\t', '') %>% str_replace_all('\n', '')
odds
odds <- read_html(previsoes$b[1]) %>% html_nodes('div.match-bet-item-half') %>% html_text() %>%
str_replace_all('\t', '') %>% str_replace_all('\n', '') %>% .[1]
odds
odds <- read_html(previsoes$b[1]) %>% html_nodes('div.match-bet-item-half') %>% html_text() %>%
str_replace_all('\t', '') %>% str_replace_all('\n', '') %>% .[1] %>% gsub(".*?(\\d+\\.\\d+).*", "\\1", .)
for (i in 1:nrow(previsoes)) {
url <- previsoes$b[i]
odds <- read_html(url) %>%
html_nodes('div.match-bet-item-half') %>%
html_text() %>%
str_replace_all('\t', '') %>%
str_replace_all('\n', '') %>%
.[1] %>%
gsub(".*?(\\d+\\.\\d+).*", "\\1", .)
previsoes <- previsoes %>% mutate(odds = odds)
}
View(previsoes)
previsoes <- bind_rows(previsoes_lista)
previsoes$ganhador <- as.factor(previsoes$ganhador)
# Loop através das URLs em previsoes$b e extrai as odds
for (i in 1:nrow(previsoes)) {
url <- previsoes$b[i]
odds <- read_html(url) %>%
html_nodes('div.match-bet-item-half') %>%
html_text() %>%
str_replace_all('\t', '') %>%
str_replace_all('\n', '') %>%
.[1] %>%
gsub(".*?(\\d+\\.\\d+).*", "\\1", .)
previsoes$odds[i] <- odds
}
View(previsoes)
previsoes$prev <- as.factor(previsoes$prev)
acertos <- previsoes %>% filter(ganhador == prev)
View(acertos)
erros <- previsoes %>% filter(ganhador != prev)
View(erros)
# Definir o valor da aposta
valor_aposta <- 5
# Calcular o lucro ou prejuízo de cada aposta
previsoes <- previsoes %>%
mutate(lucro = ifelse(ganhador == prev, valor_aposta * (odds - 1), -valor_aposta))
# Somar os valores de lucro para determinar o resultado geral
resultado <- sum(previsoes$lucro)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Calcular o lucro ou prejuízo de cada aposta
previsoes <- previsoes %>%
mutate(lucro = ifelse(ganhador == prev, valor_aposta * (as.numeric(odds) - 1), -valor_aposta))
# Somar os valores de lucro para determinar o resultado geral
resultado <- sum(previsoes$lucro)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Definir o valor da aposta
valor_aposta <- 5
# Calcular o lucro ou prejuízo de cada aposta, ignorando valores NA nas odds
previsoes <- previsoes %>%
mutate(lucro = ifelse(is.na(odds), NA, ifelse(ganhador == prev, valor_aposta * (odds - 1), -valor_aposta)))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Definir o valor da aposta
valor_aposta <- 5
# Calcular o lucro ou prejuízo de cada aposta, ignorando valores NA nas odds
previsoes <- previsoes %>%
mutate(lucro = ifelse(is.na(odds), NA, ifelse(ganhador == prev, valor_aposta * (as.numeric(odds) - 1), -valor_aposta)))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
View(previsoes)
# Definir o valor da aposta
valor_aposta <- 10
# Calcular o lucro ou prejuízo de cada aposta, ignorando valores NA nas odds
previsoes <- previsoes %>%
mutate(lucro = ifelse(is.na(odds), NA, ifelse(ganhador == prev, valor_aposta * (as.numeric(odds) - 1), -valor_aposta)))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Definir o valor mínimo de probabilidade para considerar uma aposta
prob_minima <- 0.7
# Calcular o lucro ou prejuízo de cada aposta, considerando apenas previsões com probabilidade acima da prob_minima
previsoes <- previsoes %>%
mutate(lucro = ifelse((ganhador == prev) & (V1_n > prob_minima | V2_n > prob_minima), valor_aposta * (as.numeric(odds) - 1), -valor_aposta))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Definir o valor mínimo de probabilidade para considerar uma aposta
prob_minima <- 0.6
# Calcular o lucro ou prejuízo de cada aposta, considerando apenas previsões com probabilidade acima da prob_minima
previsoes <- previsoes %>%
mutate(lucro = ifelse((ganhador == prev) & (V1_n > prob_minima | V2_n > prob_minima), valor_aposta * (as.numeric(odds) - 1), -valor_aposta))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Definir o valor mínimo de probabilidade para considerar uma aposta
prob_minima <- 0.8
# Calcular o lucro ou prejuízo de cada aposta, considerando apenas previsões com probabilidade acima da prob_minima
previsoes <- previsoes %>%
mutate(lucro = ifelse((ganhador == prev) & (V1_n > prob_minima | V2_n > prob_minima), valor_aposta * (as.numeric(odds) - 1), -valor_aposta))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Definir o valor mínimo de probabilidade para considerar uma aposta
prob_minima <- 0.7
# Calcular o lucro ou prejuízo de cada aposta, considerando apenas previsões com probabilidade acima da prob_minima e que estão corretas
previsoes <- previsoes %>%
mutate(lucro = ifelse((V1_n > prob_minima & ganhador == 1) | (V2_n > prob_minima & ganhador == 2), valor_aposta * (as.numeric(odds) - 1), -valor_aposta))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Definir o valor mínimo de probabilidade para considerar uma aposta
prob_minima <- 0.6
# Calcular o lucro ou prejuízo de cada aposta, considerando apenas previsões com probabilidade acima da prob_minima e que estão corretas
previsoes <- previsoes %>%
mutate(lucro = ifelse((V1_n > prob_minima & ganhador == 1) | (V2_n > prob_minima & ganhador == 2), valor_aposta * (as.numeric(odds) - 1), -valor_aposta))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Definir o valor mínimo de probabilidade para considerar uma aposta
prob_minima <- 0.7
# Converter a coluna odds em números
previsoes$odds <- as.numeric(previsoes$odds)
# Calcular o lucro ou prejuízo de cada aposta, considerando apenas previsões com probabilidade acima da prob_minima e que estão corretas
previsoes <- previsoes %>%
mutate(lucro = ifelse((V1_n > prob_minima & ganhador == 1 & prev == 1) | (V2_n > prob_minima & ganhador == 2 & prev == 2), valor_aposta * (odds - 1), -valor_aposta))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Definir o valor mínimo de probabilidade para considerar uma aposta
prob_minima <- 0.5
# Converter a coluna odds em números
previsoes$odds <- as.numeric(previsoes$odds)
# Calcular o lucro ou prejuízo de cada aposta, considerando apenas previsões com probabilidade acima da prob_minima e que estão corretas
previsoes <- previsoes %>%
mutate(lucro = ifelse((V1_n > prob_minima & ganhador == 1 & prev == 1) | (V2_n > prob_minima & ganhador == 2 & prev == 2), valor_aposta * (odds - 1), -valor_aposta))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Definir o valor mínimo de probabilidade para considerar uma aposta
prob_minima <- 0.7
# Converter a coluna odds em números
previsoes$odds <- as.numeric(previsoes$odds)
# Calcular o lucro ou prejuízo de cada aposta, considerando apenas previsões com probabilidade acima da prob_minima e que estão corretas
previsoes <- previsoes %>%
mutate(lucro = ifelse((V1_n > prob_minima & ganhador == 1 & prev == 1) | (V2_n > prob_minima & ganhador == 2 & prev == 2), valor_aposta * (odds - 1), -valor_aposta))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Definir o valor mínimo de probabilidade para considerar uma aposta
prob_minima <- 70
# Converter a coluna odds em números
previsoes$odds <- as.numeric(previsoes$odds)
# Calcular o lucro ou prejuízo de cada aposta, considerando apenas previsões com probabilidade acima da prob_minima e que estão corretas
previsoes <- previsoes %>%
mutate(lucro = ifelse((V1_n > prob_minima & ganhador == 1 & prev == 1) | (V2_n > prob_minima & ganhador == 2 & prev == 2), valor_aposta * (odds - 1), -valor_aposta))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Definir o valor mínimo de probabilidade para considerar uma aposta
prob_minima <- 60
# Converter a coluna odds em números
previsoes$odds <- as.numeric(previsoes$odds)
# Calcular o lucro ou prejuízo de cada aposta, considerando apenas previsões com probabilidade acima da prob_minima e que estão corretas
previsoes <- previsoes %>%
mutate(lucro = ifelse((V1_n > prob_minima & ganhador == 1 & prev == 1) | (V2_n > prob_minima & ganhador == 2 & prev == 2), valor_aposta * (odds - 1), -valor_aposta))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Definir o valor mínimo de probabilidade para considerar uma aposta
prob_minima <- 40
# Converter a coluna odds em números
previsoes$odds <- as.numeric(previsoes$odds)
# Calcular o lucro ou prejuízo de cada aposta, considerando apenas previsões com probabilidade acima da prob_minima e que estão corretas
previsoes <- previsoes %>%
mutate(lucro = ifelse((V1_n > prob_minima & ganhador == 1 & prev == 1) | (V2_n > prob_minima & ganhador == 2 & prev == 2), valor_aposta * (odds - 1), -valor_aposta))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Definir o valor mínimo de probabilidade para considerar uma aposta
prob_minima <- 70
# Converter a coluna odds em números
previsoes$odds <- as.numeric(previsoes$odds)
# Calcular o lucro ou prejuízo de cada aposta, considerando apenas previsões com probabilidade acima da prob_minima e que estão corretas
previsoes <- previsoes %>%
mutate(V1_n_decimal = V1_n * 0.01,
V2_n_decimal = V2_n * 0.01,
lucro = ifelse((V1_n_decimal > prob_minima & ganhador == 1 & prev == 1) | (V2_n_decimal > prob_minima & ganhador == 2 & prev == 2), valor_aposta * (odds - 1), -valor_aposta))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
# Definir o valor mínimo de probabilidade para considerar uma aposta
prob_minima <- 0.7
# Converter a coluna odds em números
previsoes$odds <- as.numeric(previsoes$odds)
# Calcular o lucro ou prejuízo de cada aposta, considerando apenas previsões com probabilidade acima da prob_minima e que estão corretas
previsoes <- previsoes %>%
mutate(lucro = ifelse((V1_n > prob_minima*100 & ganhador == 1 & prev == 1) | (V2_n > prob_minima*100 & ganhador == 2 & prev == 2), valor_aposta * (odds - 1), -valor_aposta))
# Calcular o resultado total das apostas, ignorando valores NA na coluna lucro
resultado <- sum(previsoes$lucro, na.rm = TRUE)
# Imprimir o resultado
cat("Resultado total das apostas: R$", resultado, "\n")
View(previsoes)
