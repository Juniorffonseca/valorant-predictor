# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
max_neurons <- 20
# Cria uma grade de valores para o número de neurônios na primeira camada
grid <- expand.grid(size = seq(1, max_neurons))
# Define os parâmetros de treinamento da rede neural
train_control <- trainControl(method = "cv", number = 5)
# Realiza a validação cruzada para determinar o número ideal de neurônios
set.seed(123)
cv_results <- train(formula,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
?train
cv_results <- train(form = formula,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
cv_results <- train(formula,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
formula <- 'ganhador ~ .'
cv_results <- train(formula,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
formula <- 'ganhador == 1 ~ .'
cv_results <- train(x = .,
y = ganhador,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
cv_results <- train(x = [1:30],
cv_results <- train(x = 1:30,
y = ganhador,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
cv_results <- train(x = time1RND,
y = ganhador,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
cv_results <- train(x = training_data$time1RND,
y = ganhador,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
cv_results <- train(x = 'time1RND',
y = ganhador,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
cv_results <- train(formula,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
cv_results <- train(formula,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
cv_results <- train(formula,
x = training_data,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
cv_results <- train(formula,
x = training_data,
preProcess = T,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
cv_results <- train(ganhador == 1 ~ .,
x = training_data,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
cv_results <- train(ganhador ~ .,
x = training_data,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
cv_results <- train(ganhador == 1 ~ .,
data = training_data,
method = "neuralnet",
tuneGrid = grid,
trControl = train_control)
cv_results <- train(ganhador == 1 ~ .,
data = training_data,
method = "neuralnet",
preProcess = c('center', 'scale'),
tuneGrid = grid,
trControl = train_control)
training_data$ganhador[training_data$ganhador==1] <- 'time1'
training_data$ganhador==1 <- 'time1'
training_data$ganhador[training_data$ganhador==1] <- 'time1'
training_data$ganhador[training_data$ganhador==0] <- 'time2'
View(training_data)
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(valorant)
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date("2023-02-19"), Sys.Date() - 1, by = "day")
nomes_arquivos <- paste0("csv/catalogacao_diaria/", format(datas, "%Y-%m-%d"), "_partidas.csv")
jogos_lista <- list()
for (arquivo in nomes_arquivos) {
jogos_lista[[arquivo]] <- read.csv2(arquivo) %>% select(-X)
}
jogos <- bind_rows(jogos_lista)
jogos$ganhador <- as.factor(jogos$ganhador)
#write.csv2(jogos, 'csv/partidas_teste_2.csv')
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
data_split <- initial_split(jogos, prop = 0.7, strata = "ganhador")
training_data <- training(data_split)
test_data <- testing(data_split)
hidden_n <- c(30)
t <- 1 #thresholder
formula <- 'ganhador == 1 ~ .'
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador[training_data$ganhador==1]
training_data$ganhador[training_data$ganhador==0]
training_data$ganhador[training_data$ganhador==1] <- 'time1'
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(valorant)
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date("2023-02-19"), Sys.Date() - 1, by = "day")
nomes_arquivos <- paste0("csv/catalogacao_diaria/", format(datas, "%Y-%m-%d"), "_partidas.csv")
jogos_lista <- list()
for (arquivo in nomes_arquivos) {
jogos_lista[[arquivo]] <- read.csv2(arquivo) %>% select(-X)
}
jogos <- bind_rows(jogos_lista)
jogos$ganhador <- as.factor(jogos$ganhador)
#write.csv2(jogos, 'csv/partidas_teste_2.csv')
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
data_split <- initial_split(jogos, prop = 0.7, strata = "ganhador")
training_data <- training(data_split)
test_data <- testing(data_split)
hidden_n <- c(30)
t <- 1 #thresholder
formula <- 'ganhador == 1 ~ .'
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador[as.factor(training_data$ganhador==1)] <- 'time1'
View(training_data)
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(valorant)
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date("2023-02-19"), Sys.Date() - 1, by = "day")
nomes_arquivos <- paste0("csv/catalogacao_diaria/", format(datas, "%Y-%m-%d"), "_partidas.csv")
jogos_lista <- list()
for (arquivo in nomes_arquivos) {
jogos_lista[[arquivo]] <- read.csv2(arquivo) %>% select(-X)
}
jogos <- bind_rows(jogos_lista)
jogos$ganhador <- as.factor(jogos$ganhador)
#write.csv2(jogos, 'csv/partidas_teste_2.csv')
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
data_split <- initial_split(jogos, prop = 0.7, strata = "ganhador")
training_data <- training(data_split)
test_data <- testing(data_split)
hidden_n <- c(30)
t <- 1 #thresholder
formula <- 'ganhador == 1 ~ .'
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
class(training_data$ganhador)
class(test_data$ganhador)
cv_results <- train(ganhador == 1 ~ .,
data = training_data,
method = "nnet",
preProcess = c('center', 'scale'),
tuneGrid = grid,
trControl = train_control)
cv_results <- train(ganhador ~ .,
data = training_data,
method = "nnet",
preProcess = c('center', 'scale'),
tuneGrid = grid,
trControl = train_control)
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(valorant)
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date("2023-02-19"), Sys.Date() - 1, by = "day")
nomes_arquivos <- paste0("csv/catalogacao_diaria/", format(datas, "%Y-%m-%d"), "_partidas.csv")
jogos_lista <- list()
for (arquivo in nomes_arquivos) {
jogos_lista[[arquivo]] <- read.csv2(arquivo) %>% select(-X)
}
jogos <- bind_rows(jogos_lista)
jogos$ganhador <- as.factor(jogos$ganhador)
#write.csv2(jogos, 'csv/partidas_teste_2.csv')
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
data_split <- initial_split(jogos, prop = 0.7, strata = "ganhador")
training_data <- training(data_split)
test_data <- testing(data_split)
hidden_n <- c(30)
t <- 1 #thresholder
formula <- 'ganhador == 1 ~ .'
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(formula,
data = training_data,
hidden = hidden_n,
err.fct = "sse",
linear.output = F,
threshold = t,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
#plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 10678 # 8549 = 0.826087
while ( i < 0.78) {
achar_Seed(s, hidden_n, t = 0.9)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
# Atualizando a seed para achar a melhor neuralnetwork ----------------------------------------------------
set.seed(s-1) #4 #59
data_split <- initial_split(jogos, prop = 0.7, strata = "ganhador")
training_data <- training(data_split)
test_data <- testing(data_split)
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
Predict = compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
# Procurando uma rede neural com acuracia a cima de determinado percentual --------------------------------
z <- 0.1
while (i < 0.82) {
achar_Nn(t = 0.9)
}
beep(8)
save(n, file='prototipo_rede_neural_2.rda') #12/03/2023 78/93 base de testes (0.8387% acuracia)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
sum(training_data$ganhador == 1)
sum(training_data$ganhador == 0)
sum(test_data$ganhador == 0)
sum(test_data$ganhador == 1)
View(predictVstest)
View(predictVstest)
beep(8)
beep(8)
beep(8)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
View(jogos)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
F1 <- x$byClass['F1']
e
e
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
#save(n, file ='rede_neural.rda')
#save(n, file='rede_neural_teste.rda')
save(n, file='prototipo_rede_neural.rda') #14/03/2023 81/98 base de testes (0.8265306% acuracia)
write.csv2(jogos, 'csv/partidas_teste.csv')
write.csv2(jogos, 'csv/partidas_teste.csv')
prever('https://www.vlr.gg/167393/loud-vs-fnatic-champions-tour-2023-lock-in-s-o-paulo-gf')
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(valorant)
prever('https://www.vlr.gg/167393/loud-vs-fnatic-champions-tour-2023-lock-in-s-o-paulo-gf')
detach("package:valorant", unload = TRUE)
install_github("Juniorffonseca/r-pacote-valorant")
library(valorant)
prever('https://www.vlr.gg/167393/loud-vs-fnatic-champions-tour-2023-lock-in-s-o-paulo-gf')
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(valorant)
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date("2023-02-19"), Sys.Date() - 1, by = "day")
nomes_arquivos <- paste0("csv/catalogacao_diaria/", format(datas, "%Y-%m-%d"), "_partidas.csv")
jogos_lista <- list()
for (arquivo in nomes_arquivos) {
jogos_lista[[arquivo]] <- read.csv2(arquivo) %>% select(-X)
}
jogos <- bind_rows(jogos_lista)
jogos$ganhador <- as.factor(jogos$ganhador)
#write.csv2(jogos, 'csv/partidas_teste.csv')
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
# Criar uma cópia dos dados originais
jogos_espelho <- jogos
# Espelhar os dados trocando a ordem dos times nas partidas
jogos_espelho <- jogos_espelho %>%
mutate_at(vars(1:15, 16:30), ~ rev(.)) %>%
mutate(ganhador = ifelse(ganhador == 1, 0, 1))
View(jogos_espelho)
View(jogos)
# Criar uma cópia dos dados originais
jogos_espelho <- jogos
# Espelhar os dados trocando a ordem dos times nas partidas
jogos_espelho <- jogos_espelho %>%
mutate_at(vars(2:16, 17:31), ~ rev(.)) %>%
mutate(ganhador = ifelse(ganhador == 1, 0, 1))
View(jogos_espelho)
View(jogos)
