dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Pegando os dados no link da partida ----------------------------------------------------------------------
info <- read_html(link) %>%
html_nodes("table") %>%
html_table()
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
# Time A
#timeA = c('nome1', 'nome2', 'nome3', 'nome4', 'nome5') # se preferir passar de forma manual
timeA <- paste0('\\b', timeA, '\\b')
dados_gerais$timeA <- ifelse(grepl(paste(timeA, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
dados_gerais['nobody.1',]$timeA <- 0
dados_gerais['Laz.1',]$timeA <- 0
# Time B
#timeB = c('nome1', 'nome2', 'nome3', 'nome4', 'nome5') # se preferir passar de forma manual
timeB <- paste0('\\b', timeB, '\\b')
dados_gerais$timeB <- ifelse(grepl(paste(timeB, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
dados_gerais['Shiro.1',]$timeB<- 0
timeA_df <- filter(dados_gerais, dados_gerais$timeA == 1)
timeA_df <- dplyr::select(timeA_df, R, ACS, K.D, KAST, ADR)
timeB_df <- filter(dados_gerais, dados_gerais$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, K.D, KAST, ADR)
if(nrow(timeA_df) == 5 && nrow(timeB_df) == 5){
# Médias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$K.D)
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$K.D)
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
jogos_scale <- read.csv2('csv/df.csv') %>% select(-X, -ganhador)
jogos_scale <- rbind(jogos_scale, partida)
jogos_scale <- scale(jogos_scale)
partida <- jogos_scale[814,]
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR')
previsao <- compute(n, partida)
previsao <- previsao$net.result[1]
partida_reversa <- partida
partida_reversa$time1R <- partida$time2R
partida_reversa$time2R <- partida$time1R
partida_reversa$time1ACS <- partida$time2ACS
partida_reversa$time2ACS <- partida$time1ACS
partida_reversa$time1KAST <- partida$time2KAST
partida_reversa$time2KAST <- partida$time1KAST
partida_reversa$time1KD <- partida$time2KD
partida_reversa$time2KD <- partida$time1KD
partida_reversa$time1ADR <- partida$time2ADR
partida_reversa$time2ADR <- partida$time1ADR
previsao2 <- compute(n, partida_reversa)
previsao2 <- previsao2$net.result[1]
a <- previsao
b <- previsao2
transforma_positivo <- function (x){
y = atan(x) + pi/2
return (y)
}
transforma_probabilidade <- function (y, x){
z = y / (y + x)
w = x / (x + y)
c = as.matrix(c(z,w))
return(c)
}
a <- transforma_positivo(a)
b <- transforma_positivo(b)
previsao <- transforma_probabilidade(a,b)
previsao <- previsao * 100
return(previsao)
}
else{
return('Não foi possível fazer a análise, provavelmente dados de um ou mais jogadores estavam faltantes no site vlr')
}
}
return <- preverResultado(
'https://www.vlr.gg/130685/loud-vs-optic-gaming-valorant-champions-2022-gf'
)
preverResultado <- function(link){
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Pegando os dados no link da partida ----------------------------------------------------------------------
info <- read_html(link) %>%
html_nodes("table") %>%
html_table()
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
# Time A
#timeA = c('nome1', 'nome2', 'nome3', 'nome4', 'nome5') # se preferir passar de forma manual
timeA <- paste0('\\b', timeA, '\\b')
dados_gerais$timeA <- ifelse(grepl(paste(timeA, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
dados_gerais['nobody.1',]$timeA <- 0
dados_gerais['Laz.1',]$timeA <- 0
# Time B
#timeB = c('nome1', 'nome2', 'nome3', 'nome4', 'nome5') # se preferir passar de forma manual
timeB <- paste0('\\b', timeB, '\\b')
dados_gerais$timeB <- ifelse(grepl(paste(timeB, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
dados_gerais['Shiro.1',]$timeB<- 0
timeA_df <- filter(dados_gerais, dados_gerais$timeA == 1)
timeA_df <- dplyr::select(timeA_df, R, ACS, K.D, KAST, ADR)
timeB_df <- filter(dados_gerais, dados_gerais$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, K.D, KAST, ADR)
if(nrow(timeA_df) == 5 && nrow(timeB_df) == 5){
# Médias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$K.D)
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$K.D)
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
jogos_scale <- read.csv2('csv/df.csv') %>% select(-X, -ganhador)
jogos_scale <- rbind(jogos_scale, partida)
jogos_scale <- scale(jogos_scale)
partida <- jogos_scale[814,]
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR')
previsao <- compute(n, partida)
previsao <- previsao$net.result[1]
partida_reversa <- partida
partida_reversa$time1R <- partida$time2R
partida_reversa$time2R <- partida$time1R
partida_reversa$time1ACS <- partida$time2ACS
partida_reversa$time2ACS <- partida$time1ACS
partida_reversa$time1KAST <- partida$time2KAST
partida_reversa$time2KAST <- partida$time1KAST
partida_reversa$time1KD <- partida$time2KD
partida_reversa$time2KD <- partida$time1KD
partida_reversa$time1ADR <- partida$time2ADR
partida_reversa$time2ADR <- partida$time1ADR
previsao2 <- compute(n, partida_reversa)
previsao2 <- previsao2$net.result[1]
a <- previsao
b <- previsao2
transforma_positivo <- function (x){
y = atan(x) + pi/2
return (y)
}
transforma_probabilidade <- function (y, x){
z = y / (y + x)
w = x / (x + y)
c = as.matrix(c(z,w))
return(c)
}
a <- transforma_positivo(a)
b <- transforma_positivo(b)
previsao <- transforma_probabilidade(a,b)
previsao <- previsao * 100
return(previsao)
}
else{
return('Não foi possível fazer a análise, provavelmente dados de um ou mais jogadores estavam faltantes no site vlr')
}
}
return <- preverResultado(
'https://www.vlr.gg/130685/loud-vs-optic-gaming-valorant-champions-2022-gf'
)
dados_gerais <- read.csv2("csv/jogadores.csv")
load(file = "model_nnet.rda")
preverResultado <- function(link){
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Pegando os dados no link da partida ----------------------------------------------------------------------
info <- read_html(link) %>%
html_nodes("table") %>%
html_table()
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
# Time A
#timeA = c('nome1', 'nome2', 'nome3', 'nome4', 'nome5') # se preferir passar de forma manual
timeA <- paste0('\\b', timeA, '\\b')
dados_gerais$timeA <- ifelse(grepl(paste(timeA, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
dados_gerais['nobody.1',]$timeA <- 0
dados_gerais['Laz.1',]$timeA <- 0
# Time B
#timeB = c('nome1', 'nome2', 'nome3', 'nome4', 'nome5') # se preferir passar de forma manual
timeB <- paste0('\\b', timeB, '\\b')
dados_gerais$timeB <- ifelse(grepl(paste(timeB, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
dados_gerais['Shiro.1',]$timeB<- 0
timeA_df <- filter(dados_gerais, dados_gerais$timeA == 1)
timeA_df <- dplyr::select(timeA_df, R, ACS, K.D, KAST, ADR)
timeB_df <- filter(dados_gerais, dados_gerais$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, K.D, KAST, ADR)
if(nrow(timeA_df) == 5 && nrow(timeB_df) == 5){
# Médias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$K.D)
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$K.D)
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
jogos_scale <- read.csv2('csv/df.csv') %>% select(-X, -ganhador)
jogos_scale <- rbind(jogos_scale, partida)
jogos_scale <- scale(jogos_scale)
partida <- jogos_scale[814,]
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR')
previsao <- compute(n, partida)
previsao <- previsao$net.result[1]
partida_reversa <- partida
partida_reversa$time1R <- partida$time2R
partida_reversa$time2R <- partida$time1R
partida_reversa$time1ACS <- partida$time2ACS
partida_reversa$time2ACS <- partida$time1ACS
partida_reversa$time1KAST <- partida$time2KAST
partida_reversa$time2KAST <- partida$time1KAST
partida_reversa$time1KD <- partida$time2KD
partida_reversa$time2KD <- partida$time1KD
partida_reversa$time1ADR <- partida$time2ADR
partida_reversa$time2ADR <- partida$time1ADR
previsao2 <- compute(n, partida_reversa)
previsao2 <- previsao2$net.result[1]
a <- previsao
b <- previsao2
transforma_positivo <- function (x){
y = atan(x) + pi/2
return (y)
}
transforma_probabilidade <- function (y, x){
z = y / (y + x)
w = x / (x + y)
c = as.matrix(c(z,w))
return(c)
}
a <- transforma_positivo(a)
b <- transforma_positivo(b)
previsao <- transforma_probabilidade(a,b)
previsao <- previsao * 100
return(previsao)
}
else{
return('Não foi possível fazer a análise, provavelmente dados de um ou mais jogadores estavam faltantes no site vlr')
}
}
return <- preverResultado(
'https://www.vlr.gg/130685/loud-vs-optic-gaming-valorant-champions-2022-gf'
)
preverResultado <- function(link){
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Pegando os dados no link da partida ----------------------------------------------------------------------
info <- read_html(link) %>%
html_nodes("table") %>%
html_table()
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
# Time A
#timeA = c('nome1', 'nome2', 'nome3', 'nome4', 'nome5') # se preferir passar de forma manual
timeA <- paste0('\\b', timeA, '\\b')
dados_gerais$timeA <- ifelse(grepl(paste(timeA, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
dados_gerais['nobody.1',]$timeA <- 0
dados_gerais['Laz.1',]$timeA <- 0
# Time B
#timeB = c('nome1', 'nome2', 'nome3', 'nome4', 'nome5') # se preferir passar de forma manual
timeB <- paste0('\\b', timeB, '\\b')
dados_gerais$timeB <- ifelse(grepl(paste(timeB, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
dados_gerais['Shiro.1',]$timeB<- 0
timeA_df <- filter(dados_gerais, dados_gerais$timeA == 1)
timeA_df <- dplyr::select(timeA_df, R, ACS, K.D, KAST, ADR)
timeB_df <- filter(dados_gerais, dados_gerais$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, K.D, KAST, ADR)
if(nrow(timeA_df) == 5 && nrow(timeB_df) == 5){
# Médias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$K.D)
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$K.D)
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
jogos_scale <- read.csv2('csv/partidas.csv') %>% select(-X, -ganhador)
jogos_scale <- rbind(jogos_scale, partida)
jogos_scale <- scale(jogos_scale)
partida <- jogos_scale[814,]
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR')
previsao <- compute(n, partida)
previsao <- previsao$net.result[1]
partida_reversa <- partida
partida_reversa$time1R <- partida$time2R
partida_reversa$time2R <- partida$time1R
partida_reversa$time1ACS <- partida$time2ACS
partida_reversa$time2ACS <- partida$time1ACS
partida_reversa$time1KAST <- partida$time2KAST
partida_reversa$time2KAST <- partida$time1KAST
partida_reversa$time1KD <- partida$time2KD
partida_reversa$time2KD <- partida$time1KD
partida_reversa$time1ADR <- partida$time2ADR
partida_reversa$time2ADR <- partida$time1ADR
previsao2 <- compute(n, partida_reversa)
previsao2 <- previsao2$net.result[1]
a <- previsao
b <- previsao2
transforma_positivo <- function (x){
y = atan(x) + pi/2
return (y)
}
transforma_probabilidade <- function (y, x){
z = y / (y + x)
w = x / (x + y)
c = as.matrix(c(z,w))
return(c)
}
a <- transforma_positivo(a)
b <- transforma_positivo(b)
previsao <- transforma_probabilidade(a,b)
previsao <- previsao * 100
return(previsao)
}
else{
return('Não foi possível fazer a análise, provavelmente dados de um ou mais jogadores estavam faltantes no site vlr')
}
}
return <- preverResultado(
'https://www.vlr.gg/130685/loud-vs-optic-gaming-valorant-champions-2022-gf'
)
return
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(caret)
# Carregando o dataframe -----------------------------------------------------------------------------------
jogos <- read.csv2('csv/partidas.csv') %>% dplyr::select(-X)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(6)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
set.seed(3)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
# Matriz de confusão
jogos <- read.csv2('csv/partidas.csv') %>% dplyr::select(-X)
set.seed(3)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
load('model_nnet.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
nn2 <- as.factor(nn2)
confusionMatrix(nn2, test_data$ganhador)
plot(n)
plot(n$result.matrix)
plot(confunsionMatrix(nn2, test_data$ganhador))
plot(confusionMatrix(nn2, test_data$ganhador))
n$result.matrix
plot(nn2, test_data$ganhador)
View(test_data)
plot(nn2, test_data$ganhador, aes())
plot(nn2, test_data$ganhador, geom_point()
)
plot(nn2, test_data$ganhador, geom_bar())
plot(nn2, test_data$ganhador, theme_dark())
historgram(jogos)
histogram(jogos)
histogram(jogos$ganhador)
histogram(training_data$ganhador)
histogram(test_data$ganhador)
jogadores <- read.csv2('csv/jogadores.csv')
jogadores <- read.csv2('csv/jogadores.csv') %>% dplyr::select(-X)
histogram(jogadores$IK)
histogram(jogadores$Rnd)
histogram(jogadores$R)
histogram(jogadores$Rnd)
histogram(jogadores$R)
histogram(jogadores$ACS)
histogram(jogadores$HS.)
histogram(jogadores$KMax)
library(tidyverse)
library(lubridate)
dados <- readr::read_csv2("https://www.gov.br/secretariageral/pt-br/acesso-a-informacao/informacoes-classificadas-e-desclassificadas/Planilha12003a2022.csv", locale = readr::locale(encoding = "latin1")) %>%
mutate(
DATA_PGTO = dmy(`DATA PGTO`),
ANO_MES_DATA = floor_date(DATA_PGTO, unit = "1 month"),
ANO = year(DATA_PGTO),
PRESIDENTE = case_when(
ANO <= 2010 ~ "Lula",
ANO <= 2016 ~ "Dilma",
ANO <= 2018 ~ "Temer",
ANO <= 2022 ~ "Bolsonaro"
)
) %>%
mutate(
VALOR = VALOR %>% str_remove("R\\$ ") %>% parse_number(locale = readr::locale(decimal_mark = ",")),
VALOR_CORRIGIDO = deflateBR::deflate(VALOR, DATA_PGTO, "01/2003", "ipca")
)
rm(nn2, inp, training_data, test_data, Predict, normalizando_test, normalizando_training)
rm(jogadores, jogos, n)
View(dados)
