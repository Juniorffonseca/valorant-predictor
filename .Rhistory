library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(valorant)
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(valorant)
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date("2023-02-19"), Sys.Date() - 1, by = "day")
nomes_arquivos <- paste0("csv/catalogacao_diaria/", format(datas, "%Y-%m-%d"), "_partidas.csv")
jogos_lista <- list()
for (arquivo in nomes_arquivos) {
jogos_lista[[arquivo]] <- read.csv2(arquivo) %>% select(-X)
}
jogos <- bind_rows(jogos_lista)
jogos$ganhador <- as.factor(jogos$ganhador)
#write.csv2(jogos, 'csv/partidas_teste.csv')
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
data_split <- initial_split(jogos, prop = 0.7, strata = "ganhador")
training_data <- training(data_split)
test_data <- testing(data_split)
hidden_n <- c(30)
t <- 1 #thresholder
formula <- 'ganhador == 1 ~ .'
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(formula,
data = training_data,
hidden = hidden_n,
err.fct = "sse",
linear.output = F,
threshold = t,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
#plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 10678 # 8549 = 0.826087
# 9726 = 0.821917
# 7867 11/03 0.80 acuracia
# 7333 12/03 0.83 acuracia 93 partidas
# 10679 13/03 0.8163265 acuracia 98 partidas
w <- 0.1
while ( i < 0.84) {
achar_Seed(s, hidden_n, t = 0.9)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 10678 # 8549 = 0.826087
# 9726 = 0.821917
# 7867 11/03 0.80 acuracia
# 7333 12/03 0.83 acuracia 93 partidas
# 10679 13/03 0.8163265 acuracia 98 partidas
w <- 0.1
while ( i < 0.84) {
achar_Seed(s, hidden_n, t = 0.9)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 10678 # 8549 = 0.826087
# 9726 = 0.821917
# 7867 11/03 0.80 acuracia
# 7333 12/03 0.83 acuracia 93 partidas
# 10679 13/03 0.8163265 acuracia 98 partidas
w <- 0.1
while ( i < 0.84) {
achar_Seed(s, hidden_n, t = 0.9)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(valorant)
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date("2023-02-19"), Sys.Date() - 1, by = "day")
nomes_arquivos <- paste0("csv/catalogacao_diaria/", format(datas, "%Y-%m-%d"), "_partidas.csv")
jogos_lista <- list()
for (arquivo in nomes_arquivos) {
jogos_lista[[arquivo]] <- read.csv2(arquivo) %>% select(-X)
}
jogos <- bind_rows(jogos_lista)
jogos$ganhador <- as.factor(jogos$ganhador)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
data_split <- initial_split(jogos, prop = 0.7, strata = "ganhador")
training_data <- training(data_split)
test_data <- testing(data_split)
hidden_n <- c(30)
#t <- 1 #thresholder
formula <- 'ganhador == 1 ~ .'
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(formula,
data = training_data,
hidden = hidden_n,
err.fct = "sse",
linear.output = F,
threshold = t,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 10678 # 8549 = 0.826087
# 9726 = 0.821917
# 7867 11/03 0.80 acuracia
# 7333 12/03 0.83 acuracia 93 partidas
# 10679 13/03 0.8163265 acuracia 98 partidas
w <- 0.1
while ( i < 0.84) {
achar_Seed(s, hidden_n, t = 0.9)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
i <- 0.1
while ( i < 0.84) {
achar_Seed(s, hidden_n, t = 0.9)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 10678 # 8549 = 0.826087
# Atualizando a seed para achar a melhor neuralnetwork ----------------------------------------------------
set.seed(s-1) #4 #59
data_split <- initial_split(jogos, prop = 0.7, strata = "ganhador")
training_data <- training(data_split)
test_data <- testing(data_split)
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
Predict = compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
# Procurando uma rede neural com acuracia a cima de determinado percentual --------------------------------
z <- 0.1
while (i < 0.83) {
achar_Nn(t = 0.9)
}
while (i < 0.83) {
achar_Nn(t = 0.9)
}
# Procurando uma rede neural com acuracia a cima de determinado percentual --------------------------------
z <- 0.1
while (i < 0.83) {
achar_Nn(t = 0.9)
}
t <- 1 #thresholder
formula <- 'ganhador == 1 ~ .'
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(formula,
data = training_data,
hidden = hidden_n,
err.fct = "sse",
linear.output = F,
threshold = t,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 10678 # 8549 = 0.826087
# 9726 = 0.821917
# 7867 11/03 0.80 acuracia
# 7333 12/03 0.83 acuracia 93 partidas
# 10679 13/03 0.8163265 acuracia 98 partidas
w <- 0.1
while ( i < 0.84) {
achar_Seed(s, hidden_n, t = 0.9)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
# Achar uma boa seed -------------------------------------------------------------------------------------
s <- 10678 # 8549 = 0.826087
# 9726 = 0.821917
# 7867 11/03 0.80 acuracia
# 7333 12/03 0.83 acuracia 93 partidas
# 10679 13/03 0.8163265 acuracia 98 partidas
w <- 0.1
while ( i < 0.79) {
achar_Seed(s, hidden_n, t = 0.9)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(w)
}
# Atualizando a seed para achar a melhor neuralnetwork ----------------------------------------------------
set.seed(s-1) #4 #59
data_split <- initial_split(jogos, prop = 0.7, strata = "ganhador")
training_data <- training(data_split)
test_data <- testing(data_split)
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
Predict = compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
# Procurando uma rede neural com acuracia a cima de determinado percentual --------------------------------
z <- 0.1
while (i < 0.83) {
achar_Nn(t = 0.9)
}
beep(8)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
View(predictVstest)
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(valorant)
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date("2023-02-19"), Sys.Date() - 1, by = "day")
nomes_arquivos <- paste0("csv/catalogacao_diaria/", format(datas, "%Y-%m-%d"), "_partidas.csv")
jogos_lista <- list()
for (arquivo in nomes_arquivos) {
jogos_lista[[arquivo]] <- read.csv2(arquivo) %>% select(-X)
}
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
# Carregando modelo e obtendo os resultados
load('prototipo_rede_neural_2.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
# Carregando modelo e obtendo os resultados
seed(1)
load('prototipo_rede_neural_2.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
# Carregando modelo e obtendo os resultados
seed(5)
load('prototipo_rede_neural_2.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
load('prototipo_rede_neural.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
# Carregando modelo e obtendo os resultados
load('prototipo_rede_neural.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
# Instalando pacotes (se necessário) e carregando ----------------------------------------------------------
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(caret)
library(dplyr)
library(tidyr)
library(rvest)
library(rsample)
library(readr)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(beepr)
library(purrr)
library(valorant)
# Carregando modelo e obtendo os resultados
load('prototipo_rede_neural.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
sum(predictVstest$time1R>predictVstest$time2R)
sum(predictVstest$time1R<predictVstest$time2R)
#Plot distribuição
ggplot(data = previsao, mapping = aes(x = previsao1, y = previsao2, colour = ganhador)) +
geom_tile(aes(fill = ganhador)) +
geom_point() +
theme_bw()
#Plot distribuição
ggplot(data = predictVstest, mapping = aes(x = previsao, y = ganhador, colour = ganhador)) +
geom_tile(aes(fill = ganhador)) +
geom_point() +
theme_bw()
View(predictVstest)
#Plot distribuição
ggplot(data = predictVstest, mapping = aes(x = predict$netresult, y = ganhador, colour = ganhador)) +
geom_tile(aes(fill = ganhador)) +
geom_point() +
theme_bw()
#Plot distribuição
ggplot(data = predictVstest, mapping = aes(x = 'predict$netresult', y = ganhador, colour = ganhador)) +
geom_tile(aes(fill = ganhador)) +
geom_point() +
theme_bw()
histogram(predictVstest$`Predict$net.result`)
histogram(predictVstest$`Predict$net.result`, breaks = 10)
histogram(predictVstest$`Predict$net.result`, breaks = 10)
histogram(predictVstest$`Predict$net.result`, breaks = 20)
histogram(predictVstest$`Predict$net.result`, breaks = 30)
histogram(predictVstest$`Predict$net.result`, breaks = 40)
histogram(predictVstest$`Predict$net.result`, breaks = 100)
histogram(predictVstest$`Predict$net.result`, breaks = 50)
?histogram
ggplot(data = predictVstest, aes(x = 'predict$netresult')) +
geom_histogram(aes(fill = 'ganhador'), binwidth = 0.5) +
scale_fill_manual(values = c("blue", "red"))
ggplot(data = predictVstest, aes(x = as.numeric('predict$netresult'))) +
geom_histogram(aes(fill = 'ganhador'), binwidth = 0.5) +
scale_fill_manual(values = c("blue", "red"))
ggplot(data = predictVstest, aes(x = as.numeric'predict$netresult')) +
ggplot(data = predictVstest, aes(x = 'predict$netresult')) +
geom_histogram(aes(stat = 'count', fill = 'ganhador'), binwidth = 0.5) +
scale_fill_manual(values = c("blue", "red"))
ggplot(data = predictVstest, aes(x = 'predict$netresult')) +
geom_histogram(stat = 'count', aes(fill = 'ganhador'), binwidth = 0.5) +
scale_fill_manual(values = c("blue", "red"))
ggplot(data = predictVstest, aes(x = 'predict$netresult')) +
geom_histogram(stat = 'count', aes(fill = 'ganhador'), width = 0.5) +
scale_fill_manual(values = c("blue", "red"))
