while (i < 0.84) {
achar_Nn(t = 0.9)
}
# Atualizando a seed para achar a melhor neuralnetwork ----------------------------------------------------
set.seed(s-1)
data_split <- initial_split(jogos, prop = 0.7, strata = "ganhador")
training_data <- training(data_split)
test_data <- testing(data_split)
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
Predict = compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
# Procurando uma rede neural com acuracia a cima de determinado percentual --------------------------------
z <- 0.1
while (i < 0.84) {
achar_Nn(t = 0.9)
}
# Matriz de confusão ---------------------------------------------------------------------------------------
jogos <- read.csv2('csv/partidas_teste.csv') %>% dplyr::select(-X)
set.seed(s-1)
data_split <- initial_split(jogos, prop = 0.7, strata = "ganhador")
training_data <- training(data_split)
test_data <- testing(data_split)
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
test_data$ganhador <- as.factor(test_data$ganhador)
# Carregando modelo e obtendo os resultados
load('prototipo_rede_neural.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>0.5, 1, 0)
nn2 <- as.factor(nn2)
x <- caret::confusionMatrix(nn2, test_data$ganhador)
F1 <- x$byClass['F1']
x <- as.data.frame(x$table)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
#Log Loss
logLoss(actual = test_data$ganhador, predicted = Predict$net.result)
#Plot distribuição
ggplot(data = predictVstest, mapping = aes(x = 'predict$netresult', y = ganhador, colour = ganhador)) +
geom_tile(aes(fill = ganhador)) +
geom_point() +
theme_bw()
#Plot distribuição
ggplot(data = predictVstest, mapping = aes(x = 'predict$netresult', y = ganhador, colour = ganhador)) +
geom_tile(aes(fill = ganhador)) +
geom_point() +
theme_bw()
ggplot(data = predictVstest, aes(x = 'predict$netresult')) +
geom_histogram(stat = 'count', aes(fill = 'ganhador'), width = 0.5) +
scale_fill_manual(values = c("blue", "red"))
histogram(predictVstest$`Predict$net.result`, breaks = 50)
histogram(predictVstest$`Predict$net.result`, breaks = 50)
ggplot(data = predictVstest, aes(x = 'predict$netresult')) +
geom_histogram(stat = 'count', aes(fill = 'ganhador'), width = 0.5) +
scale_fill_manual(values = c("blue", "red"))
histogram(predictVstest$`Predict$net.result`, breaks = 50)
histogram(predictVstest$`Predict$net.result`, breaks = 50) +
scale_fill_manual(values = c("blue", "red"))
histogram(predictVstest$`Predict$net.result`, breaks = 50)
cores <- ifelse(predictVstest$ganhador == 1, "blue", "red")
histogram(predictVstest$`Predict$net.result`, breaks = 50, col = cores)
#Plot distribuição
histogram(predictVstest$`Predict$net.result`, breaks = 50,
col = ifelse(predictVstest$ganhador == 1, "blue", "red"))
#Plot distribuição
histogram(predictVstest$`Predict$net.result`, breaks = 50,
col = ifelse(predictVstest$ganhador == 1, "blue", "red"))
#Plot distribuição
histogram(predictVstest$`Predict$net.result`, breaks = 10,
col = ifelse(predictVstest$ganhador == 1, "blue", "red"))
#Plot distribuição
histogram(predictVstest$`Predict$net.result`, breaks = 98,
col = ifelse(predictVstest$ganhador == 1, "blue", "red"))
View(predictVstest)
#Plot distribuição
histogram(predictVstest$`Predict$net.result`, breaks = 30,
col = ifelse(predictVstest$ganhador == 1, "blue", "red"))
#Plot distribuição
histogram(predictVstest$`Predict$net.result`, breaks = 30,
col = ifelse(as.factor(predictVstest$ganhador) == 1, "blue", "red"))
#Plot distribuição
histogram(predictVstest$`Predict$net.result`, breaks = 98,
col = ifelse(as.factor(predictVstest$ganhador) == 1, "blue", "red"))
#Plot distribuição
histogram(predictVstest$`Predict$net.result`, breaks = 98,
col = ifelse(as.factor(predictVstest$ganhador) == 2, "blue", "red"))
#Plot distribuição
histogram(predictVstest$`Predict$net.result`, breaks = 98,
col = ifelse(as.factor(predictVstest$ganhador) == 0, "blue", "red"))
#Plot distribuição
histogram(predictVstest$`Predict$net.result`, breaks = 98,
col = ifelse(as.factor(predictVstest$ganhador) == 1, "blue", "red"))
# Criar vetor de valores de eixo x
eixo_x <- seq(1:length(predictVstest$`Predict$net.result`))
# Criar gráfico de linha com base nos valores de predictVstest$`Predict$net.result`
plot(eixo_x, predictVstest$`Predict$net.result`, type = "l", col = ifelse(predictVstest$ganhador == 1, "blue", "red"))
# Adicionar linha para quando predictVstest$ganhador == 1
lines(eixo_x[predictVstest$ganhador == 1], predictVstest$`Predict$net.result`[predictVstest$ganhador == 1], col = "blue")
# Adicionar linha para quando predictVstest$ganhador == 0
lines(eixo_x[predictVstest$ganhador == 0], predictVstest$`Predict$net.result`[predictVstest$ganhador == 0], col = "red")
rm(eixo_x)
#Plot distribuição
histogram(predictVstest$`Predict$net.result`, breaks = 98,
col = ifelse(as.factor(predictVstest$ganhador) == 1, "blue", "red"))
View(predictVstest)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador, col = ifelse(predictVstest$ganhador == 1, "blue", "red"))
# Adicionar legenda para as cores
legend("topright", legend = c("ganhador = 0", "ganhador = 1"), col = c("red", "blue"), pch = 20)
# Adicionar legenda para as cores
legend("middle", legend = c("ganhador = 0", "ganhador = 1"), col = c("red", "blue"), pch = 20)
# Adicionar legenda para as cores
legend("center", legend = c("ganhador = 0", "ganhador = 1"), col = c("red", "blue"), pch = 20)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador, col = ifelse(predictVstest$ganhador == 1, "blue", "red"))
# Adicionar legenda para as cores
legend("center", legend = c("ganhador = 0", "ganhador = 1"), col = c("red", "blue"), pch = 20)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador, col = ifelse(predictVstest$ganhador == 1, "blue", "red"))
# Adicionar legenda para as cores
legend("center", legend = c("time 2 ganhador = 0", "time 1 ganhador = 1"), col = c("red", "blue"), pch = 20)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador, col = ifelse(predictVstest$ganhador == 1, "blue", "red"))
# Adicionar legenda para as cores
legend("center", legend = c("time 2 ganhador", "time 1 ganhador"), col = c("red", "blue"), pch = 20)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador, col = ifelse(predictVstest$ganhador == 1, "blue", "red"))
# Adicionar legenda para as cores
legend("center", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "blue"), pch = 20)
abline(v = 0.5, lty = 2, col = "gray")
abline(v = 0.5, lty = 2, col = "black")
# Adicionar legenda para as cores
legend("center right", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "blue"), pch = 20)
# Adicionar legenda para as cores
legend("right", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "blue"), pch = 20)
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "blue"), pch = 20)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador, col = ifelse(predictVstest$ganhador == 1, "blue", "red"))
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "blue"), pch = 20)
abline(v = 0.5, lty = 2, col = "black")
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "blue", "red"),
xlim = c(0,1))
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "blue"), pch = 20)
abline(v = 0.5, lty = 2, col = "black")
abline(v = 0.5, lty = 2, col = "red")
abline(v = 0.5, lty = 2, col = "green")
abline(v = 0.5, lty = 2, col = "gray")
abline(v = 0.5, lty = 2, col = "black")
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "blue"), pch = 30)
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "blue"), pch = 19)
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "blue"), pch = 20)
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "blue"), pch = 18)
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "blue"), pch = 15)
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "blue"), pch = 1)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "blue", "red"),
xlim = c(0,1), xlab = "Predict$net.result", ylab = "ganhador")
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "blue", "red"),
xlim = c(0,1), xlab = "Ganhador", ylab = "Porcentagem")
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "blue", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador")
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "blue", "red"),
ylim = 0,
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador")
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "blue", "red"),
ylim = c(0,1),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador")
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "blue", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador")
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "blue"), pch = 1)
abline(v = 0.5, lty = 2, col = "black")
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "blue", "red"))
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "blue", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador")
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "blue"), pch = 1)
abline(v = 0.5, lty = 2, col = "black")
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador")
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "green"), pch = 1)
abline(v = 0.5, lty = 2, col = "black")
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1.5, pch = 21)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1.5, pch = 1)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1.5, pch = 5)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1.5, pch = 13)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 3, pch = 13)
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "green"), pch = 1)
abline(v = 0.5, lty = 2, col = "black")
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1.3, pch = 13)
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "green"), pch = 1)
abline(v = 0.5, lty = 2, col = "black")
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1.3, pch = 14)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1.3, pch = 15)
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "green"), pch = 1)
abline(v = 0.5, lty = 2, col = "black")
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1.3, pch = 16)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1.3, pch = 17)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1.3, pch = 18)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1.3, pch = 19)
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "green"), pch = 1)
abline(v = 0.5, lty = 2, col = "black")
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, at = NULL)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, axis(side = 2, at = NULL))
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19)
axis(side = 2, at = NULL)
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "green"), pch = 1)
axis(side = 2, at = NULL, tck = -0.01)
axis(side = 2, at = NULL, tck = 0, line = -1, tick = FALSE)
axis(side = 2, at = NULL, tck = 0, line = -1, tick = T)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19)
axis(side = 2, at = NULL, tck = 0, line = -1, tick = F)
axis(side = 2, at = NULL, tck = 0, line = -1, labels = F)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19)
axis(side = 2, at = NULL, tck = 0, line = -1, labels = F)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19)
axis(side = 2, at = c(0, 1), labels = c("0", "1"), tck = 0, line = -1)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, yaxt = 'n')
axis(side = 2, at = c(0, 1), labels = c("0", "1"), tck = 0, line = -1)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, yaxt = 'n', mgp = c(3, 1, 0))
axis(side = 2, at = c(0, 1), labels = c("0", "1"), tck = 0, line = -1)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, yaxt = 'n')
axis(side = 2, at = c(0, 1), labels = c("0", "1"), tck = 0, line = -2)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, yaxt = 'n')
axis(side = 2, at = c(0, 1), labels = c("0", "1"), tck = 0, line = 0)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, yaxt = 'n')
axis(side = 2, at = c(0, 1), labels = c("0", "1"), tck = 0)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, yaxt = 'n')
axis(side = 2, at = c(0, 1), labels = c("0", "1"))
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, yaxt = 'n')
axis(side = 2, at = c(0, 1), labels = c("0", "1"), tck = 0)
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, yaxt = 'n')
axis(side = 2, at = c(0, 1), labels = c("0", "1"))
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "green"), pch = 1)
abline(v = 0.5, lty = 2, col = "black")
#Plot distribuição
histogram(predictVstest$`Predict$net.result`, breaks = 98,
col = ifelse(as.factor(predictVstest$ganhador) == 1, "blue", "red"))
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, yaxt = 'n')
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, yaxt = 'n')
axis(side = 2, at = c(0, 1), labels = c("0", "1"))
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "green"), pch = 1)
abline(v = 0.5, lty = 2, col = "black")
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(-0.1,1.1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, yaxt = 'n')
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0.05,0.95), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, yaxt = 'n')
axis(side = 2, at = c(0, 1), labels = c("0", "1"))
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "green"), pch = 1)
abline(v = 0.5, lty = 2, col = "black")
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, yaxt = 'n')
axis(side = 2, at = c(0, 1), labels = c("0", "1"))
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "green"), pch = 1)
abline(v = 0.5, lty = 2, col = "black")
ggplot(df, aes(x = predictVstest$`Predict$net.result`, y = predictVstest$ganhador, color = col)) +
geom_point(size = 3) +
scale_color_manual(values = c("ganhador = 0" = "red", "ganhador = 1" = "blue")) +
xlab("Predict$net.result") +
ylab("") +
theme_classic() +
theme(axis.text.y = element_text(size = 16)) +
guides(color = guide_legend(title = "Ganhador", ncol = 1))
ggplot(predictVstest, aes(x = 'Predict$net.result', y = 'ganhador', color = col)) +
geom_point(size = 3) +
scale_color_manual(values = c("ganhador = 0" = "red", "ganhador = 1" = "blue")) +
xlab("Predict$net.result") +
ylab("") +
theme_classic() +
theme(axis.text.y = element_text(size = 16)) +
guides(color = guide_legend(title = "Ganhador", ncol = 1))
ggplot(predictVstest, aes(x = 'Predict$net.result', y = 'ganhador',
color = ifelse(predictVstest$ganhador == 1, "ganhador = 1", "ganhador = 0"))) +
geom_point(size = 3) +
scale_color_manual(values = c("ganhador = 0" = "red", "ganhador = 1" = "blue")) +
xlab("Predict$net.result") +
ylab("") +
theme_classic() +
theme(axis.text.y = element_text(size = 16)) +
guides(color = guide_legend(title = "Ganhador", ncol = 1))
ggplot(predictVstest, aes(x = 'Predict$net.result', y = 'ganhador',
color = ifelse(predictVstest$ganhador == 1, "ganhador = 1", "ganhador = 0"))) +
geom_point(size = 1) +
scale_color_manual(values = c("ganhador = 0" = "red", "ganhador = 1" = "blue")) +
xlab("Predict$net.result") +
ylab("") +
theme_classic() +
theme(axis.text.y = element_text(size = 16)) +
guides(color = guide_legend(title = "Ganhador", ncol = 1))
ggplot(predictVstest, aes(x = 'Predict$net.result', y = 'ganhador',
color = ifelse(predictVstest$ganhador == 1, "ganhador = 1", "ganhador = 0"))) +
geom_point(size = 3) +
scale_color_manual(values = c("ganhador = 0" = "red", "ganhador = 1" = "blue")) +
xlab("Predict$net.result") +
ylab("Ganhador") +
theme_classic() +
theme(axis.text.y = element_text(size = 16)) +
guides(color = guide_legend(title = "Ganhador", ncol = 1))
color = 'ganhador') +
ggplot(predictVstest, aes(x = 'Predict$net.result', y = 'ganhador',
color = 'ganhador')) +
geom_point(size = 3) +
scale_color_manual(values = c("ganhador = 0" = "red", "ganhador = 1" = "blue")) +
xlab("Predict$net.result") +
ylab("Ganhador") +
theme_classic() +
theme(axis.text.y = element_text(size = 16)) +
guides(color = guide_legend(title = "Ganhador", ncol = 1))
ggplot(predictVstest, aes(x = 'Predict$net.result', y = 'ganhador',
color = factor('ganhador'))) +
geom_point(size = 3) +
scale_color_manual(values = c("ganhador = 0" = "red", "ganhador = 1" = "blue")) +
xlab("Predict$net.result") +
ylab("Ganhador") +
theme_classic() +
theme(axis.text.y = element_text(size = 16)) +
guides(color = guide_legend(title = "Ganhador", ncol = 1))
plot(predictVstest$`Predict$net.result`, predictVstest$ganhador,
col = ifelse(predictVstest$ganhador == 1, "green", "red"),
xlim = c(0,1), xlab = "Porcentagem", ylab = "Ganhador",
cex = 1, pch = 19, yaxt = 'n')
axis(side = 2, at = c(0, 1), labels = c("0", "1"))
# Adicionar legenda para as cores
legend("left", legend = c("Time 2 ganhador", "Time 1 ganhador"), col = c("red", "green"), pch = 1)
abline(v = 0.5, lty = 2, col = "black")
library(plotly)
plot_ly(data = predictVstest, x = ~Predict$net.result, y = ~ganhador,
color = ~factor(ganhador), colors = c("red", "green"), type = "scatter",
mode = "markers", marker = list(size = 10)) %>%
layout(xaxis = list(title = "Porcentagem"), yaxis = list(title = "Ganhador"),
legend = list(title = "Ganhador", font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50))
View(predictVstest)
plot_ly(data = predictVstest, x = ~'Predict$net.result', y = ~ganhador,
color = ~factor(ganhador), colors = c("red", "green"), type = "scatter",
mode = "markers", marker = list(size = 10)) %>%
layout(xaxis = list(title = "Porcentagem"), yaxis = list(title = "Ganhador"),
legend = list(title = "Ganhador", font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50))
plot_ly(data = predictVstest, x = '~Predict$net.result', y = ~ganhador,
color = ~factor(ganhador), colors = c("red", "green"), type = "scatter",
mode = "markers", marker = list(size = 10)) %>%
layout(xaxis = list(title = "Porcentagem"), yaxis = list(title = "Ganhador"),
legend = list(title = "Ganhador", font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50))
rm(Predict)
plot_ly(data = predictVstest, x = ~Predict$net.result, y = ~ganhador,
color = ~factor(ganhador), colors = c("red", "green"), type = "scatter",
mode = "markers", marker = list(size = 10)) %>%
layout(xaxis = list(title = "Porcentagem"), yaxis = list(title = "Ganhador"),
legend = list(title = "Ganhador", font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50))
plot_ly(data = predictVstest, x = ~`Predict$net.result`, y = ~ganhador,
color = ~factor(ganhador), colors = c("red", "green"), type = "scatter",
mode = "markers", marker = list(size = 10)) %>%
layout(xaxis = list(title = "Porcentagem"), yaxis = list(title = "Ganhador"),
legend = list(title = "Ganhador", font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50))
plot_ly(data = predictVstest, x = ~`Predict$net.result`, y = ~ganhador,
color = ~factor(ganhador), colors = c("red", "green"), type = "scatter",
mode = "markers", marker = list(size = 10)) %>%
layout(xaxis = list(title = "Porcentagem"), yaxis = list(title = "Ganhador"),
legend = list(title = "Ganhador", font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = "line", x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = "black", width = 2))))
plot_ly(data = predictVstest, x = ~`Predict$net.result`, y = ~ganhador,
color = ~factor(ganhador), colors = c("red", "green"), type = "scatter",
mode = "markers", marker = list(size = 10)) %>%
layout(xaxis = list(title = "Porcentagem"), yaxis = list(title = "Ganhador"),
legend = list(title = "Ganhador", font = list(size = 16)),
margin = list(l = 50, r = 50, t = 50, b = 50),
shapes = list(list(type = "line", x0 = 0.5, x1 = 0.5, y0 = 0, y1 = 1,
line = list(color = "gray", width = 2))))
