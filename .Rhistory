x <- read_html(urls[15,]) %>% html_nodes('div.match-h2h-matches-score') %>% html_text() %>%
str_replace_all('\n', ' ') %>% str_replace_all('\t', '') %>%
str_match("^\\s*(\\d+)\\s*(\\d+)\\s*$")
x <- x[,-1]
x <- x[,-1]
x <- read_html(urls[1,]) %>% html_nodes('div.match-h2h-matches-score') %>% html_text() %>%
str_replace_all('\n', ' ') %>% str_replace_all('\t', '') %>%
str_match("^\\s*(\\d+)\\s*(\\d+)\\s*$")
x <- x[,-1]
x[1]
x[,]
x[1,]
t1 <- sum(as.numeric(x[,1]))
t2 <- sum(as.numeric(x[,2]))
h2h_temp <- cbind(t1, t2)
urls[1,]
x[1,]
x[1,]$1
x[1,1]
# H2H -------------------------------------------------------------------------------------------------------
h2h <- list()
for (url in urls[,]){
tryCatch({
x <- read_html(url) %>% html_nodes('div.match-h2h-matches-score') %>% html_text() %>%
str_replace_all('\n', ' ') %>% str_replace_all('\t', '') %>%
str_match("^\\s*(\\d+)\\s*(\\d+)\\s*$")
if (is.null(x)) {
# Não houve partida no histórico
h2h_temp <- cbind(NA, NA)
} else if (nrow(x) == 1) {
# Houve apenas uma partida no histórico
t1 <- as.numeric(x[1,1])
t2 <- as.numeric(x[1,2])
saldo <- t1 - t2
h2h_temp <- if (saldo >= 0) cbind(saldo, 0) else cbind(0, -saldo)
} else {
# Houve duas ou mais partidas no histórico
t1 <- sum(as.numeric(x[,1]))
t2 <- sum(as.numeric(x[,2]))
saldo <- t1 - t2
h2h_temp <- if (saldo >= 0) cbind(saldo, -saldo) else cbind(-saldo, saldo)
}
h2h[[length(h2h)+1]] <- h2h_temp
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
View(h2h)
# H2H -------------------------------------------------------------------------------------------------------
h2h <- list()
for (url in urls[,]){
tryCatch({
x <- read_html(url) %>% html_nodes('div.match-h2h-matches-score') %>% html_text() %>%
str_replace_all('\n', ' ') %>% str_replace_all('\t', '') %>%
str_match("^\\s*(\\d+)\\s*(\\d+)\\s*$")
if (is.null(x)) {
# Não houve partida no histórico
h2h_temp <- cbind(NA, NA)
} else if (nrow(x) == 1) {
# Houve apenas uma partida no histórico
t1 <- as.numeric(x[1,1])
t2 <- as.numeric(x[1,2])
saldo <- t1 - t2
if (saldo >= 0) {
h2h_temp <- cbind(saldo, 0)
} else {
h2h_temp <- cbind(0, -saldo)
}
} else {
# Houve duas ou mais partidas no histórico
t1 <- sum(as.numeric(x[,1]))
t2 <- sum(as.numeric(x[,2]))
saldo <- t1 - t2
if (saldo >= 0) {
h2h_temp <- cbind(saldo, -saldo)
} else {
h2h_temp <- cbind(-saldo, saldo)
}
}
h2h[[length(h2h)+1]] <- h2h_temp
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
View(h2h)
x <- read_html(urls[1,]) %>% html_nodes('div.match-h2h-matches-score') %>% html_text() %>%
str_replace_all('\n', ' ') %>% str_replace_all('\t', '') %>%
str_match("^\\s*(\\d+)\\s*(\\d+)\\s*$")
if (is.null(x)) {
# Não houve partida no histórico
h2h_temp <- cbind(NA, NA)
x
x
if (is.null(x)) {
# Não houve partida no histórico
h2h_temp <- cbind(NA, NA)
} else if (nrow(x) == 1) {
# Houve apenas uma partida no histórico
t1 <- as.numeric(x[1,1])
t2 <- as.numeric(x[1,2])
saldo <- t1 - t2
if (saldo >= 0) {
h2h_temp <- cbind(saldo, 0)
} else {
h2h_temp <- cbind(0, -saldo)
}
} else {
# Houve duas ou mais partidas no histórico
t1 <- sum(as.numeric(x[,1]))
t2 <- sum(as.numeric(x[,2]))
saldo <- t1 - t2
if (saldo >= 0) {
h2h_temp <- cbind(saldo, -saldo)
} else {
h2h_temp <- cbind(-saldo, saldo)
}
}
nrow(x)
# Houve duas ou mais partidas no histórico
t1 <- sum(as.numeric(x[,1]))
t2 <- sum(as.numeric(x[,2]))
# Houve duas ou mais partidas no histórico
x <- x[-1,]
x
x <- read_html(urls[1,]) %>% html_nodes('div.match-h2h-matches-score') %>% html_text() %>%
str_replace_all('\n', ' ') %>% str_replace_all('\t', '') %>%
str_match("^\\s*(\\d+)\\s*(\\d+)\\s*$")
# Houve duas ou mais partidas no histórico
x <- x[,-1]
t1 <- sum(as.numeric(x[,1]))
t2 <- sum(as.numeric(x[,2]))
saldo <- t1 - t2
if (saldo >= 0) {
h2h_temp <- cbind(saldo, -saldo)
} else {
h2h_temp <- cbind(-saldo, saldo)
}
# H2H -------------------------------------------------------------------------------------------------------
h2h <- list()
for (url in urls[,]){
tryCatch({
x <- read_html(url) %>% html_nodes('div.match-h2h-matches-score') %>% html_text() %>%
str_replace_all('\n', ' ') %>% str_replace_all('\t', '') %>%
str_match("^\\s*(\\d+)\\s*(\\d+)\\s*$")
if (is.null(x)) {
# Não houve partida no histórico
h2h_temp <- cbind(NA, NA)
} else if (nrow(x) == 1) {
# Houve apenas uma partida no histórico
t1 <- as.numeric(x[1,1])
t2 <- as.numeric(x[1,2])
saldo <- t1 - t2
if (saldo >= 0) {
h2h_temp <- cbind(saldo, 0)
} else {
h2h_temp <- cbind(0, -saldo)
}
} else {
# Houve duas ou mais partidas no histórico
x <- x[,-1]
t1 <- sum(as.numeric(x[,1]))
t2 <- sum(as.numeric(x[,2]))
saldo <- t1 - t2
h2h_temp <- saldo
}
h2h[[length(h2h)+1]] <- h2h_temp
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
View(h2h)
urls[5,]
# H2H -------------------------------------------------------------------------------------------------------
h2h <- list()
for (url in urls[,]){
tryCatch({
x <- read_html(url) %>% html_nodes('div.match-h2h-matches-score') %>% html_text() %>%
str_replace_all('\n', ' ') %>% str_replace_all('\t', '') %>%
str_match("^\\s*(\\d+)\\s*(\\d+)\\s*$")
if (is.null(x)) {
# Não houve partida no histórico
h2h_temp <- cbind(NA, NA)
} else if (nrow(x) == 1) {
# Houve apenas uma partida no histórico
t1 <- as.numeric(x[1,1])
t2 <- as.numeric(x[1,2])
h2h_temp <- cbind(t1, t2)
} else {
# Houve duas ou mais partidas no histórico
x <- x[,-1]
t1 <- sum(as.numeric(x[,1]))
t2 <- sum(as.numeric(x[,2]))
h2h_temp <- cbind(t1, t2)
}
h2h[[length(h2h)+1]] <- h2h_temp
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
View(h2h)
urls[12,]
x <- read_html(urls[12,]) %>% html_nodes('div.match-h2h-matches-score') %>% html_text() %>%
str_replace_all('\n', ' ') %>% str_replace_all('\t', '') %>%
str_match("^\\s*(\\d+)\\s*(\\d+)\\s*$")
x
x[,-1]
x <- x[,-1]
sum(as.numeric(x[,1]))
t1 <- as.numeric(x[1,1])
x
t1 <- as.numeric(x[1])
t2 <- as.numeric(x[2])
h2h_temp <- cbind(t1, t2)
x <- read_html(urls[1,]) %>% html_nodes('div.match-h2h-matches-score') %>% html_text() %>%
str_replace_all('\n', ' ') %>% str_replace_all('\t', '') %>%
str_match("^\\s*(\\d+)\\s*(\\d+)\\s*$")
urls[1,]
x
# Houve apenas uma partida no histórico
x <- x[,-1]
x
t1 <- as.numeric(x[1])
t2 <- as.numeric(x[2])
# H2H -------------------------------------------------------------------------------------------------------
h2h <- list()
for (url in urls[,]){
tryCatch({
x <- read_html(url) %>% html_nodes('div.match-h2h-matches-score') %>% html_text() %>%
str_replace_all('\n', ' ') %>% str_replace_all('\t', '') %>%
str_match("^\\s*(\\d+)\\s*(\\d+)\\s*$")
if (is.null(x)) {
# Não houve partida no histórico
h2h_temp <- cbind(NA, NA)
} else if (nrow(x) == 1) {
# Houve apenas uma partida no histórico
x <- x[,-1]
t1 <- as.numeric(x[1])
t2 <- as.numeric(x[2])
h2h_temp <- cbind(t1, t2)
} else {
# Houve duas ou mais partidas no histórico
x <- x[,-1]
t1 <- sum(as.numeric(x[,1]))
t2 <- sum(as.numeric(x[,2]))
h2h_temp <- cbind(t1, t2)
}
h2h[[length(h2h)+1]] <- h2h_temp
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
View(h2h)
urls[62,]
for (url in urls[,]){
tryCatch({
x <- read_html(url) %>% html_nodes('div.match-h2h-matches-score') %>% html_text() %>%
str_replace_all('\n', ' ') %>% str_replace_all('\t', '') %>%
str_match("^\\s*(\\d+)\\s*(\\d+)\\s*$")
if (is.null(x)) {
# Não houve partida no histórico
h2h_temp <- cbind(NA, NA)
} else if (nrow(x) == 1) {
# Houve apenas uma partida no histórico
x <- x[,-1]
t1 <- as.numeric(x[1])
t2 <- as.numeric(x[2])
h2h_temp <- cbind(t1, t2)
} else {
# Houve duas ou mais partidas no histórico
x <- x[,-1]
t1 <- sum(as.numeric(x[,1]))
t2 <- sum(as.numeric(x[,2]))
h2h_temp <- cbind(t1, t2)
}
h2h[[length(h2h)+1]] <- h2h_temp
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
View(h2h)
# H2H -------------------------------------------------------------------------------------------------------
h2h <- list()
for (url in urls[,]){
tryCatch({
x <- read_html(url) %>% html_nodes('div.match-h2h-matches-score') %>% html_text() %>%
str_replace_all('\n', ' ') %>% str_replace_all('\t', '') %>%
str_match("^\\s*(\\d+)\\s*(\\d+)\\s*$")
if (is.null(x)) {
# Não houve partida no histórico
h2h_temp <- cbind(NA, NA)
} else if (nrow(x) == 1) {
# Houve apenas uma partida no histórico
x <- x[,-1]
t1 <- as.numeric(x[1])
t2 <- as.numeric(x[2])
h2h_temp <- cbind(t1, t2)
} else {
# Houve duas ou mais partidas no histórico
x <- x[,-1]
t1 <- sum(as.numeric(x[,1]))
t2 <- sum(as.numeric(x[,2]))
h2h_temp <- cbind(t1, t2)
}
h2h[[length(h2h)+1]] <- h2h_temp
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
for (url in urls[,]){
tryCatch({
z <- read_html(url) %>% html_nodes('div.match-histories-item-result span') %>%
html_text() %>% str_replace_all('\n', ' ') %>% str_replace_all('\t', '')
z <- as.numeric(z)
wins_t1 <- sum(z[1], z[3], z[5], z[7], z[9])
loses_t1 <- sum(z[2], z[4], z[6], z[8], z[10])
profit_t1 <- (wins_t1 - loses_t1)
wins_t2 <- sum(z[11], z[13], z[15], z[17], z[19])
loses_t2 <- sum(z[12], z[14], z[16], z[18], z[20])
profit_t2 <- (wins_t2 - loses_t2)
past_matches <- cbind(profit_t1, profit_t2)
## Finalizado praticamente, agr só preciso colocar para iterar em todos os links ----------------------------
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
# Past Matchs -----------------------------------------------------------------------------------------------
p_matchs <- list()
for (url in urls[,]){
tryCatch({
z <- read_html(url) %>% html_nodes('div.match-histories-item-result span') %>%
html_text() %>% str_replace_all('\n', ' ') %>% str_replace_all('\t', '')
z <- as.numeric(z)
wins_t1 <- sum(z[1], z[3], z[5], z[7], z[9])
loses_t1 <- sum(z[2], z[4], z[6], z[8], z[10])
profit_t1 <- (wins_t1 - loses_t1)
wins_t2 <- sum(z[11], z[13], z[15], z[17], z[19])
loses_t2 <- sum(z[12], z[14], z[16], z[18], z[20])
profit_t2 <- (wins_t2 - loses_t2)
past_matches <- cbind(profit_t1, profit_t2)
p_matchs[[length()+1]] <- past_matches
## Finalizado praticamente, agr só preciso colocar para iterar em todos os links ----------------------------
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
# Past Matchs -----------------------------------------------------------------------------------------------
p_matchs <- list()
for (url in urls[,]){
tryCatch({
z <- read_html(url) %>% html_nodes('div.match-histories-item-result span') %>%
html_text() %>% str_replace_all('\n', ' ') %>% str_replace_all('\t', '')
z <- as.numeric(z)
wins_t1 <- sum(z[1], z[3], z[5], z[7], z[9])
loses_t1 <- sum(z[2], z[4], z[6], z[8], z[10])
profit_t1 <- (wins_t1 - loses_t1)
wins_t2 <- sum(z[11], z[13], z[15], z[17], z[19])
loses_t2 <- sum(z[12], z[14], z[16], z[18], z[20])
profit_t2 <- (wins_t2 - loses_t2)
past_matches <- cbind(profit_t1, profit_t2)
p_matchs[[length(p_matchs)+1]] <- past_matches
## Finalizado praticamente, agr só preciso colocar para iterar em todos os links ----------------------------
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
View(p_matchs)
urls[50,]
h2h <- h2h %>% map_df(as_tibble)
write.csv2(h2h, 'h2h.csv')
p_matchs <- p_matchs %>% map_df(as_tibble)
p_matchs[is.na(p_matchs)] <- 0
View(p_matchs)
write.csv2(p_matchs, 'p_matchs.csv')
# Carregando pacotes ---------------------------------------------------------------------------------------
pacotes <- c("remotes", "caret", "dplyr", "tidyr", "rvest", "rsample", "readr", "quantmod",
"httr", "tibble", "stringr", "neuralnet", "nnet", "ggplot2", "ModelMetrics",
"beepr", "purrr", "plotly", "pROC", "ROCR", "kableExtra", "glmnet", "valorant")
for (pacote in pacotes) {
if (!require(pacote, character.only = TRUE)) {
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github('Juniorffonseca/r-pacote-valorant')
if (!require(pacote, character.only = TRUE)) {
stop(paste("Pacote", pacote, "não encontrado"))
}
}
}
# Carregando partidas diarias e unindo em um df ------------------------------------------------------------
datas <- seq(as.Date('2023-02-19'), Sys.Date() - 1, by = 'day')
nomes_arquivos <- paste0('csv/catalogacao_diaria/', format(datas, '%Y-%m-%d'), '_partidas.csv')
jogos_lista <- list()
for (arquivo in nomes_arquivos) {
jogos_lista[[arquivo]] <- possibly(read.csv2, otherwise = NULL)(arquivo)
}
jogos <- bind_rows(jogos_lista) %>% select(-X)
vars <- c('RND', 'R', 'ACS', 'KAST', 'KD', 'ADR', 'KPR', 'APR', 'FKPR', 'FDPR', 'K', 'D', 'A', 'FK', 'FD')
for (i in vars) {
new_var <- paste0(i, "_diff")
jogos[[new_var]] <- jogos[[paste0("time1", i)]] - jogos[[paste0("time2", i)]]
}
jogos <- select(jogos, ends_with("_diff"), ganhador)
jogos$ganhador <- as.factor(jogos$ganhador)
jogos <- cbind(jogos, h2h, p_matchs)
View(jogos)
jogos$ganhador <- as.factor(jogos$ganhador)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
data_split <- initial_split(jogos, prop = 0.7, strata = 'ganhador')
training_data <- training(data_split)
test_data <- testing(data_split)
hidden_n <- c(15)
formula <- 'ganhador == 1 ~ .'
# Normalizando os dados -----------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(formula,
data = training_data,
hidden = hidden_n,
err.fct = 'sse',
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
# Prediction ----------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(formula,
data = training_data,
hidden = hidden_n,
err.fct = 'sse',
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
# Prediction ----------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(formula,
data = training_data,
hidden = hidden_n,
err.fct = 'sse',
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
# Prediction ----------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Achar uma boa seed --------------------------------------------------------------------------------------
s <- 281768
w <- 0.1
while ( i < 0.78) {
achar_Seed(s, hidden_n, t = 0.5, mostrar_i = F)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(round(w, 2))
}
hidden_n <- c(20)
# Prediction ----------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <<- ifelse(Predict$net.result[,1]>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
# Achar uma boa seed --------------------------------------------------------------------------------------
s <- 281768
w <- 0.1
while ( i < 0.78) {
achar_Seed(s, hidden_n, t = 1, mostrar_i = F)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(round(w, 2))
}
# Achar uma boa seed --------------------------------------------------------------------------------------
s <- 281768
w <- 0.1
while ( i < 0.78) {
achar_Seed(s, hidden_n, t = 0.5, mostrar_i = F)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(round(w, 2))
}
while ( i < 0.70) {
achar_Seed(s, hidden_n, t = 0.5, mostrar_i = F)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(round(w, 2))
}
s <- 28300
while ( i < 0.70) {
achar_Seed(s, hidden_n, t = 0.5, mostrar_i = F)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(round(w, 2))
}
while ( i < 0.70) {
achar_Seed(s, hidden_n, t = 0.5, mostrar_i = F)
s <- s + 1
w <<- ifelse(i>w, w <<- i, w <<- w)
print(round(w, 2))
}
