set.seed(3)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.82) {
acharnn()
}
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 10, 10),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
acharseed <- function(seed){
set.seed(seed)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 10, 10),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
}
s <- 1
while ( i < 0.79) {
acharseed(s)
s <- s + 1
}
s <- 1
while ( i < 0.78) {
acharseed(s)
s <- s + 1
}
# Atualizando a seed para achar a melhor neuralnetwork -------------------------------------------------------
set.seed(646)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 10, 10),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.82) {
acharnn()
}
s <- 1
while ( i < 0.79) {
acharseed(s)
s <- s + 1
}
while ( i < 0.79) {
acharseed(s)
s <- s + 1
}
s <- 648
i <- 0
while ( i < 0.79) {
acharseed(s)
s <- s + 1
}
# Atualizando a seed para achar a melhor neuralnetwork -------------------------------------------------------
set.seed(1750)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10, 10, 10),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.82) {
acharnn()
}
# Carregando pacotes ----------------------------------------------------------------------------------------
library(dplyr)
library(httr)
library(readr)
# Url da partida
string_url <- 'https://www.vlr.gg/167037/tropicaos-vs-keyd-stars-challengers-league-brazil-split-1-w3'
# Url da partida
string_url <- 'https://www.vlr.gg/167037/tropicaos-vs-keyd-stars-challengers-league-brazil-split-1-w3'
# Pegando os dados no link da partida ----------------------------------------------------------------------
info <- read_html(string_url) %>%
html_nodes("table") %>%
html_table()
library(tibble)
# Url da partida
string_url <- 'https://www.vlr.gg/167037/tropicaos-vs-keyd-stars-challengers-league-brazil-split-1-w3'
# Pegando os dados no link da partida ----------------------------------------------------------------------
info <- read_html(string_url) %>%
html_nodes("table") %>%
html_table()
library(purrr)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(readr)
library(purrr)
# Url da partida
string_url <- 'https://www.vlr.gg/167037/tropicaos-vs-keyd-stars-challengers-league-brazil-split-1-w3'
# Pegando os dados no link da partida ----------------------------------------------------------------------
info <- read_html(string_url) %>%
html_nodes("table") %>%
html_table()
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
View(timeA)
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
timeA <- paste0('\\b', timeA, '\\b')
timeB <- paste0('\\b', timeB, '\\b')
jogadores_buscados <- []
jogadores_buscados <- list[]
jogadores_buscados <- ()
jogadores_buscados <- list()
timeA_df <- list()
timeB_df <- list()
timeA_df[] <- paste('https://www.vlr.gg/search/?q=', i, sep = '')
# Criando um laço for que armazenará o url de cada página dentro da variável paginas -----------------------
for (i in timeA){
timeA_df[] <- paste('https://www.vlr.gg/search/?q=', i, sep = '')
}
# Criando um laço for que armazenará o url de cada página dentro da variável paginas -----------------------
for (i in timeA){
teste <- paste('https://www.vlr.gg/search/?q=', i, sep = '')
}
timeA <- timeA$Player
timeB <- timeB$Player
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
# Criando um laço for que armazenará o url de cada página dentro da variável paginas -----------------------
for (i in timeA){
teste <- paste('https://www.vlr.gg/search/?q=', i, sep = '')
}
# Criando um laço for que armazenará o url de cada página dentro da variável paginas -----------------------
for (i in timeA){
teste <- paste('https://www.vlr.gg/search/?q=', '&type=players', sep = i)
}
View(info)
# Pegando os dados no link da partida ----------------------------------------------------------------------
info <- read_html(string_url) %>%
html_nodes('table') %>%
html_table('class.mod-player')
testando <- read_html(string_url) %>%
hrml_nodes('class.mod-player') %>%
html_table()
testando <- read_html(string_url) %>%
html_nodes('class.mod-player') %>%
html_table()
View(testando)
testando <- read_html(string_url) %>%
html_nodes('class.mod-player') %>%
html_text()
testando <- read_html(string_url) %>%
html_nodes('/html/body/div[5]/div[1]/div[3]/div[6]/div/div[3]/div[2]/div[2]/div[1]/table/tbody/tr[1]/td[1]/div/a') %>%
html_table()
testando <- read_html(string_url) %>%
html_nodes('//*[@id="wrapper"]/div[1]/div[3]/div[6]/div/div[3]/div[2]/div[2]/div[1]/table/tbody/tr[1]/td[1]/div/a') %>%
html_table()
testando <- read_html(string_url) %>%
html_nodes('class.flag mod-br a') %>%
html_table()
testando <- read_html(string_url) %>%
html_nodes('class.flag mod-br a') %>%
html_text()
testando <- read_html(string_url) %>%
html_nodes('class.flag mod-br') %>%
html_text()
testando <- read_html(string_url) %>%
html_nodes('td. mod-player') %>%
html_text()
testando <- read_html(string_url) %>%
html_nodes('td.class mod-player') %>%
html_text()
testando <- read_html(string_url) %>%
html_nodes('td.class mod-player') %>%
html_table()
testando <- read_html(string_url) %>%
html_nodes('td.class mod-player') %>%
html_table()
testando <- read_html(string_url) %>%
html_nodes('td.mod-player') %>%
html_table()
View(testando)
testando <- read_html(string_url) %>%
html_nodes('td.mod-player') %>%
html_text()
testando
testando <- read_html(string_url) %>%
html_nodes('td.mod-player a') %>%
html_text()
testando <- read_html(string_url) %>%
html_nodes('td.mod-player a') %>%
html_text()
testando <- read_html(string_url) %>%
html_nodes('td.mod-player href') %>%
html_text()
testando <- read_html(string_url) %>%
html_nodes('td.mod-player a') %>%
html_text()
testando <- read_html(string_url) %>%
html_nodes('td.mod-player a') %>%
html_attr('href')
testando <- read_html(string_url) %>%
html_nodes('td.mod-player') %>%
html_attr('href')
testando <- read_html(string_url) %>%
html_nodes('td.mod-player a') %>%
html_attr('href')
testando
testando[1]
testando[2]
testando[3]
testando[4]
testando[5]
testando <- read_html(string_url) %>%
html_nodes('td.mod-player b') %>%
html_attr('href')
testando <- read_html(string_url) %>%
html_nodes('td.mod-player a') %>%
html_attr('href')
testando <- read_html(string_url) %>%
html_nodes('div.vm-stats-game a') %>%
html_attr('href')
testando <- read_html(string_url) %>%
html_nodes('div.vm-stats-game a') %>%
html_attr('href')
testando <- read_html(string_url) %>%
html_nodes('div.vm-stats-game') %>%
html_attr('href')
testando <- read_html(string_url) %>%
html_nodes('div.vm-stats-container a') %>%
html_attr('href')
testando
testando <- read_html(string_url) %>%
html_nodes('div.vm-stats') %>%
html_attr('href')
testando <- read_html(string_url) %>%
html_nodes('div.vm-stats a') %>%
html_attr('href')
testando
testando <- read_html(string_url) %>%
html_node('td.mod-player a') %>%
html_attr('href')
testando <- read_html(string_url) %>%
html_nodes('td.mod-player a') %>%
html_attr('href')
?html_attr
testando <- read_html(string_url) %>%
html_nodes('div.vm-stats a') %>%
html_attrs('href')
testando <- read_html(string_url) %>%
html_nodes('div.vm-stats a') %>%
html_attrs()
View(testando)
testando <- read_html(string_url) %>%
html_nodes('div.vm-stats a') %>%
html_attrs()
testando[1]
testando[3]
testando[3,]
testando <- read_html(string_url) %>%
html_nodes('div.vm-stats a') %>%
html_attr()
testando <- read_html(string_url) %>%
html_nodes('div.vm-stats a') %>%
html_attr('href')
testando[1:10]
testando <- read_html(string_url) %>%
html_nodes('td.mod-player a') %>%
html_attr('href')
testando
busca_links <- read_html(string_url) %>%
html_nodes('td.mod-player a') %>%
html_attr('href')
links_jogadores <- read_html(string_url) %>%
html_nodes('td.mod-player a') %>%
html_attr('href')
# Url da partida
string_url <- 'https://www.vlr.gg/167037/tropicaos-vs-keyd-stars-challengers-league-brazil-split-1-w3'
# Pegando os dados no link da partida ----------------------------------------------------------------------
info <- read_html(string_url) %>%
html_nodes('table') %>%
html_table()
View(info)
# Url da partida
string_url <- 'https://www.vlr.gg/167037/tropicaos-vs-keyd-stars-challengers-league-brazil-split-1-w3'
links_jogadores <- read_html(string_url) %>%
html_nodes('td.mod-player a') %>%
html_attr('href')
timeA <- links_jogadores[1:5]
timeB <- links_jogadores[6:10]
timeA
timeB
teste <- paste('https://www.vlr.gg', i, sep = '')
# Criando um laço for que armazenará o url de cada página dentro da variável paginas -----------------------
for (i in timeA){
teste <- paste('https://www.vlr.gg', i, sep = '')
}
teste_1 <- 'https://www.vlr.gg/player/1586/v1nny'
infos_jogadores <- read_html(teste_1) %>%
html_nodes('table') %>%
html_table()
View(infos_jogadores)
teste <- paste('https://www.vlr.gg', '/?timespan=all', sep = i)
teste
teste_1 <- 'https://www.vlr.gg/player/1586/v1nny/?timespan=all'
infos_jogadores <- read_html(teste_1) %>%
html_nodes('table') %>%
html_table()
View(infos_jogadores)
View(infos_jogadores)
infos_jogadores
unlist(infos_jogadores)
x <- unlist(infos_jogadores)
x <- infos_jogadores %>%  map_df(as_tibble)
infos_jogadores <- infos_jogadores %>%  map_df(as_tibble)
infos_jogadores <- infos_jogadores %>%  map_df(as_tibble, .name_repair = 'minimal')
View(infos_jogadores)
infos_jogadores %>% dplyr::select(Rating, ACS, 'K:D', ADR, KAST)
View(infos_jogadores)
infos_jogadores <- read_html(teste_1) %>%
html_nodes('table') %>%
html_table()
infos_jogadores <- infos_jogadores %>%  map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Rating, ACS, 'K:D', ADR, KAST)
View(infos_jogadores)
mean(infos_jogadores$Rating)
mean(infos_jogadores$Rating, na.rm = T)
mean(infos_jogadores$ACS)
# Carregando pacotes -------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(httr)
# Armazenando a url em uma variável -----------------------------------------------------------------------
link <- "https://www.vlr.gg/stats/?event_group_id=all&event_id=all&region=all&country=all&min_rounds=50&min_rating=1550&agent=all&map_id=all&timespan=all"
# Pegando os Dados no link e separando time e jogador em duas colunas -------------------------------------
players <- read_html(link) %>%
html_node("table") %>%
html_table() %>%
separate(Player, into = c("Player", "Team"), sep = "\\s+", extra = "merge") %>%
select('Player', 'Team', 'R', 'ACS', 'K:D', 'KAST', 'ADR') %>%
as.data.frame()
View(players)
mean(infos_jogadores$Rating[1:11], na.rm = T)
mean(infos_jogadores$Rating[1:6], na.rm = T)
mean(infos_jogadores$Rating[1:10], na.rm = T)
mean(infos_jogadores$Rating[1:7], na.rm = T)
mean(infos_jogadores$Rating[1:8], na.rm = T)
mean(infos_jogadores$Rating[1:9], na.rm = T)
mean(infos_jogadores$Rating[1:10], na.rm = T)
