}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
for (i in timeB){
timeB_medias[[length(timeB_medias)+1]] <- medias_Jogadores(i)
}
timeA_medias <- timeA_medias %>% map_df(as_tibble)
timeB_medias <- timeB_medias %>% map_df(as_tibble)
timeA_medias <- dplyr::select(timeA_medias, -Use)
timeB_medias <- dplyr::select(timeB_medias, -Use)
partida <- cbind(timeA_medias, timeB_medias)
colnames(partida) <- c('time1R', 'time1ACS', 'time1KAST', 'time1KD', 'time1ADR',
'time2R', 'time2ACS', 'time2KAST', 'time2KD', 'time2ADR')
partida <- select(partida, 'time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR')
partida <- as.data.frame(t(colMeans(partida)))
if(resultado = TRUE){
#' Médias dos times.
#' Função que calcula as médias de cada estatística para os dois times de uma determinada partida.
#' Para utilizar: medias_Times()
#' @export
# Função medias_times -------------------------------------------------------------------------------------
medias_Times <- function (url_partida){
tryCatch(
{
# Pegando os dados no link da partida -------------------------------------------------------------------
links_jogadores <- read_html(url_partida, resultado) %>%
html_nodes('td.mod-player a') %>%
html_attr('href')
# Separando os nomes dos jogadores de cada time em 2 arrays
timeA <- links_jogadores[1:5]
timeB <- links_jogadores[6:10]
# Criando os links usando os nomes dos jogadores para ficar entre '...vlr.gg' e '/?timespan...'
n <- 1
for (i in timeA){
timeA[n] <- paste('https://www.vlr.gg', '/?timespan=all', sep = i)
n = n + 1
}
n <- 1
for(i in timeB){
timeB[n] <- paste('https://www.vlr.gg', '/?timespan=all', sep = i)
n = n + 1
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
for (i in timeB){
timeB_medias[[length(timeB_medias)+1]] <- medias_Jogadores(i)
}
timeA_medias <- timeA_medias %>% map_df(as_tibble)
timeB_medias <- timeB_medias %>% map_df(as_tibble)
timeA_medias <- dplyr::select(timeA_medias, -Use)
timeB_medias <- dplyr::select(timeB_medias, -Use)
partida <- cbind(timeA_medias, timeB_medias)
colnames(partida) <- c('time1R', 'time1ACS', 'time1KAST', 'time1KD', 'time1ADR',
'time2R', 'time2ACS', 'time2KAST', 'time2KD', 'time2ADR')
partida <- select(partida, 'time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR')
partida <- as.data.frame(t(colMeans(partida)))
if(resultado == TRUE){
ganhador <- get_Ganhadores(url_partida)
partida <- cbind(partida, ganhador)
}
else(){}
#' Médias dos times.
#' Função que calcula as médias de cada estatística para os dois times de uma determinada partida.
#' Para utilizar: medias_Times()
#' @export
# Função medias_times -------------------------------------------------------------------------------------
medias_Times <- function (url_partida){
tryCatch(
{
# Pegando os dados no link da partida -------------------------------------------------------------------
links_jogadores <- read_html(url_partida, resultado) %>%
html_nodes('td.mod-player a') %>%
html_attr('href')
# Separando os nomes dos jogadores de cada time em 2 arrays
timeA <- links_jogadores[1:5]
timeB <- links_jogadores[6:10]
# Criando os links usando os nomes dos jogadores para ficar entre '...vlr.gg' e '/?timespan...'
n <- 1
for (i in timeA){
timeA[n] <- paste('https://www.vlr.gg', '/?timespan=all', sep = i)
n = n + 1
}
n <- 1
for(i in timeB){
timeB[n] <- paste('https://www.vlr.gg', '/?timespan=all', sep = i)
n = n + 1
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
for (i in timeB){
timeB_medias[[length(timeB_medias)+1]] <- medias_Jogadores(i)
}
timeA_medias <- timeA_medias %>% map_df(as_tibble)
timeB_medias <- timeB_medias %>% map_df(as_tibble)
timeA_medias <- dplyr::select(timeA_medias, -Use)
timeB_medias <- dplyr::select(timeB_medias, -Use)
partida <- cbind(timeA_medias, timeB_medias)
colnames(partida) <- c('time1R', 'time1ACS', 'time1KAST', 'time1KD', 'time1ADR',
'time2R', 'time2ACS', 'time2KAST', 'time2KD', 'time2ADR')
partida <- select(partida, 'time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR')
partida <- as.data.frame(t(colMeans(partida)))
if(resultado == TRUE){
ganhador <- get_Ganhadores(url_partida)
partida <- cbind(partida, ganhador)
}
#else(){}
return(partida)
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
medias_Times('https://www.vlr.gg/167348/koi-vs-nrg-esports-champions-tour-2023-lock-in-s-o-paulo-alpha-ro16')
#' Médias dos times.
#' Função que calcula as médias de cada estatística para os dois times de uma determinada partida.
#' Para utilizar: medias_Times()
#' @export
# Função medias_times -------------------------------------------------------------------------------------
medias_Times <- function (url_partida, resultado = F){
tryCatch(
{
# Pegando os dados no link da partida -------------------------------------------------------------------
links_jogadores <- read_html(url_partida) %>%
html_nodes('td.mod-player a') %>%
html_attr('href')
# Separando os nomes dos jogadores de cada time em 2 arrays
timeA <- links_jogadores[1:5]
timeB <- links_jogadores[6:10]
# Criando os links usando os nomes dos jogadores para ficar entre '...vlr.gg' e '/?timespan...'
n <- 1
for (i in timeA){
timeA[n] <- paste('https://www.vlr.gg', '/?timespan=all', sep = i)
n = n + 1
}
n <- 1
for(i in timeB){
timeB[n] <- paste('https://www.vlr.gg', '/?timespan=all', sep = i)
n = n + 1
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
for (i in timeB){
timeB_medias[[length(timeB_medias)+1]] <- medias_Jogadores(i)
}
timeA_medias <- timeA_medias %>% map_df(as_tibble)
timeB_medias <- timeB_medias %>% map_df(as_tibble)
timeA_medias <- dplyr::select(timeA_medias, -Use)
timeB_medias <- dplyr::select(timeB_medias, -Use)
partida <- cbind(timeA_medias, timeB_medias)
colnames(partida) <- c('time1R', 'time1ACS', 'time1KAST', 'time1KD', 'time1ADR',
'time2R', 'time2ACS', 'time2KAST', 'time2KD', 'time2ADR')
partida <- select(partida, 'time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR')
partida <- as.data.frame(t(colMeans(partida)))
if(resultado == TRUE){
ganhador <- get_Ganhadores(url_partida)
partida <- cbind(partida, ganhador)
}
#else(){}
return(partida)
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
medias_Times('https://www.vlr.gg/167348/koi-vs-nrg-esports-champions-tour-2023-lock-in-s-o-paulo-alpha-ro16')
medias_Times('https://www.vlr.gg/167348/koi-vs-nrg-esports-champions-tour-2023-lock-in-s-o-paulo-alpha-ro16', resultado = T)
medias_Times('https://www.vlr.gg/165638/wlgaming-esports-vs-macko-esports-challengers-league-italy-rinascimento-split-1-w4', resultado = T)
length(jogos)
nrow(jogos)
jogos_scale <- read.csv2('csv/partidas_5.csv') %>% select(-X, -ganhador)
jogos_scale <- rbind(jogos_scale, partida)
partida <- jogos_scale[nrow(jogos_scale)+1,]
View(partida)
partida <- jogos_scale[nrow(jogos_scale),]
View(partida)
html_lido <- read_html(as.character('https://www.vlr.gg/165638/wlgaming-esports-vs-macko-esports-challengers-league-italy-rinascimento-split-1-w4'))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
html_lido <- read_html(as.character('https://www.vlr.gg/player/570/m1tez'))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
rm(medias_Times)
medias_Jogadores('https://www.vlr.gg/167348/koi-vs-nrg-esports-champions-tour-2023-lock-in-s-o-paulo-alpha-ro16')
rlang::last_error()
rlang::last_trace()
medias_Jogadores('https://www.vlr.gg/165638/wlgaming-esports-vs-macko-esports-challengers-league-italy-rinascimento-split-1-w4')
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(caret)
library(ggplot2)
# Plot
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
read.csv2('csv/a_2.csv')
zzxxz <- read.csv2('csv/a_2.csv')
a <- read.csv2('csv/a_2.csv')
# Iteração para catalogar todos os jogos contidos nos urls armazenados --------------------------------------
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(a[m], ganhador = T)
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
library(valorant)
# Iteração para catalogar todos os jogos contidos nos urls armazenados --------------------------------------
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(a[m], ganhador = T)
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
# Iteração para catalogar todos os jogos contidos nos urls armazenados --------------------------------------
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(a[m], resultado = T)
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
# Fazendo unlist de 'a' e criando 'm' e 'dff' (lista que receberá todos os dados dos jogos) ----------------
m <- 1
dff <- list()
# Iteração para catalogar todos os jogos contidos nos urls armazenados --------------------------------------
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(a[m], resultado = T)
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(readr)
library(purrr)
library(valorant)
# Iteração para catalogar todos os jogos contidos nos urls armazenados --------------------------------------
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(a[m], resultado = T)
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
View(a)
a <- read.csv2('csv/a_2.csv') %>% dplyr:select(-X)
a <- read.csv2('csv/a_2.csv') %>% dplyr::select(-X)
# Iteração para catalogar todos os jogos contidos nos urls armazenados --------------------------------------
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(a[m], resultado = T)
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
a <- unlist(a)
# Iteração para catalogar todos os jogos contidos nos urls armazenados --------------------------------------
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- medias_Times(a[m], resultado = T)
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
View(dff)
jogos <- read.csv2('csv/partidas_3.csv') %>% dplyr::select(-X, -ganhador)
outras_partidas <- read.csv2('csv/outras_partidas_4.csv') %>% dplyr::select(-X, -ganhador)
outras_partidas <- read.csv2('csv/partidas_4.csv') %>% dplyr::select(-X, -ganhador)
jogos <- read.csv2('csv/partidas_4.csv') %>% dplyr::select(-X, -ganhador)
outras_partidas <- read.csv2('csv/partidas_5.csv') %>% dplyr::select(-X, -ganhador)
jogos_scale <- rbind(jogos, outras_partidas)
jogos_scale <- scale(jogos_scale)
length(jogos)
rows(jogos)
nrow(jogos)
jogos_scale[-1,]
jogos_scale[1,]
jogos_scale[-1:1494,]
jogos_scale[-1:-1494,]
jogos_scale[-1:-1492,]
jogos_scale[-1:-2,]
jogos_scale[-1:-1930,]
jogos_scale[-1:-1777,]
jogos_scale[-1:-1794,]
jogos_scale <- rbind(jogos, outras_partidas)
View(jogos_scale)
View(jogos)
jogos <- read.csv2('csv/partidas_5.csv') %>% dplyr::select(-X, -ganhador)
outras_partidas <- read.csv2('csv/partidas_4.csv') %>% dplyr::select(-X, -ganhador)
jogos_scale <- rbind(jogos, outras_partidas)
View(jogos_scale)
View(jogos)
jogos_scale <- scale(jogos_scale)
partidas <- jogos_scale[-1:-nrow(jogos),]
partidas <- as.data.frame(partidas)
previsao <- compute(n, partidas)
previsao <- previsao$net.result
partidas_reversas <- partidas
load(file = "model_4_nnet.rda")
previsao <- compute(n, partidas)
previsao <- previsao$net.result
partidas_reversas <- partidas
partidas_reversas$time1R <- partidas$time2R
partidas_reversas$time2R <- partidas$time1R
partidas_reversas$time1ACS <- partidas$time2ACS
partidas_reversas$time2ACS <- partidas$time1ACS
partidas_reversas$time1KAST <- partidas$time2KAST
partidas_reversas$time2KAST <- partidas$time1KAST
partidas_reversas$time1KD <- partidas$time2KD
partidas_reversas$time2KD <- partidas$time1KD
partidas_reversas$time1ADR <- partidas$time2ADR
partidas_reversas$time2ADR <- partidas$time1ADR
previsao2 <- compute(n, partidas_reversas)
previsao2 <- previsao2$net.result
previsoes <- cbind(previsao, previsao2)
transforma_positivo <- function (x){
y = atan(x*10) + pi/2
return (y)
}
transforma_probabilidade <- function (y, x){
z = y / (y + x)
w = x / (x + y)
c = as.matrix(c(z,w))
return(c)
}
a <- transforma_positivo(previsao)
b <- transforma_positivo(previsao2)
previsao <- transforma_probabilidade(a,b)
previsao <- previsao * 100
previsao2 <- previsao[((length(previsao)/2)+1):length(previsao)]
previsao <- previsao[1:(length(previsao)/2)]
previsao <- cbind(previsao, previsao2)
ganhadores <- read.csv2('csv/partidas_4.csv') %>% dplyr::select(ganhador)
previsao <- cbind(previsao, ganhadores)
colnames(previsao) <- c('previsao1', 'previsao2', 'ganhador')
previsao <- previsao %>%
mutate(ganhador = as.factor(ganhador))
# Plot
ggplot(data = previsao, mapping = aes(x = previsao1, y = previsao2, colour = ganhador)) +
geom_tile(aes(fill = ganhador)) +
geom_point() +
theme_bw()
resultados <- dplyr::select(previsao, ganhador)
resultadovspredict <- cbind(partidas, previsao)
resultadovspredict$previsoes <-  ifelse(resultadovspredict$previsao1>resultadovspredict$previsao2,
1,
0)
i <- sum(resultadovspredict$ganhador == resultadovspredict$previsoes)/nrow(resultadovspredict)
jogos <- read.csv2('csv/partidas_5.csv') %>% dplyr::select(-X, -ganhador)
outras_partidas <- read.csv2('csv/partidas_4.csv') %>% dplyr::select(-X, -ganhador)
jogos_scale <- rbind(jogos, outras_partidas)
jogos_scale <- scale(jogos_scale)
partidas <- jogos_scale[-1:-nrow(jogos),]
partidas <- as.data.frame(partidas)
previsao <- compute(n, partidas)
previsao <- previsao$net.result
partidas_reversas <- partidas
partidas_reversas$time1R <- partidas$time2R
partidas_reversas$time2R <- partidas$time1R
partidas_reversas$time1ACS <- partidas$time2ACS
partidas_reversas$time2ACS <- partidas$time1ACS
partidas_reversas$time1KAST <- partidas$time2KAST
partidas_reversas$time2KAST <- partidas$time1KAST
partidas_reversas$time1KD <- partidas$time2KD
partidas_reversas$time2KD <- partidas$time1KD
partidas_reversas$time1ADR <- partidas$time2ADR
partidas_reversas$time2ADR <- partidas$time1ADR
previsao2 <- compute(n, partidas_reversas)
previsao2 <- previsao2$net.result
previsoes <- cbind(previsao, previsao2)
transforma_positivo <- function (x){
y = atan(x) + pi/2
return (y)
}
transforma_probabilidade <- function (y, x){
z = y / (y + x)
w = x / (x + y)
c = as.matrix(c(z,w))
return(c)
}
a <- transforma_positivo(previsao)
b <- transforma_positivo(previsao2)
previsao <- transforma_probabilidade(a,b)
previsao <- previsao * 100
previsao2 <- previsao[((length(previsao)/2)+1):length(previsao)]
previsao <- previsao[1:(length(previsao)/2)]
previsao <- cbind(previsao, previsao2)
ganhadores <- read.csv2('csv/partidas_4.csv') %>% dplyr::select(ganhador)
previsao <- cbind(previsao, ganhadores)
colnames(previsao) <- c('previsao1', 'previsao2', 'ganhador')
previsao <- previsao %>%
mutate(ganhador = as.factor(ganhador))
# Plot
ggplot(data = previsao, mapping = aes(x = previsao1, y = previsao2, colour = ganhador)) +
geom_tile(aes(fill = ganhador)) +
geom_point() +
theme_bw()
resultados <- dplyr::select(previsao, ganhador)
resultadovspredict <- cbind(partidas, previsao)
resultadovspredict$previsoes <-  ifelse(resultadovspredict$previsao1>resultadovspredict$previsao2,
1,
0)
i <- sum(resultadovspredict$ganhador == resultadovspredict$previsoes)/nrow(resultadovspredict)
load(file = "rede_neural.rda")
preverResultado <- function(link){
# Pegando os dados no link da partida ----------------------------------------------------------------------
partida <- medias_Times(link)
jogos_scale <- read.csv2('csv/partidas.csv') %>% select(-X, -ganhador)
jogos_scale <- rbind(jogos_scale, partida)
jogos_scale <- scale(jogos_scale)
partida <- jogos_scale[nrow(jogos_scale),]
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR')
previsao <- compute(n, partida)
previsao <- previsao$net.result[1]
partida_reversa <- partida
partida_reversa$time1R <- partida$time2R
partida_reversa$time2R <- partida$time1R
partida_reversa$time1ACS <- partida$time2ACS
partida_reversa$time2ACS <- partida$time1ACS
partida_reversa$time1KAST <- partida$time2KAST
partida_reversa$time2KAST <- partida$time1KAST
partida_reversa$time1KD <- partida$time2KD
partida_reversa$time2KD <- partida$time1KD
partida_reversa$time1ADR <- partida$time2ADR
partida_reversa$time2ADR <- partida$time1ADR
previsao2 <- compute(n, partida_reversa)
previsao2 <- previsao2$net.result[1]
a <- previsao
b <- previsao2
transforma_positivo <- function (x){
y = atan(x) + pi/2
return (y)
}
transforma_probabilidade <- function (y, x){
z = y / (y + x)
w = x / (x + y)
c = as.matrix(c(z,w))
return(c)
}
a <- transforma_positivo(a)
b <- transforma_positivo(b)
previsao <- transforma_probabilidade(a,b)
previsao <- previsao * 100
return(previsao)
}
return <- preverResultado(
'https://www.vlr.gg/130685/loud-vs-optic-gaming-valorant-champions-2022-gf'
)
#Instalando pacotes (se necessário)
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
#Instalando pacotes (se necessário)
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant")
#Instalando pacotes (se necessário)
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
detach("package:valorant", unload = TRUE)
install_github("Juniorffonseca/r-pacote-valorant")
load(file = "rede_neural.rda")
prever(link)
prever(x)
valorant::prever()
library(valorant)
load(file = "rede_neural.rda")
prever(link)
return <- prever(
'https://www.vlr.gg/130685/loud-vs-optic-gaming-valorant-champions-2022-gf'
)
