medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
for (i in colnames(dados_jogador)){
as.numeric(dados_jogador[[i]]) * dados_jogador$Use
}
# dados_jogador$Rating <- dados_jogador$Rating * dados_jogador$Use
# dados_jogador$ACS <- dados_jogador$ACS * dados_jogador$Use
# dados_jogador$KAST <- dados_jogador$KAST * dados_jogador$Use
# dados_jogador$
# for (i in dados_jogador$Rating) {
#   sum(dados_jogador$)
# }
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
#means_jogador <- round(colMeans(dados_jogador, na.rm = T), 2)
#means_jogador[['KAST']] <- round(means_jogador[['KAST']], 0)
return(dados_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
for (i in colnames(dados_jogador)){
as.numeric(dados_jogador[[i]]) * as.numeric(dados_jogador$Use)
}
# dados_jogador$Rating <- dados_jogador$Rating * dados_jogador$Use
# dados_jogador$ACS <- dados_jogador$ACS * dados_jogador$Use
# dados_jogador$KAST <- dados_jogador$KAST * dados_jogador$Use
# dados_jogador$
# for (i in dados_jogador$Rating) {
#   sum(dados_jogador$)
# }
#means_jogador <- round(colMeans(dados_jogador, na.rm = T), 2)
#means_jogador[['KAST']] <- round(means_jogador[['KAST']], 0)
return(dados_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
timeA_medias[1]
timeA_medias[1][1]
timeA_medias[[1]
]
timeA_medias[[1]]
timeA_medias[[1]][[1]]
timeA_medias[[1]][[,1]]
timeA_medias[1,]
length(timeA_medias[1])
length(timeA_medias[[1])
length(timeA_medias[[1]])
?ncol
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
# for (i in colnames(dados_jogador)){
#   as.numeric(dados_jogador[[i]]) * as.numeric(dados_jogador$Use)
# }
# dados_jogador$Rating <- dados_jogador$Rating * dados_jogador$Use
# dados_jogador$ACS <- dados_jogador$ACS * dados_jogador$Use
# dados_jogador$KAST <- dados_jogador$KAST * dados_jogador$Use
# dados_jogador$
# for (i in dados_jogador$Rating) {
#   sum(dados_jogador$)
# }
#means_jogador <- round(colMeans(dados_jogador, na.rm = T), 2)
#means_jogador[['KAST']] <- round(means_jogador[['KAST']], 0)
return(dados_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador$Use <- sum(dados_jogador$Use)
# for (i in colnames(dados_jogador)){
#   as.numeric(dados_jogador[[i]]) * as.numeric(dados_jogador$Use)
# }
# dados_jogador$Rating <- dados_jogador$Rating * dados_jogador$Use
# dados_jogador$ACS <- dados_jogador$ACS * dados_jogador$Use
# dados_jogador$KAST <- dados_jogador$KAST * dados_jogador$Use
# dados_jogador$
# for (i in dados_jogador$Rating) {
#   sum(dados_jogador$)
# }
#means_jogador <- round(colMeans(dados_jogador, na.rm = T), 2)
#means_jogador[['KAST']] <- round(means_jogador[['KAST']], 0)
return(dados_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- sum(dados_jogador)
# for (i in colnames(dados_jogador)){
#   as.numeric(dados_jogador[[i]]) * as.numeric(dados_jogador$Use)
# }
# dados_jogador$Rating <- dados_jogador$Rating * dados_jogador$Use
# dados_jogador$ACS <- dados_jogador$ACS * dados_jogador$Use
# dados_jogador$KAST <- dados_jogador$KAST * dados_jogador$Use
# dados_jogador$
# for (i in dados_jogador$Rating) {
#   sum(dados_jogador$)
# }
#means_jogador <- round(colMeans(dados_jogador, na.rm = T), 2)
#means_jogador[['KAST']] <- round(means_jogador[['KAST']], 0)
return(dados_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- sum(dados_jogador, na.rm = T)
# for (i in colnames(dados_jogador)){
#   as.numeric(dados_jogador[[i]]) * as.numeric(dados_jogador$Use)
# }
# dados_jogador$Rating <- dados_jogador$Rating * dados_jogador$Use
# dados_jogador$ACS <- dados_jogador$ACS * dados_jogador$Use
# dados_jogador$KAST <- dados_jogador$KAST * dados_jogador$Use
# dados_jogador$
# for (i in dados_jogador$Rating) {
#   sum(dados_jogador$)
# }
#means_jogador <- round(colMeans(dados_jogador, na.rm = T), 2)
#means_jogador[['KAST']] <- round(means_jogador[['KAST']], 0)
return(dados_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum)
# for (i in colnames(dados_jogador)){
#   as.numeric(dados_jogador[[i]]) * as.numeric(dados_jogador$Use)
# }
# dados_jogador$Rating <- dados_jogador$Rating * dados_jogador$Use
# dados_jogador$ACS <- dados_jogador$ACS * dados_jogador$Use
# dados_jogador$KAST <- dados_jogador$KAST * dados_jogador$Use
# dados_jogador$
# for (i in dados_jogador$Rating) {
#   sum(dados_jogador$)
# }
#means_jogador <- round(colMeans(dados_jogador, na.rm = T), 2)
#means_jogador[['KAST']] <- round(means_jogador[['KAST']], 0)
return(dados_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
# for (i in colnames(dados_jogador)){
#   as.numeric(dados_jogador[[i]]) * as.numeric(dados_jogador$Use)
# }
# dados_jogador$Rating <- dados_jogador$Rating * dados_jogador$Use
# dados_jogador$ACS <- dados_jogador$ACS * dados_jogador$Use
# dados_jogador$KAST <- dados_jogador$KAST * dados_jogador$Use
# dados_jogador$
# for (i in dados_jogador$Rating) {
#   sum(dados_jogador$)
# }
#means_jogador <- round(colMeans(dados_jogador, na.rm = T), 2)
#means_jogador[['KAST']] <- round(means_jogador[['KAST']], 0)
return(dados_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
# for (i in colnames(dados_jogador)){
#   as.numeric(dados_jogador[[i]]) * as.numeric(dados_jogador$Use)
# }
# dados_jogador$Rating <- dados_jogador$Rating * dados_jogador$Use
# dados_jogador$ACS <- dados_jogador$ACS * dados_jogador$Use
# dados_jogador$KAST <- dados_jogador$KAST * dados_jogador$Use
# dados_jogador$
# for (i in dados_jogador$Rating) {
#   sum(dados_jogador$)
# }
#means_jogador <- round(colMeans(dados_jogador, na.rm = T), 2)
#means_jogador[['KAST']] <- round(means_jogador[['KAST']], 0)
return(dados_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
means_jogador <- round(colMeans(dados_jogador, na.rm = T), 2)
means_jogador[['KAST']] <- round(means_jogador[['KAST']], 0)
return(dados_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
medias_jogador <- round(dados_jogador, 2)
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
medias_jogador <- lapply(dados_jogador, round(2))
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
?round
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
medias_jogador <- dados_jogador
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
medias_jogador <- dados_jogador %>% round(2)
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
medias_jogador <- dados_jogador %>% round(as.numeric(dados_jogador), 2)
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use)
medias_jogador <- dados_jogador
medias_jogador <- round(medias_jogador, 2)
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- round(lapply(dados_jogador, function(x, y) x / y, dados_jogador$Use), 2)
medias_jogador <- dados_jogador
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
medias_Jogadores <- function(url_jogador){
html_lido <- read_html(as.character(url_jogador))
dados_jogador <- html_nodes(html_lido, 'table') %>%
html_table()
dados_jogador <- dados_jogador %>% map_df(as_tibble, .name_repair = 'minimal') %>%
dplyr::select(Use, Rating, ACS, KAST, 'K:D', ADR)
dados_jogador$Use <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", dados_jogador$Use))
dados_jogador$KAST <- parse_number(dados_jogador$KAST)
dados_jogador[,2:ncol(dados_jogador)] <- lapply(dados_jogador[,2:ncol(dados_jogador)],
function(x, y) x * y, y = dados_jogador$Use)
dados_jogador <- lapply(dados_jogador, sum, na.rm = T)
dados_jogador <- lapply(dados_jogador, function(x, y) round(x / y, 2), dados_jogador$Use)
medias_jogador <- dados_jogador
medias_jogador[['KAST']] <- round(medias_jogador[['KAST']], 0)
return(medias_jogador)
}
timeA_medias <- list()
timeB_medias <- list()
for (i in timeA){
timeA_medias[[length(timeA_medias)+1]] <- medias_Jogadores(i)
}
library(valorant)
library('valorant')
library(valorant)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(caret)
library(ggplot2)
library('valorant')
install(valorant)
install.packages('valorant')
install.packages("valorant")
valorant::medias_Jogadores()
library('valorant')
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(valorant)
#Instalando pacotes (se necessário)
install_github("Juniorffonseca/r-pacote-valorant")
#Instalando pacotes (se necessário)
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
#Instalando pacotes (se necessário)
library(devtools)
install_github("Juniorffonseca/r-pacote-valorant")
library(valorant)
valorant::medias_Jogadores()
library(roxygen2)
install_github("Juniorffonseca/r-pacote-valorant")
install_github("Juniorffonseca/r-pacote-valorant", force = T)
library(valorant)
detach("package:valorant", unload = TRUE)
remove.packages("valorant")
install_github("Juniorffonseca/r-pacote-valorant")
#Instalando pacotes (se necessário)
library(devtools)
library(roxygen2)
install_github("Juniorffonseca/r-pacote-valorant")
