timeA_df <- dplyr::select(timeA_df, R, ACS, 'K:D', KAST, ADR)
timeB_df <- filter(players, players$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, 'K:D', KAST, ADR)
# Médias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$'K:D')
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$'K:D')
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
jogos_scale <- read.csv2('csv/partidas.csv') %>% select(-X, -ganhador)
jogos_scale <- rbind(jogos_scale, partida)
jogos_scale <- scale(jogos_scale)
partida <- jogos_scale[814,]
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR')
View(partida)
previsao <- compute(n, partida)
previsao <- previsao$net.result[1]
partida_reversa <- partida
partida_reversa$time1R <- partida$time2R
partida_reversa$time2R <- partida$time1R
partida_reversa$time1ACS <- partida$time2ACS
partida_reversa$time2ACS <- partida$time1ACS
partida_reversa$time1KAST <- partida$time2KAST
partida_reversa$time2KAST <- partida$time1KAST
partida_reversa$time1KD <- partida$time2KD
partida_reversa$time2KD <- partida$time1KD
partida_reversa$time1ADR <- partida$time2ADR
partida_reversa$time2ADR <- partida$time1ADR
previsao2 <- compute(n, partida_reversa)
previsao2 <- previsao2$net.result[1]
a <- previsao
b <- previsao2
transforma_positivo <- function (x){
y = atan(x) + pi/2
return (y)
}
transforma_probabilidade <- function (y, x){
z = y / (y + x)
w = x / (x + y)
c = as.matrix(c(z,w))
return(c)
}
a <- transforma_positivo(a)
b <- transforma_positivo(b)
previsao <- transforma_probabilidade(a,b)
previsao <- previsao * 100
read.csv2('csv/historico_formatado.csv')
historico <- read.csv2('csv/historico_formatado.csv')
View(historico)
rm(historico)
link <- "https://www.vlr.gg/stats/?event_group_id=all&event_id=all&region=all&country=all&min_rounds=50&min_rating=1550&agent=all&map_id=all&timespan=all"
players <- read_html(link) %>%
html_node("table") %>%
html_table() %>%
separate(Player, into = c("Player", "Team"), sep = "\\s+", extra = "merge") %>%
select('Player', 'Team', 'R', 'ACS', 'K:D', 'KAST', 'ADR') %>%
as.data.frame()
View(players)
players <- read_html(link) %>%
html_node("table") %>%
html_table() %>%
separate(Player, into = c("Player", "Team"), sep = "\\s+", extra = "merge") %>%
select('Player', 'Team', 'R', 'Rnd', 'ACS', 'K:D', 'KAST', 'ADR') %>%
as.data.frame()
View(players)
# Matriz de confusão ---------------------------------------------------------------------------------------
jogos <- read.csv2('csv/partidas.csv') %>% dplyr::select(-X)
set.seed(3)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
normalizando_test <- dplyr::select(test_data, -ganhador)
normalizando_test <- as.data.frame(scale(normalizando_test))
test_data <- dplyr::select(test_data, ganhador)
test_data <- cbind(normalizando_test, test_data)
normalizando_training <- dplyr::select(training_data, -ganhador)
normalizando_training <- as.data.frame(scale(normalizando_training))
training_data <- dplyr::select(training_data, ganhador)
training_data <- cbind(normalizando_training, training_data)
training_data$ganhador <- as.factor(training_data$ganhador)
test_data$ganhador <- as.factor(test_data$ganhador)
load('model_nnet.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
nn2 <- as.factor(nn2)
confusionMatrix(nn2, test_data$ganhador)
library(tibble)
library(stringr)
library(neuralnet)
library(caret)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
confusionMatrix(nn2, test_data$ganhador)
library(ggplot2)
x <- confusionMatrix(nn2, test_data$ganhador)
View(x)
df <- x$table
x$positive
x$overall
x$byClass
x$mode
x <- x$table
x
x <- x$table
x <- confusionMatrix(nn2, test_data$ganhador)
x <- x$table
view(x)
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Y), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Y)), vjust = 1) +
scale_fill_gradient(low = 'blue', high = 'red') +
theme_bw() + theme(legend.position = 'none')
x <- confusionMatrix(nn2, test_data$ganhador)
x <- as.data.frame(x$table)
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Y), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Y)), vjust = 1) +
scale_fill_gradient(low = 'blue', high = 'red') +
theme_bw() + theme(legend.position = 'none')
View(x)
View(x)
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = FREQ), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', FREQ)), vjust = 1) +
scale_fill_gradient(low = 'blue', high = 'red') +
theme_bw() + theme(legend.position = 'none')
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'blue', high = 'red') +
theme_bw() + theme(legend.position = 'none')
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'blue', high = 'green') +
theme_bw() + theme(legend.position = 'none')
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'red', high = 'green') +
theme_bw() + theme(legend.position = 'none')
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'blue') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'red', high = 'green') +
theme_bw() + theme(legend.position = 'none')
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'red', high = 'green') +
theme_bw() + theme(legend.position = 'none')
?scale_fill_gradient
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'black', high = 'green') +
theme_bw() + theme(legend.position = 'none')
ggplot(data = x, mapping = aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = Freq), colour = 'white') +
geom_text(aes(label = sprintf('%1.0f', Freq)), vjust = 1) +
scale_fill_gradient(low = 'white', high = 'green') +
theme_bw() + theme(legend.position = 'none')
load('model_nnet.rda')
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(caret)
library(ggplot2)
plot(n)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(caret)
library(ggplot2)
?neuralnet
?scale
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
historico <- read.csv2('csv/historico_formatado.csv') %>% dplyr::select(-X)
teste <- array(historico, dim = c(10, 10, 11767))
View(teste)
teste[1]
?array
teste <- array(data = historico, dim = c(10, 10, 10))
View(teste)
teste <- array(data = historico, dim = c(10, 10))
View(teste)
View(teste)
View(teste)
View(teste)
teste[1]
?dim
dados_gerais <- read.csv2('csv/jogadores.csv')
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
jogos <- read.csv2('csv/partidas.csv') %>% dplyr::select(-X, -ganhador)
outras_partidas <- read.csv2('csv/outras_partidas.csv') %>% dplyr::select(-X, -ganhador)
jogos_scale <- rbind(jogos, outras_partidas)
jogos_scale <- scale(jogos_scale)
partidas <- jogos_scale[-1:-813,]
partidas <- as.data.frame(partidas)
previsao <- compute(n, partidas)
previsao <- previsao$net.result
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
dados_gerais <- read.csv2('csv/jogadores.csv')
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
jogos <- read.csv2('csv/partidas.csv') %>% dplyr::select(-X, -ganhador)
outras_partidas <- read.csv2('csv/outras_partidas.csv') %>% dplyr::select(-X, -ganhador)
jogos_scale <- rbind(jogos, outras_partidas)
jogos_scale <- scale(jogos_scale)
partidas <- jogos_scale[-1:-813,]
partidas <- as.data.frame(partidas)
previsao <- compute(n, partidas)
previsao <- previsao$net.result
partidas_reversas <- partidas
partidas_reversas$time1R <- partidas$time2R
partidas_reversas$time2R <- partidas$time1R
partidas_reversas$time1ACS <- partidas$time2ACS
partidas_reversas$time2ACS <- partidas$time1ACS
partidas_reversas$time1KAST <- partidas$time2KAST
load(file = "model_nnet.rda")
dados_gerais <- read.csv2('csv/jogadores.csv')
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
jogos <- read.csv2('csv/partidas.csv') %>% dplyr::select(-X, -ganhador)
outras_partidas <- read.csv2('csv/outras_partidas.csv') %>% dplyr::select(-X, -ganhador)
jogos_scale <- rbind(jogos, outras_partidas)
jogos_scale <- scale(jogos_scale)
partidas <- jogos_scale[-1:-813,]
partidas <- as.data.frame(partidas)
previsao <- compute(n, partidas)
previsao <- previsao$net.result
partidas_reversas <- partidas
partidas_reversas$time1R <- partidas$time2R
partidas_reversas$time2R <- partidas$time1R
partidas_reversas$time1ACS <- partidas$time2ACS
partidas_reversas$time2ACS <- partidas$time1ACS
partidas_reversas$time1KAST <- partidas$time2KAST
partidas_reversas$time2KAST <- partidas$time1KAST
partidas_reversas$time1KD <- partidas$time2KD
partidas_reversas$time2KD <- partidas$time1KD
partidas_reversas$time1ADR <- partidas$time2ADR
partidas_reversas$time2ADR <- partidas$time1ADR
previsao2 <- compute(n, partidas_reversas)
previsao2 <- previsao2$net.result
previsoes <- cbind(previsao, previsao2)
transforma_positivo <- function (x){
y = atan(x*10) + pi/2
return (y)
}
transforma_probabilidade <- function (y, x){
z = y / (y + x)
w = x / (x + y)
c = as.matrix(c(z,w))
return(c)
}
a <- transforma_positivo(previsao)
b <- transforma_positivo(previsao2)
previsao <- transforma_probabilidade(a,b)
previsao <- previsao * 100
previsao2 <- previsao[278:554]
previsao <- previsao[1:277]
previsao <- cbind(previsao, previsao2)
ganhadores <- read.csv2('csv/outras_partidas.csv') %>% dplyr::select(ganhador)
previsao <- cbind(previsao, ganhadores)
colnames(previsao) <- c('previsao1', 'previsao2', 'ganhador')
previsao <- previsao %>%
mutate(ganhador = as.factor(ganhador))
# Plot
ggplot(data = previsao, mapping = aes(x = previsao1, y = previsao2, colour = ganhador)) +
geom_tile(aes(fill = ganhador)) +
geom_point() +
theme_bw()
View(previsao)
previsao <- transforma_probabilidade(a,b)
previsao <- previsao * 100
previsao2 <- previsao[278:554]
previsao <- previsao[1:277]
previsao <- cbind(previsao, previsao2)
ganhadores <- read.csv2('csv/outras_partidas.csv') %>% dplyr::select(ganhador)
previsao <- cbind(previsao, ganhadores)
colnames(previsao) <- c('previsao1', 'previsao2', 'ganhador')
previsao <- previsao %>%
mutate(ganhador = as.factor(ganhador))
# Plot
ggplot(data = previsao, mapping = aes(x = previsao1, y = previsao2, colour = ganhador)) +
geom_tile(aes(fill = ganhador)) +
geom_point() +
theme_bw()
historico <- read.csv2('csv/historico_formatado.csv') %>% dplyr::select(-X)
# Carregando pacotes --------------------------------------------------------------------------------------
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
library(tidyverse)
library(neuralnet)
library(readr)
library(purrr)
historico <- read.csv2('csv/historico_formatado.csv') %>% dplyr::select(-X)
teste <- array(unlist(historico), c(10, 10, 2),
dimnames=list(rownames(df1), colnames(df1)))
teste <- array(unlist(historico), c(10, 10, 2),
dimnames=list(rownames(historico), colnames(historico)))
teste <- array(unlist(historico), c(10, 10, 2))
teste[1]
teste[2]
teste <- array(unlist(historico), c(10, 10))
teste <- array(unlist(historico), c(100, 10))
teste <- array(unlist(historico), c(100, 100))
teste <- array(unlist(historico), c(100, 100, 100))
teste[1]
teste[[1]]
mat <- as.matrix(historico)
View(mat)
mat[]
mat[1]
mat[1,2]
?as.matrix
mat <- as.matrix(historico, nrow = 10, ncol = 10) #testando
mat[1]
mat <- as.matrix(historico, nrow = 10, ncol = 10, byrow = TRUE) #testando
mat[1]
mat <- as.matrix(historico) #testando
mat <- as.matrix.data.frame(historico) #testando
mat[1]
?as.matrix.data.frame
data = split(historico, seq(nrow(historico)))
?seq
data = split(historico, seq(nrow(historico), by = 10))
data = split(historico, seq(1, nrow(historico), by = 10))
View(data)
data[1]
data[1[1]]
player[1,[1]]
player[1][1]
data[1][1]
data[1[1]]
data[1]$1
data[1$Player]
data$1
write.csv(data, 'teste')
data = split(historico, seq(0, nrow(historico), by = 10))
data = split(historico, seq(1, nrow(historico), by = 11))
?split
data = split(historico, seq(1, nrow(historico), by = 11), lex.order = T)
data = split(historico, seq(1, ncol(historico), by = 11))
View(data)
data = split(historico, seq(1, 10, by = 1))
data = split(historico, seq(historico, by = 1))
data = split(historico, seq(nrow(historico), by = 1))
data = split(historico, seq(nrow(historico)))
View(data)
?for
?for each
?foreach
?for
?for()
i <- 1
n <- 1
data <- list()
split(historico, 1, 10)
split(historico, seq(1, 10))
historico[1:10]
historico[1:10,]
m <- 10
while(i < 11767){
data[[length(data)+1]] <- historico[n: m,]
n = n + 10
m = m + 10
i = i + 1
}
View(data)
data[1]
data[2]
data[3]
data[4]
data[11765]
rm(mat)
rm(teste)
rm(data)
while(i < 11767){
partidas[[length(partidas)+1]] <- historico[n: m,]
n = n + 10
m = m + 10
i = i + 1
}
i <- 1
n <- 1
m <- 10
i <- 1
n <- 1
m <- 10
partidas <- list()
while(i < 11767){
partidas[[length(partidas)+1]] <- historico[n: m,]
n = n + 10
m = m + 10
i = i + 1
}
partidas[11766]
View(historico)
i <- 1
n <- 1
m <- 10
partidas <- list()
while(i = 11767){
while(i == 11767){
partidas[[length(partidas)+1]] <- historico[n: m,]
n = n + 10
m = m + 10
i = i + 1
}
while(i == 11767){
partidas[[length(partidas)+1]] <- historico[n: m,]
n = n + 10
m = m + 10
i = i + 1
}
while(i === 11767){
while(i < 11768){
partidas[[length(partidas)+1]] <- historico[n: m,]
n = n + 10
m = m + 10
i = i + 1
}
partidas[11768]
partidas[11767]
View(partidas)
View(historico)
i <- 1
n <- 1
m <- 10
partidas <- list()
while(i < 11767){
partidas[[length(partidas)+1]] <- historico[n: m,]
n = n + 10
m = m + 10
i = i + 1
}
partidas[11767]
partidas[11766]
i <- 1
n <- 1
m <- 10
partidas <- list()
while(i < 11768){
partidas[[length(partidas)+1]] <- historico[n: m,]
n = n + 10
m = m + 10
i = i + 1
}
partidas[11767]
View(historico)
write.csv2(historico, 'csv/historico.csv')
